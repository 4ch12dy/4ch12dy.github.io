<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-04T07:06:56.247Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS微博客户端动态页面去广告</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/04/weibo-re-remove-ad/weibo-re-remove-ad/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/04/weibo-re-remove-ad/weibo-re-remove-ad/</id>
    <published>2019-08-03T16:47:53.000Z</published>
    <updated>2019-08-04T07:06:56.247Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="iOS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iqy-remove-ad</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/03/iqy-remove-ad/iqy-remove-ad/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/03/iqy-remove-ad/iqy-remove-ad/</id>
    <published>2019-08-03T15:54:20.000Z</published>
    <updated>2019-08-03T15:59:09.706Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-07-30T16:32:08.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="上手实践"><a href="#上手实践" class="headerlink" title="上手实践"></a>上手实践</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>待续…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
</feed>
