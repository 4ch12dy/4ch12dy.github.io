<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-13T11:12:06.727Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS LLDB中反反调试分析与实现</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/</id>
    <published>2019-08-12T11:16:01.000Z</published>
    <updated>2019-08-13T11:12:06.727Z</updated>
    
    <content type="html"><![CDATA[<p>###iOS LLDB中反反调试分析与实现</p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反反调试还没人做过，这也是我一直想解决的一个方案，毕竟本身就是为了调试，那么在LLDB直接输入一行命令就能反反调试应该相对酸爽。本文将介绍一种基于内存单指令patch的方式进行反反调试的方案，大概意思就是通过直接修改代码段的指令来绕过反调试机制。</p><h4 id="目前反调试与反反调试情况"><a href="#目前反调试与反反调试情况" class="headerlink" title="目前反调试与反反调试情况"></a>目前反调试与反反调试情况</h4><p>这里庆哥写了一遍文章分析了 <a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">关于反调试&amp;反反调试那些事</a></p><p>这里简单归纳一下，有如下几种：</p><ul><li>ptrace</li><li>sysctl</li><li>syscall</li><li>SIGTOP</li><li>task_get_exception_ports</li></ul><p>这里实际上就大概三种，其他都是基于ptrace的变种。ptrace这个函数是linux就提供的一个接口，常常用作linux系的反调试，本质就是通过26号系统调用来完成的，目前大多反调试都利用该方案。</p><p>后面看到庆哥同样提供了一个反反调试的LLDB脚本，不过看了下和我的思路还是不一样的。（<del>差点以为白做了）</del></p><p>正如文章里面写到通过<code>lldb</code>下断点，然后修改参数，或者直接返回也可以达到反反调试的效果。由于要不断去检查执行状态等，或者程序有定时器定时检测，这个脚本影响性能及变得很卡影响调试体验。不过还是膜庆哥的方案，学习了。</p><h4 id="内存patch实现反反调试"><a href="#内存patch实现反反调试" class="headerlink" title="内存patch实现反反调试"></a>内存patch实现反反调试</h4><p>说一下大概思路：</p><ul><li>内存中找到<code>ptrace</code>地址</li><li>将该内存map为<code>rwx</code></li><li><p>直接将首调指令修改为<code>ret</code>指令</p><p>刚开始以为就这样简单就完了，结果实际写代码的时候才发现过程远比想象中复杂。</p></li></ul><p>由于iOS不允许直接将代码段map为写权限，这里调用<code>mach_vm_protect</code>或<code>mprotect</code>都会异常。但是类似frida、substitute以及hookzz都能进行指令hook。这样说来，肯定是可以修改代码段的。看了下substitute以及frida中关于这块的实现，才发现可以用一种remap的方式修改代码段。</p><p>大致的流程如下：</p><ul><li>使用mmap新建一块内存，把这块内存叫做new</li><li>使用vm_copy把想要篡改的处于__text段内的内存（把这块内存叫target）拷贝到new里</li><li>向new里写入想执行的代码</li><li>调用mprotect把new改为rx。因为mmap出来的内存的max_protection是rwx，所以这里mprotect改权限没问题</li><li>调用mach_vm_remap把new的内容反映回target里</li></ul><p>不过当我写代码测试的时候发现，remap以后整个页数据都变成了0。实在不清楚原因，向Zz求助，Zz直接扔了我他实现这块的代码。我看了以后收益匪浅，只怪之前没分析hookzz的具体实现。后面才知道由于我的设备是iOS12，Zz意思是codesign的问题，hookZz也没支持。于是换了一台iOS9的设备，果然就可以了，向Zz低头。</p><p>期间还由于我手残忘记调用mprotect把new改为rx。导致直接执行异常，用<code>memory region</code>查看地址才知道页保护属性为<code>rw</code>。</p><p>相关代码如下：</p><p>1、map new page for patch</p><pre><code class="c">    // map new page for patch    void *new = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0);    if (!new ){        NSLog(@&quot;[-] mmap failed!&quot;);        return;    }    NSLog(@&quot;[*] new map address:%p&quot;, new);</code></pre><p>2、start patch</p><pre><code class="c">    // start patch        kret = vm_copy(self_task, (unsigned long)page_start, 0x1000, (vm_address_t) new);    if (kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    char patch_ret_ins_data[4] = {0xc0, 0x03, 0x5f, 0xd6}; // ret     memcpy((void *)(new+patch_offset), patch_ret_ins_data, 4);    NSLog(@&quot;[*] new map+offset address:%p&quot;, (void *)(new+patch_offset));</code></pre><p>3、set new page back to r-x</p><pre><code class="c">    // set back to r-x    int ret = mprotect(new, 0x1000, PROT_READ | PROT_EXEC);    NSLog(@&quot;[*] ret: %d, errno: %d, addr: %p&quot;, ret, errno, new);</code></pre><p>4、remap the target page</p><pre><code class="c">    kret = mach_vm_remap(mach_task_self(), &amp;target, 0x1000, 0,                       VM_FLAGS_OVERWRITE, self_task,                       (mach_vm_address_t) new, TRUE,                       &amp;c, &amp;m, inherit);    if(kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    NSLog(@&quot;[*] now ptrace_ptr address:%p&quot;, ptrace_ptr)</code></pre><p>5、clear cache</p><pre><code class="c">    void* clear_start_ = (void*)page_start + patch_offset;  sys_icache_invalidate (clear_start_, 4);  sys_dcache_flush (clear_start_, 4);</code></pre><p>完整的代码在xia0LLDB里面已经集成：<a href="https://github.com/4ch12dy/xia0LLDB">https://github.com/4ch12dy/xia0LLDB</a></p><h4 id="一个简单反反调试实验"><a href="#一个简单反反调试实验" class="headerlink" title="一个简单反反调试实验"></a>一个简单反反调试实验</h4><p>这里以爱奇艺为例子分析，爱奇艺在main函数里面动态调用了ptrace函数进行反调试。</p><ul><li><p>后台启动方式启动爱奇艺</p><pre><code class="shell">xia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo[I]:iproxy process for 2222 port alive, pid=16264 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=16428 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo</code></pre></li><li><p>LLDB挂上以后在main函数下断点以后直接执行<code>debugme</code>命令</p><pre><code>(lldb) debugmeKill antiDebug by xia0:[*] target address: 6501024128 and offset: 384[*] mmap new page: 4572217344 success! [+] vm_copy success![+] mach_vm_write success![*] set new page back to r-x success![*] vm_region_recurse_64 success![*] get page info success![+] remap success![*] clear cache success![+] all done! happy debug~</code></pre><p>下面查看对比下patch前后指令ptrace首指令的变化</p><p>Patch之前</p><pre><code>(lldb) x/12i 0x00000001837dc180    0x1837dc180: 0xf00f26a9   adrp   x9, 124119    0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>Patch之后</p><pre><code>(lldb) x/12i 0x1837dc180    0x1837dc180: 0xd65f03c0   ret        0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>可以发现首地址已经变成了ret指令。</p></li><li><p>执行continue命令，发现爱奇艺已经能够正常调试。</p><pre><code>(lldb) cProcess 3176 resuming2019-08-13 17:22:17.283 iQiYiPhoneVideo[3176:161840] [plcrash]: init ok2019-08-13 17:22:17.790 iQiYiPhoneVideo[3176:161840] -[QYBaikePageDurationManager bk_appDidBecomeActive:]2019-08-13 17:22:17.922 iQiYiPhoneVideo[3176:161840] CoreData: Failed to load optimized model at path &#39;/var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/QYPGCDataModel.momd/QYPGCDataModel_970.omo&#39;2019-08-13 17:22:20.477 iQiYiPhoneVideo[3176:161840] OSStatus error: [-34018] Security error has occurred.2019-08-13 17:22:20.558 iQiYiPhoneVideo[3176:162000] OSStatus error: [-34018] Security error has occurred.3176:161840] Incorrect NSStringEncoding value 0x8000100 detected. Assuming NSASCIIStringEncoding. Will stop this compatiblity mapping behavior in the near future.ontainers/Data/Application/5C31FE18-9BA4-4B2D-80C6-68BF7F65855F/Library/Application Support/爱奇艺/0_im.sqlite</code></pre></li></ul><h4 id="总结-Todo"><a href="#总结-Todo" class="headerlink" title="总结/Todo"></a>总结/Todo</h4><p>这里只是简单的绕过了ptrace方式的反调试，针对直接用汇编写的反调试我的做法是静态内存搜索匹配svc位置，发现是调用26号系统调用则利用内存patch为nop。或者写一个简单的hook代码，hook所有的svc地址，判断寄存器的值然后进行hook即可，这样就能绕过这些反调试机制，再次向Zz和庆哥低头。</p><h4 id="参考-致谢"><a href="#参考-致谢" class="headerlink" title="参考/致谢"></a>参考/致谢</h4><ul><li><p><a href="https://gist.github.com/piaoger/4ba83f6a954bca113505" target="_blank" rel="external">https://gist.github.com/piaoger/4ba83f6a954bca113505</a></p></li><li><p><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></p></li><li><p><a href="https://www.codercto.com/a/63507.html" target="_blank" rel="external">https://www.codercto.com/a/63507.html</a></p></li><li><p><a href="https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26">https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26</a></p></li><li><p><a href="https://github.com/gdbinit/readmem/blob/master/readmem/main.c">https://github.com/gdbinit/readmem/blob/master/readmem/main.c</a></p></li><li><p><a href="https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h">https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h</a></p></li><li><p><a href="http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c" target="_blank" rel="external">http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c</a></p></li><li><p><a href="https://github.com/DaKnOb/memscan/blob/master/main.mm">https://github.com/DaKnOb/memscan/blob/master/main.mm</a></p></li><li><p><a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">http://iosre.com/t/topic/8179</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###iOS LLDB中反反调试分析与实现&lt;/p&gt;
&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h4&gt;&lt;p&gt;关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/QZWj2R4voUT/GiTt9+YibKXN+QY36l7JUCw/DLOIYXfpzi0b7GZNKbnbQ04va29qLGDNMZin/fHyy0NVNkiq6MNwIcsVPqR27mGvQ8CfL2wFOkyZ7hIwpxG2GFmxaiIphYnx73iwopky+4g26miEMiMLsoAS09I24HP34fKnouEFcbBBESA+quYAKGrGTy4Gaa38t0QhrMsyNjQkBgkcFaZ5m3Tr61P2AiU3UmZ1eZGd5Jpa1slBC6aIUpnyimaziTt7h0JOSxBUTu8zwkIHTdnhPzb1fHMTblRIMjUMEslY8zpZWXJfa09EmxuA0mO8FtBmH1SWw8tr0aT8IneBFF4r/gv50X8WmGzqj5UtRiO0R516gOMthYoLO+6UB1zUxet1PlO3DW5cV95DnPhF1Nu8RszFSOprbWsCHln8X+w5tgW3l/rWQNPam4+b/VAwn757pb755xbKXJIM9RjVt7H/d/2KFOw14H4PZYuNAPiJ0RPAl9jG1r5eNIVSyY1AagMmAtQ9MVdOhVy0R/CbRI3i41NXnut/Cdw+cm15WamAyyowD76MUQ91Jqr69Vhk35g8BWJbAN4SbpdjIVEysQPF/2zDq7r2sQxyWuR67lVKTZk48jZuD+fs8f3gBLJOSRp0g5ypxXcawbnuAXMfgp5awKByeMPy/ik8aQ6gVTNXKR4uKGKV+yjSl+CWxCpwk5poRWDnZbIKO6ET3FTpqVgITAtznCDOjIBjYQi1ELdpQnM4bLI/SkSQuX6tQV/uIbfB/UATSrvtYpC1BDp0fecEba6jLDDqyXh10Ktd2/lgEpegnz3f4wJuGuANhLuAfYEJ4GEIDoMKPKMlAhaYNBlqe5+ZEn6K+mAYNPLQXa02uYz2h3mL6uoHrTzXOpPkb4H8xbsVH/huSx9X8dAs7bOFQhTlE4e6Z7ejrUWU9yHse5vI1IGX4GKHFRdhjVktFe+yDeay9f8MDzeaA1lmm6KzvQj1hgHv1oj5dJOoq/pvfnMWqXihjmZxSeUcdEqtE8YrUDCuKo4cx8KmTadhWzGzknxaVaFvwQIQAJEi1TMu7/4pV+OVlA0Kb2yfn3rgGwGXXzH2a15jJ8BM8PemTg8TjcNZPekNq4UrEiefNqu4UQ8pU97Td22h0UbQ1FiYalGjBvm01qGQpBr8EqmJyiNON2A3BwjbAHVGlKGmEc+j/SMy+u+u3vah7Q27R2mdMtbLTyyJ5qqAtuy3ECMABjXorBYTjSK5arKppHxBrWcvUq4uYF+OSPKWXImJkg6ZTuTsf8fvLxgTD11KtWMXRvPuBvAm+aAiXoxepUuhyMRGFtPvTaDxkND9dq5Q+TB+BaUQrXsSIGbYqUF4P0XP5Ka/JZMw2p1XxCZ+N//oQ6l0/vXanwhWOV/YgLlsL7cTx+equoA/sr5/iWjfzFo5K+noH/4YjpS4wW99vCj9+Usl4yYFP9TtQIZhUSbMgmf4GzH1sj0+MqYf1gajGidFrMw2thzBYIbRkGKv9LogyEmqsem/YgkDNiMHbDGMtPDZeRY1dCoLfcVymzJcieyXPZsG/BJ8WJOOwcO0teHyxek7x8+R9k4pBWbH7DR+BhdVQFKjvDpmE8ZKgemmcOByZAMZquptBXuScgTCYoCR0AQ+Ks3i+8b1uBBiTiJhgrQwnTbIGX3pl6PymyGp8uxWtjYmn75lcRY4FEnXsdsyXmK1rqT3blB7kIqUCXYDk0bciy0KYI3Idd+am04GU3Ri/vkQ/6IhlkO6mfFSMAamQXxtfPsJsBW54IHl+rg0TOIL7k9tqdVsNJ0wbmXxb9laPli0ew0E4mfraPmRtroQjRw/NmreA2rJ7Ae+0QqvKDyz5OQOF+2S4F16lzHoRCsHQYMDIhy/dakS4wRfFkK/tux6Oly98NJjKZmik2MaftOWf7t5WKXI3W+ToiQ9NgXcuH6a3HvWQQJo4/xBmrnTtT9JFoXF/3HSfSmzsG6+TegSPvw52NJpl06ham4sjeWyCni2IB+p6bMr8hw9XLToeCpVoJzGhapsWbNtC3pq5cLUnKzpRPO6m45g+HUBTNztRRwEJ6z5yvyWPJeqANjHAGOJrRiLgz6XyUpvUmS1m3nSWZSWJL1hMSLA+kvo+FtXaqs5MDN+6fyJLXI7pCwxKETALsZmEHyVPm6pPU6uTAqB/AZAyyltyRn61HwV011q+ajOJoPwY62Jdg00xwB7FeqxnKE4leZE5D1Z5UDIUww8gejFFFDpWfpd+ixAGahh1cnJKUlUoPlDMzkQU/DWC4qXFq5PmWJm8DcdDb/pO3B2roUlPBes2ZH0Xd8yrsVpIIkruZ9s+na9pciXdz/InCR/gNiKizB5U2P2zRJFU4k9xiOgqKnpBx+aeQlj6FzOvGhCWWerYHd+fB2QScBQnOdo2WrJ1bEFWqKVIIhIupUloSSqL+hFng69584mf8ndH1KuQsaBNH/laB0OXNY7882Wj3iOkvp43TKYA6R0l/tHDzd+PKszvbFL2X+CQuEcvE74UXue8hjgVUKJIzluffPZNIu1wYfXcmhQsTauiBy3VuS5RXY5vHs8LO0YAC7bAHnipGuaumtXbxQ0e171Df2TAFlfKt721FcoDD/y4laNPTawHgQjJh78t5u3MVy1qaEONhiE6Zjz8UV0SP6thT8sCZBsfTQRSY2pVeEW6auQrC0lxvVOYqA==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
</feed>
