<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-30T07:20:10.413Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-07-30T07:20:10.413Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Password is ESP8266">    <label for="pass">Password is ESP8266</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-27T07:02:41.266Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code">    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!">    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
</feed>
