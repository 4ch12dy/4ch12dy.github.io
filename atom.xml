<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-08-04T07:06:56.247Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS微博客户端动态页面去广告</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/04/weibo-re-remove-ad/weibo-re-remove-ad/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/04/weibo-re-remove-ad/weibo-re-remove-ad/</id>
    <published>2019-08-03T16:47:53.000Z</published>
    <updated>2019-08-04T07:06:56.247Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="iOS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android应用安装过程深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/08/01/android-apk-install-process/android-apk-install-process/</id>
    <published>2019-08-01T07:08:31.000Z</published>
    <updated>2019-08-01T10:29:23.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android应用安装过程深度解析"><a href="#Android应用安装过程深度解析" class="headerlink" title="Android应用安装过程深度解析"></a>Android应用安装过程深度解析</h3><blockquote><p>本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。</p></blockquote><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。</p><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>一个 Android 应用安装到手机上大致分为四种情形：</p><ul><li>系统应用，在设备每次启动时完成安装</li><li>通过 adb install 命令安装</li><li>应用市场安装，封装安装过程（略）</li><li>第三方应用安装或双击安装包，会启动系统应用引导安装</li></ul><p>无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。</p><h4 id="场景一：系统应用安装"><a href="#场景一：系统应用安装" class="headerlink" title="场景一：系统应用安装"></a>场景一：系统应用安装</h4><p>在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801151901799.png?raw=true" alt="image-20190801151901799"></p><p><strong>补充：system_server 的启动与运行流程</strong></p><p>system_server 由 zygote 进程孵化，是整个 Android Framework 的基础</p><p>zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152013042.png?raw=true" alt="image-20190801152013042"></p><p>ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信</p><p>RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法</p><p>SystemServer 的 run() 方法中会完成以下工作：</p><ul><li>设置时间、语言等，设置虚拟机库文件，设置内存</li><li>Looper.prepareMainLooper() 主线程 looper 运行在当前线程</li><li>加载库文件 android_servers，位于 /frameworks/base/services</li><li>createSystemContext() 初始化系统上下文</li><li>SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中</li><li>启动各种系统服务，包括引导服务、核心服务、其他服务</li><li>开启循环，等待其他线程通过 handler 发送消息到主线程来处理</li></ul><p>在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152050671.png?raw=true" alt="image-20190801152050671"></p><p>PackageManagerService 类构造函数中完成了许多工作，主要包含：</p><ul><li>创建 Settings 对象，添加系统的 SharedUser 信息</li><li>为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的</li><li>创建 PackageDexOptimizer 和 DexManager 对象</li><li>获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures</li><li>创建 ServiceThread 和 PackagerHandler 对象</li><li>创建 UserManagerService，支持多用户</li><li>读取系统定义的权限保存到 permConfig 变量中</li><li>读取系统共享库保存到 libConfig 变量中</li><li>解析 package.xml 文件中的内容保存到 ArrayMap<string, packageparser.package=""> 结构中</string,></li><li>配置扫描参数 scanFlags</li><li>开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app</li><li>开始扫描非系统应用，包括目录 /data/app、/data/app-private</li><li>启动内存垃圾回收</li><li>启动私有服务 PackageManagerInternal</li></ul><p>总结来说主要是这几项内容：</p><ul><li>创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接</li><li>扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理）</li><li>创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求</li><li>解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射</li></ul><p>详细说明各项：</p><p>Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152128607.png?raw=true" alt="image-20190801152128607"></p><p>Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152145965.png?raw=true" alt="image-20190801152145965"></p><p>构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量</p><p>重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接</p><p>connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中</p><p>Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装</p><p><strong>!!!!  Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现</strong></p><p><strong>PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理</strong></p><p>PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk</p><p>包括：</p><ul><li>系统应用，目录有 <code>/vender/overlay</code>、<code>/system/framework</code>、<code>/system/priv-app</code>、<code>/system/app</code>、<code>/vendor/app</code>、<code>/oem/app</code></li><li>非系统应用，目录有 <code>/data/app</code>、<code>/data/app-private</code></li></ul><p>调用的方法是 <code>scanDirTracedLI()</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152328199.png?raw=true" alt="image-20190801152328199"></p><p>可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI()</p><p>其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理</p><p>后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等</p><h4 id="场景二：adb-命令安装"><a href="#场景二：adb-命令安装" class="headerlink" title="场景二：adb 命令安装"></a>场景二：adb 命令安装</h4><p>adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建</p><p>源码路径为：<a href="http://androidxref.com/8.1.0_r33/xref/system/core/adb/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/system/core/adb/</a></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152448109.png?raw=true" alt="image-20190801152448109"></p><p>adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。</p><p>Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。</p><p>runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152518924.png?raw=true" alt="image-20190801152518924"></p><p>PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。</p><p>发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。</p><p>PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。</p><h4 id="场景三：第三方应用安装"><a href="#场景三：第三方应用安装" class="headerlink" title="场景三：第三方应用安装"></a>场景三：第三方应用安装</h4><p>当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作</p><p>PackageInstaller 的应用代码位于：<a href="http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/</a></p><p>安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152605993.png?raw=true" alt="image-20190801152605993"></p><p>应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。</p><p>然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。</p><p>用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152635344.png?raw=true" alt="image-20190801152635344"></p><p>InstallInstalling 这个类会拿到应用数据开启真正的安装流程。</p><p>首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。</p><p>接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。</p><p>最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去</p><p>这里就跟 adb 安装走到了同一个流程中。</p><h4 id="深入-PMS-中的安装"><a href="#深入-PMS-中的安装" class="headerlink" title="深入 PMS 中的安装"></a>深入 PMS 中的安装</h4><p>上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152711796.png?raw=true" alt="image-20190801152711796"></p><p>在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。</p><p>所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。</p><p><strong>1、处理 INIT_COPY 消息</strong></p><p>首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。</p><p><strong>2、处理 MCS_BOUND 消息</strong></p><p>首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152741833.png?raw=true" alt="image-20190801152741833"></p><p>HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中，</p><p>InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法</p><p>以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制</p><p>HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152755489.png?raw=true" alt="image-20190801152755489"></p><p> installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法</p><p>其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看  installNewPackageLI() 流程</p><p>installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF()</p><p><strong>3、处理 POST_INSTALL 消息</strong></p><p>首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等</p><h4 id="安装过程小结"><a href="#安装过程小结" class="headerlink" title="安装过程小结"></a>安装过程小结</h4><p>与应用相关的一些目录</p><ul><li><p>/system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力</p></li><li><p>/system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用</p></li><li><p>/data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下</p></li></ul><ul><li><p>/data/data：用户应用数据存放路径，存在沙箱隔离</p></li><li><p>/data/dalvik-cache：存放应用的dex 文件</p></li><li><p>/data/system：存放应用安装相关文件</p><ul><li>packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表</li><li>package.list 指定应用的默认存储位置，userid 等</li></ul></li></ul><p>应用安装过程总结</p><ol><li>将应用 apk 拷贝到指定目录下</li><li>解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/<packagename> 数据目录</packagename></li><li>解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中</li><li>由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上</li></ol><h4 id="PMS-与-PM-与APM"><a href="#PMS-与-PM-与APM" class="headerlink" title="PMS 与 PM 与APM"></a>PMS 与 PM 与APM</h4><p>前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152858658.png?raw=true" alt="image-20190801152858658"></p><p>通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象</p><p>ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理</p><p>继续梳理一下这个类与 PMS 之间的关系</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/android-apk-install-process/image-20190801152915992.png?raw=true" alt="image-20190801152915992"></p><p>IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法</p><p>IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface</p><p>IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager</p><ul><li>asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象</li><li>asBinder() 方法返回自身，即 IPackageManager.Stub 对象</li><li>重写了 onTransact() 方法，根据命令类型处理数据传输</li></ul><p>IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口</p><ul><li>mRemote对象是IBinder类型，是对IPackageManager.Stub的引用</li><li>重写了asBinder()方法，返回mRemote</li><li>实现了AIDL文件定义的接口</li></ul><p>PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能：</p><ul><li>安装/卸载/更新应用，包括 installPackage/</li><li>查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表</li><li>查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象</li><li>查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象</li><li>增加/删除权限，包括 addPermission/removePermission</li><li>清除用户数据/缓存/代码等</li></ul><p>PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集</p><p>ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法</p><p>PackageManagerService 继承了 IPackageManager.Stub</p><p>因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://androidxref.com/8.1.0_r33/xref/" target="_blank" rel="external">http://androidxref.com/8.1.0_r33/xref/</a></li><li><a href="https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6" target="_blank" rel="external">https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6</a></li><li><a href="http://solart.cc/2016/10/30/install_apk/" target="_blank" rel="external">http://solart.cc/2016/10/30/install_apk/</a></li><li><a href="https://www.jianshu.com/p/4f16421d5c7f" target="_blank" rel="external">https://www.jianshu.com/p/4f16421d5c7f</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android应用安装过程深度解析&quot;&gt;&lt;a href=&quot;#Android应用安装过程深度解析&quot; class=&quot;headerlink&quot; title=&quot;Android应用安装过程深度解析&quot;&gt;&lt;/a&gt;Android应用安装过程深度解析&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="wiki" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/wiki/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Arduino ESP8266开发板上手实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/</id>
    <published>2019-07-30T02:46:35.000Z</published>
    <updated>2019-08-09T08:47:21.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arduino-ESP8266开发板上手实践"><a href="#Arduino-ESP8266开发板上手实践" class="headerlink" title="Arduino ESP8266开发板上手实践"></a>Arduino ESP8266开发板上手实践</h3><h4 id="环境搭建（macOS）"><a href="#环境搭建（macOS）" class="headerlink" title="环境搭建（macOS）"></a>环境搭建（macOS）</h4><p>官方说明：<a href="https://github.com/esp8266/Arduino">https://github.com/esp8266/Arduino</a></p><ul><li><p><strong>安装IDE （Arduino IDE）</strong></p><p>下载地址：<a href="https://www.arduino.cc/en/main/software" target="_blank" rel="external">https://www.arduino.cc/en/main/software</a></p><p>还有种方式是利用<a href="https://github.com/plerup/makeEspArduino">Makefile</a>去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。</p></li></ul><ul><li><p><strong>下载ESP8266硬件包</strong></p><p>1 、在设置里面的附加板管理器网址中增加以下链接<code>https://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143145367.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、在工具中找到你的开发板，然后进入开发板管理器，搜索<strong>esp8266</strong>安装该库，我这里已经安装了。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730143643887.png?raw=true" width="500" hegiht="313" align="center"></p><p>注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考<a href="https://github.com/esp8266/Arduino">这里</a></p></li><li><p><strong>运行示例代码</strong></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730144157955.png?raw=true" width="500" hegiht="313" align="center"></p><p>我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。</p><p>代码如下</p><pre><code class="c">/*  ESP8266 Blink by Simon Peter  Blink the blue LED on the ESP-01 module  This example code is in the public domain  The blue LED on the ESP-01 module is connected to GPIO1  (which is also the TXD pin; so we cannot use Serial.print() at the same time)  Note that this sketch uses LED_BUILTIN to find the pin with the internal LED*/void setup() {  pinMode(LED_BUILTIN, OUTPUT);     // Initialize the LED_BUILTIN pin as an output}// the loop function runs over and over again forevervoid loop() {  digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level  // but actually the LED is on; this is because  // it is active low on the ESP-01)  delay(1000);                      // Wait for a second  digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED off by making the voltage HIGH  delay(2000);                      // Wait for two seconds (to demonstrate the active low LED)}</code></pre><p>在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。</p></li></ul><h4 id="重要！！！一些坑以及注意点"><a href="#重要！！！一些坑以及注意点" class="headerlink" title="重要！！！一些坑以及注意点"></a>重要！！！一些坑以及注意点</h4><p>下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。</p><p>确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。</p><p>1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">下载地址1</a> <a href="https://github.com/vulgo/IORegistryExplorer">下载地址2</a> <a href="https://mac.softpedia.com/get/System-Utilities/IORegistryExplorer.shtml" target="_blank" rel="external">下载地址3</a>在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145128956.png?raw=true" width="500" hegiht="313" align="center"></p><p>2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过<code>Virtual COM Port</code>去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的<code>/dev</code>目录下并没有出现对应的文件。之前的驱动大多是这个<a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">CH340G CH34G CH34X Mac OS X driver</a> 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在<a href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="external">这里</a>。安装完以后在<code>/dev</code>就应该有一个<code>tty.SLAB_USBtoUART</code>的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/Arduino-ESP8266-bigstep/image-20190730145909934.png?raw=true" width="500" hegiht="313" align="center"></p><h4 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h4><p>这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下</p><ul><li><p><a href="https://www.arduino.cc/en/guide/macOSX?setlang=cn" target="_blank" rel="external">https://www.arduino.cc/en/guide/macOSX?setlang=cn</a></p><p>在Mac OS X系统上入门Arduino/ Genuino</p></li><li><p><a href="https://juejin.im/post/5b569026e51d4513ee6dd509" target="_blank" rel="external">https://juejin.im/post/5b569026e51d4513ee6dd509</a></p><p>Esp8266+Arduino+Mac开发环境搭建</p></li><li><p><a href="https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/" target="_blank" rel="external">https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/</a></p><p>Program an ESP8266 from Arduino on MacOS</p></li><li><p><a href="https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver">https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver</a></p><p>CH340G CH34G CH34X Mac OS X driver</p></li><li><p><a href="http://www.nodemcu.com" target="_blank" rel="external">http://www.nodemcu.com</a></p><p>资料下载访问官网</p></li><li><p><a href="https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg" target="_blank" rel="external">https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg</a></p><p>NODEMCU资料</p></li><li><p><a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html" target="_blank" rel="external">http://www.wch.cn/download/CH341SER_MAC_ZIP.html</a></p><p>mac串口驱动下载地址</p></li><li><p><a href="https://freeware.the-meiers.org/" target="_blank" rel="external">https://freeware.the-meiers.org/</a></p><p>CoolTerm串口监控工具下载</p></li><li><p>SIP禁用步骤</p><pre><code>1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r2. 终端中输入csrutil disable/status/enabled3. 重启mac</code></pre></li></ul><h4 id="AVR逆向基础"><a href="#AVR逆向基础" class="headerlink" title="AVR逆向基础"></a>AVR逆向基础</h4><p>下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。</p><p>由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。</p><p>我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。</p><blockquote><p>AVR refers to the line of MCUs manufactured by Atmel and used in the original designs.</p></blockquote><p>由于ida对这个执行文件的支持不是很好，我们准备用<a href="https://github.com/radare/radare2">radare2</a>来分析这个bin文件。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="https://blog.csdn.net/iotisan/article/details/78766463" target="_blank" rel="external">https://blog.csdn.net/iotisan/article/details/78766463</a></p><p>和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路</p></li><li><p><a href="https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/" target="_blank" rel="external">https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/</a></p><p>Any NodeMCU esp8266 Drivers for MacOS Mojave?</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arduino-ESP8266开发板上手实践&quot;&gt;&lt;a href=&quot;#Arduino-ESP8266开发板上手实践&quot; class=&quot;headerlink&quot; title=&quot;Arduino ESP8266开发板上手实践&quot;&gt;&lt;/a&gt;Arduino ESP8266开发板上手
      
    
    </summary>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IOT/"/>
    
    
      <category term="Arduino" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"/>
    
      <category term="IOT" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Electron跨平台App实战分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/29/Electron-app-reversing/Electron-app-reversing/</id>
    <published>2019-07-29T03:59:49.000Z</published>
    <updated>2019-07-29T14:45:34.468Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Electron" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"/>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-30T07:52:20.330Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="Accessibility" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>微信集赞/评论插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-28T13:58:12.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信集赞-评论插件分析及开发"><a href="#微信集赞-评论插件分析及开发" class="headerlink" title="微信集赞/评论插件分析及开发"></a>微信集赞/评论插件分析及开发</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！</p><h4 id="理性分析"><a href="#理性分析" class="headerlink" title="理性分析"></a>理性分析</h4><p>再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><ul><li>一台mac</li><li>一台越狱的iOS设备</li><li>ida/Hooper/theos</li><li>flex/issh/xia0LLDB</li><li>其他常见逆向工具等</li></ul><p>对于一贯喜欢上调试器分析得我，所以写了<a href="https://github.com/4ch12dy/issh">iSSH</a>和<a href="https://github.com/4ch12dy/xia0LLDB">xia0LLDB</a>两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。</p><h4 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h4><h5 id="逆向赞和评论的数据模型"><a href="#逆向赞和评论的数据模型" class="headerlink" title="逆向赞和评论的数据模型"></a>逆向赞和评论的数据模型</h5><p>一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为<code>WCTimeLineViewController</code>而且界面是一个<code>UITableView</code></p><p>将wechat执行文件拖入Hooper（<del>wechat文件太大，ida分析会很卡</del>）找到UITableView的代理方法：<br><code>-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]</code></p><p>这里面肯定会根据模型去设置cell数据</p><pre><code class="objective-c">  r2 = [r28 section];  var_70 = r25;  r24 = [r25 calcDataItemIndex:r2];  r25 = [[MMServiceCenter defaultCenter] retain];  r2 = [WCFacade class];  var_78 = r28;  r0 = [r25 getService:r2];  r0 = [r0 retain];  r24 = [[r0 getTimelineDataItemOfIndex:r24] retain];  [r0 release];  [r25 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r25 = [[r0 getLayerIdForDataItem:r24] retain];  [r0 release];  [r19 release];  r19 = [[MMServiceCenter defaultCenter] retain];  r0 = [r19 getService:[WCFacade class]];  r0 = [r0 retain];  r20 = r0;  r0 = [r0 getShowTip:r24 layerId:r25];  r29 = r29;  r26 = [r0 retain];  [r20 release];  [r19 release];</code></pre><p>整理下来就是</p><p><code>[[MMServiceCenter defaultCenter] getService:[WCFacade class]]</code>会得到一个<code>WCFacade</code>对象，然后通过</p><p><code>[WCFacade getTimelineDataItemOfIndex:]</code>就能得到cell的数据</p><p>看到这里，上调试器！看下都是什么数据…</p><p>将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信</p><p>直接输入<code>issh debug -a wechat</code>就能挂上微信</p><pre><code class="shell">xia0 ~ $ issh debug -a wechat[I]:iproxy process for 2222 port alive, pid=1382[I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++[I]:iOSRE dir exist[I]:iproxy process for 1234 port alive, pid=1395[I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null)[I]:/iOSRE/tools/debugserver file exist, Start debug...[I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat</code></pre><p>打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本）</p><pre><code>xia0 ~ $ lldb&quot;xutil&quot; command installed -&gt; xutil&quot;choose&quot; command installed -&gt; choose&quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:]&quot;sbt&quot; command installed -&gt; sbt// 连接到远端(lldb) pcc</code></pre><p>这里有两种方法：</p><p>一种是用<code>xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;</code>下断点去查看；</p><pre><code>// 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点(lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;(lldb) c</code></pre><p>第二种是由于lldb支持choose命令，可以直接拿到<code>WCFacade</code>对象。既然如此选choose</p><pre><code>(lldb) choose WCFacade&lt;__NSArrayM 0x2823d9860&gt;(&lt;WCFacade: 0x139e1c030&gt;)</code></pre><p>调用其<code>getTimelineDataItemOfIndex:</code>方法就能拿到第一条朋友圈的数据</p><pre><code>(lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0]Class name: WCDataItem, addr: 0x13e2871d0tid: 13121667995275047007username: wxid_6913ohfkk7kq12createtime: 1564224719commentUsers: ()contentObj: &lt;WCContentItem: 0x2801f5500&gt;</code></pre><p>输入<code>ivars 0x13e2871d0</code>就能拿到对象的所有属性值</p><pre><code>(lldb) ivars 0x13e2871d0&lt;WCDataItem: 0x13e2871d0&gt;:in WCDataItem:    cid (int): 0    tid (NSString*): @&quot;13121667995275047007&quot;    type (int): 0    flag (int): 0    username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot;    nickname (NSString*): @&quot;xia0&quot;    createtime (int): 1564224719    locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt;    likeFlag (BOOL): NO    likeCount (int): 0    likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt;    commentCount (int): 0    commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt;    contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt;    appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt;    contentDesc (NSString*): @&quot;test&quot;</code></pre><p>由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。</p><p>里面我们还发现了<code>likeUsers</code>和<code>commentUsers</code>的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。</p><pre><code>likeCount (int): 1likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt;</code></pre><p>发现赞的数量变为1了，在看下里面的内容</p><pre><code>(lldb) po 0x283e37060&lt;__NSArrayM 0x283e37060&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content:source: 0type: 1createTime: 1564225007isLocalAdded: 0commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName:bDeleted: 0)</code></pre><p>正是我自己的微信号。同理可以得到评论</p><pre><code>commentCount (int): 1commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt;(lldb) po 0x283e349c0&lt;__NSArrayM 0x283e349c0&gt;(Class name: WCUserCommentusername: wxid_6913ohfkk7kq12nickname: xia0content: 评论测试source: 0type: 2createTime: 1564225144isLocalAdded: 1commentID: (null)comment64ID: (null)refCommentID: (null)refComment64ID: (null)refUserName: (null)bDeleted: 0)</code></pre><p>到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。</p><p>最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。</p><h5 id="寻找HOOK点"><a href="#寻找HOOK点" class="headerlink" title="寻找HOOK点"></a>寻找HOOK点</h5><p>先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个<code>WCDataItem</code>对象，那么我们可以对<code>WCDataItem</code>里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？</p><p>但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样</p><pre><code>(lldb) bt* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1  * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888    frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004    frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340    frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228    frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92    frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992    frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240    frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776    frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248    frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932</code></pre><p>但是用我写的sbt命令就能恢复oc符号，下面我们对<code>-[WCDataItem setCid:]</code>下断点，然后得到调用栈</p><pre><code>(lldb) sbt==========================================xia0LLDB==========================================  BlockSymbolFile    Not Set The Block Symbol Json File, Try &#39;sbt -f&#39;============================================================================================  frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0  frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004  frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340  frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228  frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92  frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64  frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116  frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48  frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552  frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348  frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233  frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732  frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112  frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336  frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728  frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68  frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84  frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88  frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32  frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884  frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252  frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832  frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452  frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104  frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216  frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268  frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4</code></pre><p>可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程</p><p>其中里面有个很明显的方法</p><p><code>-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:]</code></p><p>看名字就知道，这个应该就是我们需要的hook点。</p><h5 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h5><p>整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。</p><p>大概的代码逻辑应该如下</p><ul><li>在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈</li><li>取出自己朋友圈的赞和评论数据备用</li><li>随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面</li></ul><p>下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。</p><p>这里分析的过程和上面类似，我选择的hook点为：<br><code>-[WCCommentDetailViewControllerFB setDataItem:]</code></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>具体的代码实现这里就不再去分析了，我把代码开源到了这里<a href="https://github.com/4ch12dy/fkwechatzan">fkwechatzan</a></p><h4 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h4><ul><li><p>集赞助手设置界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1361564255775_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li></ul><ul><li><p>朋友圈详情界面</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1341564229215_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p></li><li><p>赞和评论</p></li></ul><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/fkwechatLike/1321564227655_.pic.jpg?raw=true" width="400" hegiht="200" align="center"></p><h4 id="一点总结"><a href="#一点总结" class="headerlink" title="一点总结"></a>一点总结</h4><p>本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。</p><p>最后，妈妈再也不用担心没有人赞我的朋友圈了~</p><p>下次集赞领礼品的活动我要定了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信集赞-评论插件分析及开发&quot;&gt;&lt;a href=&quot;#微信集赞-评论插件分析及开发&quot; class=&quot;headerlink&quot; title=&quot;微信集赞/评论插件分析及开发&quot;&gt;&lt;/a&gt;微信集赞/评论插件分析及开发&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-08-01T07:53:10.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>android调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid-debug-note/andoid-debug-note/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-08-01T07:52:05.503Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="Android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"/>
    
      <category term="debug" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Android AutoJS 脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-07-30T07:55:01.711Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/RE/"/>
    
    
      <category term="RE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"/>
    
      <category term="AutoJS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
</feed>
