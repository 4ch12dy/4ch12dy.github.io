[{"title":"macOS内核架构及其功能","date":"2016-03-04T17:51:44.000Z","path":"2016/03/05/macOS内核架构及其功能/","text":"macOS内核架构及其功能the xnu Kernal of following componentMach servers layer BSD primary systerm programming interface provide The I/OKit runtime environment for drivers libkernal in-kernel library libsaan in-kernel library that is normally used only during early systerm startup the platform expert hardware abstraction module kernel extension various I/OKit family,the majority of loadable device drivers,and some non-I/O Kit extention Mach(If the xnu kernel is the core of Mac OS X, then Mach may be considered the core of xnu.)hardware abstraction to some extent processor management including symmetric mutiprocessing and scheduling Preemptive multitasking, including support for tasks and threads Virtual memory management, including low-level paging, memory protection, sharing, and inheritance Low-level IPC mechanisms that are the basis for all messaging in the kernel Real-time support that allows time-sensitive applications (e.g., media applications such asGarageBand and iTunes) to have latency-bounded access to processor resources Kernel debugging support Console I/O BSDBSD-style process model Signals User IDs, permissions, and basic security policies POSIX APIs Asynchronous I/O APIs (AIO) BSD-style system calls TCP/IP stack, BSD sockets, and firewalling Network Kernel Extensions (NKEs), a type of kernel extension for making the BSD networking architecture fit into xnu[11] The virtual file system (VFS) layer and numerous file systems, including a file-system-independent VFS-level journaling mechanism System V and POSIX interprocess communication mechanisms In-kernel cryptographic framework A system notification mechanism based on FreeBSD’s kqueue/kevent mechanism, which is a system- wide service enabling notifications between applications, and from the kernel to applications The fsevents file system change notification mechanism that is used by the Spotlight search technology Access control lists (ACLs) and the kauth authorization framework Various synchronization primitives The I/O KitExtensive programming interfaces, including interfaces for applications and user-space drivers to communicate with the I/O Kit Numerous device families such as ATA/ATAPI, FireWire, Graphics, HID, Network, PCI, and USB Object-oriented abstractions of devices Plug-and-play and dynamic device management (“hot-plugging”) Power management Preemptive multitasking, threading, symmetric multiprocessing, memory protection, and data management Dynamic matching and loading of drivers for multiple bus types A database for tracking and maintaining detailed information on instantiated objects (the I/O Registry) A database of all I/O Kit classes available on a system (the I/O Catalog)Interfaces for applications and user-space drivers to communicate with the I/O Kit Driver stacking The libkern LibraryDynamic allocation, construction, and destruction objects, with support for a variety of built-in object types such as Arrays, Booleans, and Dictionaries Atomic operations and miscellaneous functions such as bcmp(), memcmp(), and strlen() Functions for byte-swapping Provisions for tracking the number of current instances for each class Mechanisms that help alleviate the C++ fragile base-class problem The libsa Library(libsa is an in-kernel support library essentially an in-kernel linkerused during early system startup for loading kernel extensions,sa=stand-alone)Mac OS X kernel extensions are normally loaded on demand through the kexTD user-space daemon (/usr/libexec/kextd). During early stages of bootstrapping, kextd is not yet available. libsa provides a subset of kextd’s capabilities to the kernel. Examples of specific functionality implemented by libsa for loading, linking, and recording kernel extension object files include the following: Simple memory allocation Binary searching Sorting Miscellaneous string-handling functions  Symbol remangling A dependency graph package used while determining kernel extension dependencies Decompression of compressed kernels and verification of checksums The Platform ExpertNubs[In the context of the I/O Kit, a nub is an object that defines an access point and communication channel for a physical device or a logical service. A physical device could be a bus, a disk drive or partition, a graphics card, and so on. Examples of logical services include arbitration, driver matching, and power management.] Constructing device trees Parsing certain boot arguments Identifying the machine, which includes determining processor and bus clock speeds  Accessing power management information Retrieving and setting system time Retrieving and setting console information Halting and restarting the machine Accessing the interrupt controller Creating the system serial number string Saving kernel panic information Initializing a “user interface” to be used in case of kernel panics Reading and writing the nonvolatile memory (NVRAM) Reading and writing the parameter memory (PRAM) task and thread任务是一个包含一个或多个可执行线程的任务组，这些线程共享资源和内存空间。Mach的任务是将一对一映射到Unix BSD层的进程。XNU内核也是一个包含多个线程的任务。","tags":[{"name":"macOS内核","slug":"macOS内核","permalink":"https://github.com/NULL-ME/NULL-ME.github.io.git/tags/macOS内核/"}]}]